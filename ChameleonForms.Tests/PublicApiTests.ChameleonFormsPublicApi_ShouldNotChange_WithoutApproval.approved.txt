ASSEMBLY ChameleonForms.Core
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.1", FrameworkDisplayName="")]
namespace ChameleonForms.Component
{
    public class ButtonHtmlAttributes : ChameleonForms.LazyHtmlAttributes
    {
        public ButtonHtmlAttributes(System.Func<ChameleonForms.HtmlAttributes, Microsoft.AspNetCore.Html.IHtmlContent> htmlGenerator) { }
    }
    public enum FieldParent
    {
        Form = 0,
        Section = 1,
    }
}
namespace ChameleonForms.Component.Config
{
    public class FieldConfiguration : ChameleonForms.Component.Config.IFieldConfiguration, ChameleonForms.Component.Config.IReadonlyFieldConfiguration, Microsoft.AspNetCore.Html.IHtmlContent
    {
        public FieldConfiguration() { }
        public System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> AppendedHtml { get; }
        public ChameleonForms.HtmlAttributes Attributes { get; }
        public dynamic Bag { get; }
        public ChameleonForms.Enums.FieldDisplayType DisplayType { get; }
        public bool EmptyItemHidden { get; }
        public System.Enum[] ExcludedEnums { get; }
        public string FalseString { get; }
        public string FieldContainerClasses { get; }
        public Microsoft.AspNetCore.Html.IHtmlContent FieldHtml { get; }
        public string FormatString { get; }
        public bool HasInlineLabel { get; }
        public bool HasLabelElement { get; }
        public Microsoft.AspNetCore.Html.IHtmlContent Hint { get; }
        public string HintId { get; }
        public System.Collections.Generic.IDictionary<string, object> HtmlAttributes { get; }
        public Microsoft.AspNetCore.Html.IHtmlContent InlineLabelText { get; }
        public string LabelClasses { get; }
        public Microsoft.AspNetCore.Html.IHtmlContent LabelText { get; }
        public string NoneString { get; }
        public System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> PrependedHtml { get; }
        public bool ShouldInlineLabelWrapElement { get; }
        public string TrueString { get; }
        public string ValidationClasses { get; }
        public ChameleonForms.Component.Config.IFieldConfiguration AddClass(string @class) { }
        public ChameleonForms.Component.Config.IFieldConfiguration AddFieldContainerClass(string @class) { }
        public ChameleonForms.Component.Config.IFieldConfiguration AddLabelClass(string @class) { }
        public ChameleonForms.Component.Config.IFieldConfiguration AddValidationClass(string @class) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Append(Microsoft.AspNetCore.Html.IHtmlContent html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Append(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Append(string str) { }
        public ChameleonForms.Component.Config.IFieldConfiguration AsCheckboxList() { }
        public ChameleonForms.Component.Config.IFieldConfiguration AsDropDown() { }
        public ChameleonForms.Component.Config.IFieldConfiguration AsRadioList() { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attr(System.Func<object, object> attribute) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attr(string key, object value) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attrs(System.Collections.Generic.IDictionary<string, object> attributes) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attrs(System.Collections.Generic.IDictionary<string, string> attributes) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attrs(params System.Func<, >[] attributes) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Attrs(object attributes) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Cols(int numCols) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Disabled(bool disabled = true) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Exclude(params System.Enum[] enumValues) { }
        public TData GetBagData<TData>(string propertyName) { }
        public ChameleonForms.Component.Config.IFieldConfiguration HideEmptyItem() { }
        public ChameleonForms.Component.Config.IFieldConfiguration Id(string id) { }
        public ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(Microsoft.AspNetCore.Html.IHtmlContent labelHtml) { }
        public ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> labelHtml) { }
        public ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(string labelText) { }
        public ChameleonForms.Component.Config.IFieldConfiguration InlineLabelWrapsElement(bool wrapElement = true) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Label(Microsoft.AspNetCore.Html.IHtmlContent labelHtml) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Label(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> labelHtml) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Label(string labelText) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Max(decimal max) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Max(long max) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Max(string max) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Min(decimal min) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Min(long min) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Min(string min) { }
        public ChameleonForms.Component.Config.IFieldConfiguration OverrideFieldHtml(Microsoft.AspNetCore.Html.IHtmlContent html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration OverrideFieldHtml(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Placeholder(string placeholderText) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Prepend(Microsoft.AspNetCore.Html.IHtmlContent html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Prepend(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Prepend(string str) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Readonly(bool readonly = true) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Required(bool required = true) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Rows(int numRows) { }
        public void SetField(Microsoft.AspNetCore.Html.IHtmlContent field) { }
        public void SetField(System.Func<Microsoft.AspNetCore.Html.IHtmlContent> field) { }
        public void SetField(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> field) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Step(decimal step) { }
        public ChameleonForms.Component.Config.IFieldConfiguration Step(long step) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithFalseAs(string falseString) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithFormatString(string formatString) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithHint(Microsoft.AspNetCore.Html.IHtmlContent hint) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithHint(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> hint) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithHint(string hint) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithHintId(string hintId) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithNoneAs(string noneString) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithTrueAs(string trueString) { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithoutInlineLabel() { }
        public ChameleonForms.Component.Config.IFieldConfiguration WithoutLabelElement() { }
        public void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder) { }
    }
    public static class FieldConfigurationExtensions
    {
        public static ChameleonForms.Component.Config.IFieldConfiguration AutoFocus(this ChameleonForms.Component.Config.IFieldConfiguration config) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration TabIndex(this ChameleonForms.Component.Config.IFieldConfiguration config, int index) { }
    }
    public interface IFieldConfiguration : ChameleonForms.Component.Config.IReadonlyFieldConfiguration, Microsoft.AspNetCore.Html.IHtmlContent
    {
        ChameleonForms.HtmlAttributes Attributes { get; }
        ChameleonForms.Component.Config.IFieldConfiguration AddClass(string @class);
        ChameleonForms.Component.Config.IFieldConfiguration AddFieldContainerClass(string @class);
        ChameleonForms.Component.Config.IFieldConfiguration AddLabelClass(string @class);
        ChameleonForms.Component.Config.IFieldConfiguration AddValidationClass(string @class);
        ChameleonForms.Component.Config.IFieldConfiguration Append(Microsoft.AspNetCore.Html.IHtmlContent html);
        ChameleonForms.Component.Config.IFieldConfiguration Append(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html);
        ChameleonForms.Component.Config.IFieldConfiguration Append(string str);
        ChameleonForms.Component.Config.IFieldConfiguration AsCheckboxList();
        ChameleonForms.Component.Config.IFieldConfiguration AsDropDown();
        ChameleonForms.Component.Config.IFieldConfiguration AsRadioList();
        ChameleonForms.Component.Config.IFieldConfiguration Attr(System.Func<object, object> attribute);
        ChameleonForms.Component.Config.IFieldConfiguration Attr(string key, object value);
        ChameleonForms.Component.Config.IFieldConfiguration Attrs(System.Collections.Generic.IDictionary<string, object> attributes);
        ChameleonForms.Component.Config.IFieldConfiguration Attrs(System.Collections.Generic.IDictionary<string, string> attributes);
        ChameleonForms.Component.Config.IFieldConfiguration Attrs(params System.Func<, >[] attributes);
        ChameleonForms.Component.Config.IFieldConfiguration Attrs(object attributes);
        ChameleonForms.Component.Config.IFieldConfiguration Cols(int numCols);
        ChameleonForms.Component.Config.IFieldConfiguration Disabled(bool disabled = true);
        ChameleonForms.Component.Config.IFieldConfiguration Exclude(params System.Enum[] enumValues);
        ChameleonForms.Component.Config.IFieldConfiguration HideEmptyItem();
        ChameleonForms.Component.Config.IFieldConfiguration Id(string id);
        ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(Microsoft.AspNetCore.Html.IHtmlContent labelHtml);
        ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> labelHtml);
        ChameleonForms.Component.Config.IFieldConfiguration InlineLabel(string labelText);
        ChameleonForms.Component.Config.IFieldConfiguration InlineLabelWrapsElement(bool wrapElement = true);
        ChameleonForms.Component.Config.IFieldConfiguration Label(Microsoft.AspNetCore.Html.IHtmlContent labelHtml);
        ChameleonForms.Component.Config.IFieldConfiguration Label(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> labelHtml);
        ChameleonForms.Component.Config.IFieldConfiguration Label(string labelText);
        ChameleonForms.Component.Config.IFieldConfiguration Max(decimal max);
        ChameleonForms.Component.Config.IFieldConfiguration Max(long max);
        ChameleonForms.Component.Config.IFieldConfiguration Max(string max);
        ChameleonForms.Component.Config.IFieldConfiguration Min(decimal min);
        ChameleonForms.Component.Config.IFieldConfiguration Min(long min);
        ChameleonForms.Component.Config.IFieldConfiguration Min(string min);
        ChameleonForms.Component.Config.IFieldConfiguration OverrideFieldHtml(Microsoft.AspNetCore.Html.IHtmlContent html);
        ChameleonForms.Component.Config.IFieldConfiguration OverrideFieldHtml(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html);
        ChameleonForms.Component.Config.IFieldConfiguration Placeholder(string placeholderText);
        ChameleonForms.Component.Config.IFieldConfiguration Prepend(Microsoft.AspNetCore.Html.IHtmlContent html);
        ChameleonForms.Component.Config.IFieldConfiguration Prepend(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> html);
        ChameleonForms.Component.Config.IFieldConfiguration Prepend(string str);
        ChameleonForms.Component.Config.IFieldConfiguration Readonly(bool readonly = true);
        ChameleonForms.Component.Config.IFieldConfiguration Required(bool required = true);
        ChameleonForms.Component.Config.IFieldConfiguration Rows(int numRows);
        void SetField(Microsoft.AspNetCore.Html.IHtmlContent field);
        void SetField(System.Func<Microsoft.AspNetCore.Html.IHtmlContent> field);
        void SetField(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> field);
        ChameleonForms.Component.Config.IFieldConfiguration Step(decimal step);
        ChameleonForms.Component.Config.IFieldConfiguration Step(long step);
        ChameleonForms.Component.Config.IFieldConfiguration WithFalseAs(string falseString);
        ChameleonForms.Component.Config.IFieldConfiguration WithFormatString(string formatString);
        ChameleonForms.Component.Config.IFieldConfiguration WithHint(Microsoft.AspNetCore.Html.IHtmlContent hint);
        ChameleonForms.Component.Config.IFieldConfiguration WithHint(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> hint);
        ChameleonForms.Component.Config.IFieldConfiguration WithHint(string hint);
        ChameleonForms.Component.Config.IFieldConfiguration WithHintId(string hintId);
        ChameleonForms.Component.Config.IFieldConfiguration WithNoneAs(string noneString);
        ChameleonForms.Component.Config.IFieldConfiguration WithTrueAs(string trueString);
        ChameleonForms.Component.Config.IFieldConfiguration WithoutInlineLabel();
        ChameleonForms.Component.Config.IFieldConfiguration WithoutLabelElement();
    }
    public interface IReadonlyFieldConfiguration
    {
        System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> AppendedHtml { get; }
        dynamic Bag { get; }
        ChameleonForms.Enums.FieldDisplayType DisplayType { get; }
        bool EmptyItemHidden { get; }
        System.Enum[] ExcludedEnums { get; }
        string FalseString { get; }
        string FieldContainerClasses { get; }
        Microsoft.AspNetCore.Html.IHtmlContent FieldHtml { get; }
        string FormatString { get; }
        bool HasInlineLabel { get; }
        bool HasLabelElement { get; }
        Microsoft.AspNetCore.Html.IHtmlContent Hint { get; }
        string HintId { get; }
        System.Collections.Generic.IDictionary<string, object> HtmlAttributes { get; }
        Microsoft.AspNetCore.Html.IHtmlContent InlineLabelText { get; }
        string LabelClasses { get; }
        Microsoft.AspNetCore.Html.IHtmlContent LabelText { get; }
        string NoneString { get; }
        System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> PrependedHtml { get; }
        bool ShouldInlineLabelWrapElement { get; }
        string TrueString { get; }
        string ValidationClasses { get; }
        TData GetBagData<TData>(string propertyName);
    }
}
namespace ChameleonForms.Enums
{
    public enum EncType
    {
        [System.ComponentModel.Description("application/x-www-form-urlencoded")]
        UrlEncoded = 0,
        [System.ComponentModel.Description("multipart/form-data")]
        Multipart = 1,
        [System.ComponentModel.Description("text/plain")]
        Plain = 2,
    }
    public enum FieldDisplayType
    {
        Default = 0,
        List = 1,
        DropDown = 2,
        SingleLineText = 3,
        FileUpload = 4,
        MultiLineText = 5,
        Checkbox = 6,
        Custom = 7,
    }
    public enum MessageType
    {
        Action = 0,
        Success = 1,
        Failure = 2,
        Information = 3,
        Warning = 4,
    }
    public enum TextInputType
    {
        Text = 0,
        Password = 1,
        File = 2,
        Email = 3,
        Url = 4,
        Number = 5,
    }
}
namespace ChameleonForms
{
    public static class Extensions
    {
        public static ChameleonForms.HtmlAttributes Attrs(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, params System.Func<, >[] attrs) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent ToHtml(this string content) { }
    }
    public class HtmlAttributes : Microsoft.AspNetCore.Html.IHtmlContent
    {
        public HtmlAttributes(System.Collections.Generic.IDictionary<string, object> attributes) { }
        public HtmlAttributes(System.Collections.Generic.IDictionary<string, string> attributes) { }
        public HtmlAttributes(params System.Func<, >[] attributes) { }
        public HtmlAttributes(object attributes) { }
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; }
        public ChameleonForms.HtmlAttributes AddClass(string @class) { }
        public ChameleonForms.HtmlAttributes Attr(System.Func<object, object> attribute) { }
        public ChameleonForms.HtmlAttributes Attr(string key, object value) { }
        public ChameleonForms.HtmlAttributes Attrs(System.Collections.Generic.IDictionary<string, object> attributes) { }
        public ChameleonForms.HtmlAttributes Attrs(System.Collections.Generic.IDictionary<string, string> attributes) { }
        public ChameleonForms.HtmlAttributes Attrs(params System.Func<, >[] attributes) { }
        public ChameleonForms.HtmlAttributes Attrs(object attributes) { }
        public ChameleonForms.HtmlAttributes Disabled(bool disabled = true) { }
        public bool Has(string key) { }
        public ChameleonForms.HtmlAttributes Id(string id) { }
        public ChameleonForms.HtmlAttributes Readonly(bool readonly = true) { }
        public ChameleonForms.HtmlAttributes Required(bool required = true) { }
        public System.Collections.Generic.IDictionary<string, object> ToDictionary() { }
        public virtual void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder) { }
        public static ChameleonForms.HtmlAttributes op_Implicit(System.Collections.Generic.Dictionary<string, object> attributes) { }
        public static ChameleonForms.HtmlAttributes op_Implicit(System.Collections.Generic.Dictionary<string, string> attributes) { }
    }
    public static class HtmlAttributesExtensions
    {
        public static ChameleonForms.HtmlAttributes ToHtmlAttributes(this System.Collections.Generic.IDictionary<string, object> htmlAttributes) { }
        public static ChameleonForms.HtmlAttributes ToHtmlAttributes(this object htmlAttributes) { }
    }
    public class LazyHtmlAttributes : ChameleonForms.HtmlAttributes
    {
        public LazyHtmlAttributes(System.Func<ChameleonForms.HtmlAttributes, Microsoft.AspNetCore.Html.IHtmlContent> htmlGenerator) { }
        public override void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder) { }
    }
}
namespace ChameleonForms.FieldGenerators.Handlers
{
    public interface IFieldGeneratorHandler<TModel, T>
    {
        bool CanHandle();
        Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration);
    }
}
namespace ChameleonForms.FieldGenerators
{
    public interface IFieldGenerator
    {
        Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata Metadata { get; }
        ChameleonForms.Templates.IFormTemplate Template { get; }
        Microsoft.AspNetCore.Html.IHtmlContent GetFieldHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration);
        Microsoft.AspNetCore.Html.IHtmlContent GetFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        string GetFieldId();
        Microsoft.AspNetCore.Html.IHtmlContent GetLabelHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration);
        Microsoft.AspNetCore.Html.IHtmlContent GetLabelHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        Microsoft.AspNetCore.Html.IHtmlContent GetValidationHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration);
        Microsoft.AspNetCore.Html.IHtmlContent GetValidationHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        ChameleonForms.Component.Config.IReadonlyFieldConfiguration PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration, ChameleonForms.Component.FieldParent fieldParent);
    }
    public interface IFieldGenerator<TModel, T> : ChameleonForms.FieldGenerators.IFieldGenerator
    {
        System.Linq.Expressions.Expression<System.Func<TModel, T>> FieldProperty { get; }
        Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> HtmlHelper { get; }
        System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes();
        string GetFieldDisplayName();
        TModel GetModel();
        T GetValue();
    }
}
namespace ChameleonForms.Templates
{
    public static class HtmlCreator
    {
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildButton(Microsoft.AspNetCore.Html.IHtmlContent content, string type = null, string id = null, string value = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildButton(string text, string type = null, string id = null, string value = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildFormTag(string action, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, ChameleonForms.HtmlAttributes htmlAttributes = null, ChameleonForms.Enums.EncType? encType = default) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildInput(string name, string value, string type, ChameleonForms.HtmlAttributes htmlAttributes) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildLabel(string @for, Microsoft.AspNetCore.Html.IHtmlContent labelText, ChameleonForms.HtmlAttributes htmlAttributes) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildSelect(string name, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> selectListItems, bool multiple, ChameleonForms.HtmlAttributes htmlAttributes) { }
        public static Microsoft.AspNetCore.Html.IHtmlContent BuildSingleCheckbox(string name, bool isChecked, ChameleonForms.HtmlAttributes htmlAttributes, string value = "true") { }
    }
    public interface IFormTemplate
    {
        Microsoft.AspNetCore.Html.IHtmlContent BeginField(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid);
        Microsoft.AspNetCore.Html.IHtmlContent BeginForm(string action, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, ChameleonForms.HtmlAttributes htmlAttributes, ChameleonForms.Enums.EncType? enctype);
        Microsoft.AspNetCore.Html.IHtmlContent BeginMessage(ChameleonForms.Enums.MessageType messageType, Microsoft.AspNetCore.Html.IHtmlContent heading);
        Microsoft.AspNetCore.Html.IHtmlContent BeginNavigation();
        Microsoft.AspNetCore.Html.IHtmlContent BeginNestedSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null);
        Microsoft.AspNetCore.Html.IHtmlContent BeginSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null);
        Microsoft.AspNetCore.Html.IHtmlContent Button(Microsoft.AspNetCore.Html.IHtmlContent content, string type, string id, string value, ChameleonForms.HtmlAttributes htmlAttributes);
        Microsoft.AspNetCore.Html.IHtmlContent EndField();
        Microsoft.AspNetCore.Html.IHtmlContent EndForm();
        Microsoft.AspNetCore.Html.IHtmlContent EndMessage();
        Microsoft.AspNetCore.Html.IHtmlContent EndNavigation();
        Microsoft.AspNetCore.Html.IHtmlContent EndNestedSection();
        Microsoft.AspNetCore.Html.IHtmlContent EndSection();
        Microsoft.AspNetCore.Html.IHtmlContent Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid);
        Microsoft.AspNetCore.Html.IHtmlContent MessageParagraph(Microsoft.AspNetCore.Html.IHtmlContent paragraph);
        void PrepareFieldConfiguration<TModel, T>(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator, ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration, ChameleonForms.Component.FieldParent fieldParent);
        Microsoft.AspNetCore.Html.IHtmlContent RadioOrCheckboxList(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> list, bool isCheckbox);
    }
}
namespace Microsoft.AspNetCore.Html
{
    public static class HtmlContentExtensions { }
}
ASSEMBLY ChameleonForms
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.1", FrameworkDisplayName="")]
namespace ChameleonForms.Attributes
{
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class ExistsInAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute
    {
        public const string ExistsKey = "ExistsInList";
        public const string NameKey = "ExistsInNameProperty";
        public const string PropertyKey = "ExistsInProperty";
        public const string ValueKey = "ExistsInValueProperty";
        public static bool EnableValidation;
        public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty) { }
        public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty, bool enableValidation) { }
        public void GetDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext metadata) { }
        protected override System.ComponentModel.DataAnnotations.ValidationResult IsValid(object value, System.ComponentModel.DataAnnotations.ValidationContext context) { }
        public static void ValidateListConfiguration(object model, string listProperty, string valueProperty, string nameProperty, string memberName) { }
    }
}
namespace ChameleonForms
{
    public static class ChameleonFormExtensions
    {
        public static ChameleonForms.IForm<TModel> BeginChameleonForm<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper, string action = "", Microsoft.AspNetCore.Mvc.Rendering.FormMethod method = 1, ChameleonForms.HtmlAttributes htmlAttributes = null, ChameleonForms.Enums.EncType? enctype = default, bool? outputAntiforgeryToken = default) { }
        public static ChameleonForms.IForm<TNewModel> BeginChameleonFormFor<TOriginalModel, TNewModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TOriginalModel> helper, TNewModel model, string action = "", Microsoft.AspNetCore.Mvc.Rendering.FormMethod method = 1, ChameleonForms.HtmlAttributes htmlAttributes = null, ChameleonForms.Enums.EncType? enctype = default, bool? outputAntiforgeryToken = default) { }
        public static ChameleonForms.IForm<TChildModel> BeginChameleonFormFor<TParentModel, TChildModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TParentModel> helper, System.Linq.Expressions.Expression<System.Func<TParentModel, TChildModel>> formFor, string action = "", Microsoft.AspNetCore.Mvc.Rendering.FormMethod method = 1, ChameleonForms.HtmlAttributes htmlAttributes = null, ChameleonForms.Enums.EncType? enctype = default, bool? outputAntiforgeryToken = default) { }
        public static System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialForAsync<TModel, TPartialModel>(this ChameleonForms.IForm<TModel> form, System.Linq.Expressions.Expression<System.Func<TModel, TPartialModel>> partialModelProperty, string partialViewName) { }
    }
    public static class Constants
    {
        public const string ViewDataFieldKey = "ChameleonForms_Field";
        public const string ViewDataFormKey = "ChameleonForms_Form";
        public const string ViewDataMessageKey = "ChameleonForms_Message";
        public const string ViewDataNavigationKey = "ChameleonForms_Navigation";
        public const string ViewDataSectionKey = "ChameleonForms_Section";
    }
    public class Form<TModel> : ChameleonForms.IForm, ChameleonForms.IForm<TModel>, System.IDisposable
    {
        public Form(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper, ChameleonForms.Templates.IFormTemplate template, string action, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, ChameleonForms.HtmlAttributes htmlAttributes, ChameleonForms.Enums.EncType? enctype, bool? outputAntiforgeryToken) { }
        public Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> HtmlHelper { get; }
        public ChameleonForms.Templates.IFormTemplate Template { get; }
        public ChameleonForms.IForm<TModel> CreatePartialForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> partialViewHelper) { }
        public ChameleonForms.IForm<TPartialModel> CreatePartialForm<TPartialModel>(System.Linq.Expressions.LambdaExpression partialModelExpression, Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TPartialModel> partialViewHelper) { }
        public void Dispose() { }
        public virtual ChameleonForms.FieldGenerators.IFieldGenerator GetFieldGenerator<T>(System.Linq.Expressions.Expression<System.Func<TModel, T>> property) { }
        public virtual void Write(Microsoft.AspNetCore.Html.IHtmlContent htmlContent) { }
    }
    public static class HtmlHelperExtensions
    {
        public static ChameleonForms.Utils.DisposableHtmlHelper<TModel> For<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, TModel model = default, string htmlFieldPrefix = null) { }
        public static ChameleonForms.Utils.DisposableHtmlHelper<TChildModel> For<TParentModel, TChildModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TParentModel> helper, System.Linq.Expressions.Expression<System.Func<TParentModel, TChildModel>> propertyFor, bool bindFieldsToParent) { }
        public static ChameleonForms.IForm<TModel> GetChameleonForm<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper) { }
        public static ChameleonForms.Component.Field<TModel> GetChameleonFormsField<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper) { }
        public static ChameleonForms.Component.Message<TModel> GetChameleonFormsMessage<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper) { }
        public static ChameleonForms.Component.Navigation<TModel> GetChameleonFormsNavigation<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper) { }
        public static ChameleonForms.Component.ISection<TModel> GetChameleonFormsSection<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> helper) { }
        public static ChameleonForms.Templates.IFormTemplate GetDefaultFormTemplate(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) { }
        public static string GetFieldName<TModel, TResult>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> htmlHelper, System.Linq.Expressions.Expression<System.Func<TModel, TResult>> field) { }
        public static string GetFullHtmlFieldName<TModel, TResult>(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> htmlHelper, System.Linq.Expressions.Expression<System.Func<TModel, TResult>> field) { }
        public static bool IsInChameleonForm(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper) { }
        public static bool IsInChameleonFormsField(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper) { }
        public static bool IsInChameleonFormsMessage(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper) { }
        public static bool IsInChameleonFormsNavigation(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper) { }
        public static bool IsInChameleonFormsSection(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper) { }
    }
    public class HumanizedLabelsDisplayMetadataProvider : Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider
    {
        public HumanizedLabelsDisplayMetadataProvider(Humanizer.IStringTransformer to = null) { }
        public void CreateDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext context) { }
    }
    public interface IForm
    {
        ChameleonForms.IForm<TPartialModel> CreatePartialForm<TPartialModel>(System.Linq.Expressions.LambdaExpression partialModelExpression, Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TPartialModel> partialViewHelper);
    }
    public interface IForm<TModel> : ChameleonForms.IForm, System.IDisposable
    {
        Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> HtmlHelper { get; }
        ChameleonForms.Templates.IFormTemplate Template { get; }
        ChameleonForms.IForm<TModel> CreatePartialForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> partialViewHelper);
        ChameleonForms.FieldGenerators.IFieldGenerator GetFieldGenerator<T>(System.Linq.Expressions.Expression<System.Func<TModel, T>> property);
        void Write(Microsoft.AspNetCore.Html.IHtmlContent htmlContent);
    }
    public static class ServiceCollectionExtensions
    {
        public static void AddChameleonForms(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<ChameleonForms.Config.ChameleonFormsConfigBuilder<ChameleonForms.Templates.Default.DefaultFormTemplate>, ChameleonForms.Config.ChameleonFormsConfigBuilder<ChameleonForms.Templates.Default.DefaultFormTemplate>> configModifier = null) { }
        public static void AddChameleonForms<TFormTemplate>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> configBuilder)
            where TFormTemplate :  class, ChameleonForms.Templates.IFormTemplate { }
        public static void AddChameleonForms<TFormTemplate>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate>, ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate>> configModifier = null)
            where TFormTemplate :  class, ChameleonForms.Templates.IFormTemplate { }
    }
}
namespace ChameleonForms.Component
{
    public static class Field
    {
        public static ChameleonForms.Component.Config.FieldConfiguration Configure() { }
    }
    public static class FieldExtensions
    {
        public static ChameleonForms.Component.Field<TModel> BeginFieldFor<TModel, T>(this ChameleonForms.Component.ISection<TModel> section, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration FieldElementFor<TModel, T>(this ChameleonForms.IForm<TModel> form, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration FieldFor<TModel, T>(this ChameleonForms.Component.Field<TModel> field, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration FieldFor<TModel, T>(this ChameleonForms.Component.ISection<TModel> section, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration LabelFor<TModel, T>(this ChameleonForms.IForm<TModel> form, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
        public static ChameleonForms.Component.Config.IFieldConfiguration ValidationMessageFor<TModel, T>(this ChameleonForms.IForm<TModel> form, System.Linq.Expressions.Expression<System.Func<TModel, T>> property, ChameleonForms.Component.Config.IFieldConfiguration config = null) { }
    }
    public class Field<TModel> : ChameleonForms.Component.FormComponent<TModel>
    {
        public Field(ChameleonForms.IForm<TModel> form, bool isParent, ChameleonForms.FieldGenerators.IFieldGenerator fieldGenerator, ChameleonForms.Component.Config.IFieldConfiguration config) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Begin() { }
        public override void Dispose() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent End() { }
    }
    public abstract class FormComponent<TModel> : ChameleonForms.Component.IFormComponent<TModel>, Microsoft.AspNetCore.Html.IHtmlContent, System.IDisposable
    {
        protected readonly bool IsSelfClosing;
        protected FormComponent(ChameleonForms.IForm<TModel> form, bool isSelfClosing) { }
        public ChameleonForms.IForm<TModel> Form { get; }
        public abstract Microsoft.AspNetCore.Html.IHtmlContent Begin();
        public virtual void Dispose() { }
        public abstract Microsoft.AspNetCore.Html.IHtmlContent End();
        public void Initialise() { }
        public void WriteTo(System.IO.TextWriter writer, System.Text.Encodings.Web.HtmlEncoder encoder) { }
    }
    public interface IFormComponent<TModel>
    {
        ChameleonForms.IForm<TModel> Form { get; }
    }
    public interface ISection
    {
        ChameleonForms.Component.ISection<TPartialModel> CreatePartialSection<TPartialModel>(ChameleonForms.IForm<TPartialModel> partialModelForm);
        ChameleonForms.Component.Config.IFieldConfiguration Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml = null, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata = null, bool isValid = true, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration = null);
    }
    public interface ISection<TModel> : ChameleonForms.Component.IFormComponent<TModel>, System.IDisposable
    {
        ChameleonForms.Component.ISection<TModel> CreatePartialSection(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> partialHelper);
        ChameleonForms.Component.ISection<TPartialModel> CreatePartialSection<TPartialModel>(ChameleonForms.IForm<TPartialModel> partialModelForm);
        ChameleonForms.Component.Config.IFieldConfiguration Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml = null, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata = null, bool isValid = true, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration = null);
    }
    public static class MessageExtensions
    {
        public static ChameleonForms.Component.Message<TModel> BeginMessage<TModel>(this ChameleonForms.IForm<TModel> form, ChameleonForms.Enums.MessageType messageType, Microsoft.AspNetCore.Html.IHtmlContent heading) { }
        public static ChameleonForms.Component.Message<TModel> BeginMessage<TModel>(this ChameleonForms.IForm<TModel> form, ChameleonForms.Enums.MessageType messageType, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> heading) { }
        public static ChameleonForms.Component.Message<TModel> BeginMessage<TModel>(this ChameleonForms.IForm<TModel> form, ChameleonForms.Enums.MessageType messageType, string heading = null) { }
    }
    public class Message<TModel> : ChameleonForms.Component.FormComponent<TModel>
    {
        public Message(ChameleonForms.IForm<TModel> form, ChameleonForms.Enums.MessageType messageType, Microsoft.AspNetCore.Html.IHtmlContent heading) { }
        public Message(ChameleonForms.IForm<TModel> form, ChameleonForms.Enums.MessageType messageType, string heading) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Begin() { }
        public override void Dispose() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent End() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent Paragraph(Microsoft.AspNetCore.Html.IHtmlContent paragraph) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent Paragraph(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> paragraph) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent Paragraph(string paragraph) { }
    }
    public static class NavigationExtensions
    {
        public static ChameleonForms.Component.Navigation<TModel> BeginNavigation<TModel>(this ChameleonForms.IForm<TModel> form) { }
    }
    public class Navigation<TModel> : ChameleonForms.Component.FormComponent<TModel>
    {
        public Navigation(ChameleonForms.IForm<TModel> form) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Begin() { }
        public ChameleonForms.Component.ButtonHtmlAttributes Button(Microsoft.AspNetCore.Html.IHtmlContent content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Button(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Button(string text) { }
        public override void Dispose() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent End() { }
        public ChameleonForms.Component.ButtonHtmlAttributes Reset(Microsoft.AspNetCore.Html.IHtmlContent content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Reset(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Reset(string text) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Submit(Microsoft.AspNetCore.Html.IHtmlContent content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Submit(System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> content) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Submit(string text) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Submit(string name, string value, Microsoft.AspNetCore.Html.IHtmlContent content = null) { }
        public ChameleonForms.Component.ButtonHtmlAttributes Submit(string name, string value, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> content) { }
    }
    public static class SectionExtensions
    {
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.Component.ISection<TModel> section, Microsoft.AspNetCore.Html.IHtmlContent heading, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.Component.ISection<TModel> section, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> heading, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> leadingHtml, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.Component.ISection<TModel> section, string heading, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> leadingHtml, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.Component.ISection<TModel> section, string heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.IForm<TModel> form, Microsoft.AspNetCore.Html.IHtmlContent heading, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.IForm<TModel> form, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> heading, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> leadingHtml, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.IForm<TModel> form, string heading, System.Func<dynamic, Microsoft.AspNetCore.Html.IHtmlContent> leadingHtml, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static ChameleonForms.Component.Section<TModel> BeginSection<TModel>(this ChameleonForms.IForm<TModel> form, string heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public static System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialForAsync<TModel, TPartialModel>(this ChameleonForms.Component.ISection<TModel> section, System.Linq.Expressions.Expression<System.Func<TModel, TPartialModel>> partialModelProperty, string partialViewName) { }
    }
    public class Section<TModel> : ChameleonForms.Component.FormComponent<TModel>, ChameleonForms.Component.IFormComponent<TModel>, ChameleonForms.Component.ISection, ChameleonForms.Component.ISection<TModel>, System.IDisposable
    {
        public Section(ChameleonForms.IForm<TModel> form, Microsoft.AspNetCore.Html.IHtmlContent heading, bool nested, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Begin() { }
        public ChameleonForms.Component.ISection<TModel> CreatePartialSection(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> partialHelper) { }
        public ChameleonForms.Component.ISection<TPartialModel> CreatePartialSection<TPartialModel>(ChameleonForms.IForm<TPartialModel> partialModelForm) { }
        public override void Dispose() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent End() { }
        public ChameleonForms.Component.Config.IFieldConfiguration Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml = null, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata = null, bool isValid = true, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration = null) { }
    }
}
namespace ChameleonForms.Config
{
    public class ChameleonFormsConfigBuilder<TFormTemplate>
        where TFormTemplate : ChameleonForms.Templates.IFormTemplate
    {
        public ChameleonFormsConfigBuilder() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithHumanizedLabelTransformer(Humanizer.IStringTransformer transformer) { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeBinding() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeClientModelValidation() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutEnumListBinding() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutFlagsEnumBinding() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutHumanizedLabels() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutIntegralClientModelValidation() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutTemplateTypeRegistration() { }
        public ChameleonForms.Config.ChameleonFormsConfigBuilder<TFormTemplate> WithoutUriBinding() { }
    }
}
namespace ChameleonForms.FieldGenerators
{
    public class DefaultFieldGenerator<TModel, T> : ChameleonForms.FieldGenerators.IFieldGenerator, ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T>
    {
        public DefaultFieldGenerator(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> htmlHelper, System.Linq.Expressions.Expression<System.Func<TModel, T>> fieldProperty, ChameleonForms.Templates.IFormTemplate template) { }
        public System.Linq.Expressions.Expression<System.Func<TModel, T>> FieldProperty { get; }
        public Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> HtmlHelper { get; }
        public Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata Metadata { get; }
        public ChameleonForms.Templates.IFormTemplate Template { get; }
        public System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes() { }
        public string GetFieldDisplayName() { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetFieldHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public string GetFieldId() { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetLabelHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetLabelHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public TModel GetModel() { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetValidationHtml(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
        public Microsoft.AspNetCore.Html.IHtmlContent GetValidationHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public T GetValue() { }
        public ChameleonForms.Component.Config.IReadonlyFieldConfiguration PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration, ChameleonForms.Component.FieldParent fieldParent) { }
    }
    public static class FieldGeneratorExtensions
    {
        public static readonly System.Collections.Generic.HashSet<System.Type> FloatingTypes;
        public static readonly System.Collections.Generic.HashSet<System.Type> IntTypes;
        public static readonly System.Collections.Generic.HashSet<System.Type> NumericTypes;
        public static System.Collections.Generic.IEnumerable<object> GetEnumerableValues<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static System.Type GetUnderlyingType<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool HasEnumerableValues<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool HasMultipleEnumValues<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool HasMultipleValues<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool IsFloatingNumber<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool IsIntegralNumber<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool IsNumeric<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public static bool IsSelected<TModel, T>(this ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator, object value) { }
    }
}
namespace ChameleonForms.FieldGenerators.Handlers
{
    public class BooleanHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public BooleanHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public class DateTimeHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public DateTimeHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public class DefaultHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public DefaultHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
    }
    public class EnumListHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public EnumListHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public abstract class FieldGeneratorHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler<TModel, T>
    {
        protected readonly ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> FieldGenerator;
        protected FieldGeneratorHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        protected void AdjustHtmlForModelState(ChameleonForms.HtmlAttributes attrs) { }
        public abstract bool CanHandle();
        public abstract Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        public abstract ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration);
        protected string GetFieldName() { }
        protected Microsoft.AspNetCore.Html.IHtmlContent GetInputHtml(ChameleonForms.Enums.TextInputType inputType, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        protected Microsoft.AspNetCore.Html.IHtmlContent GetSelectListHtml(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> selectList, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public virtual void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public class FileHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public FileHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
    }
    public class ListHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public ListHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public class ListPropertyNullException : System.Exception
    {
        public ListPropertyNullException(string listPropertyName, string propertyName) { }
    }
    public class ModelNullException : System.Exception
    {
        public ModelNullException(string propertyName) { }
    }
    public class NumberHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public NumberHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
    public class PasswordHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public PasswordHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
    }
    public class TextAreaHandler<TModel, T> : ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>
    {
        public TextAreaHandler(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator) { }
        public override bool CanHandle() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override ChameleonForms.Enums.FieldDisplayType GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration) { }
        public override void PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration) { }
    }
}
namespace ChameleonForms.ModelBinders
{
    public class DateTimeModelBinder : Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    {
        public DateTimeModelBinder() { }
        public System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) { }
    }
    public class EnumListModelBinder<T> : Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<T>
    {
        public EnumListModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder elementBinder, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, bool allowValidatingTopLevelNodes, Microsoft.AspNetCore.Mvc.MvcOptions mvcOptions) { }
        public override System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) { }
    }
    public class FlagsEnumModelBinder : Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    {
        public FlagsEnumModelBinder() { }
        public System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) { }
    }
    public class UriModelBinder : Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    {
        public UriModelBinder() { }
        public System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) { }
    }
}
namespace ChameleonForms.TagHelpers
{
    public class ChameleonFormTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public ChameleonFormTagHelper() { }
        public string Action { get; set; }
        [Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeName("attrs", DictionaryAttributePrefix="attr-")]
        public System.Collections.Generic.IDictionary<string, string> Attrs { get; set; }
        public ChameleonForms.Enums.EncType Enctype { get; set; }
        public ChameleonForms.TagHelpers.ChameleonFormTagHelper.FormMethod Method { get; set; }
        public bool? OutputAntiforgeryToken { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
        public enum FormMethod
        {
            Post = 0,
            Get = 1,
        }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-element")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-label")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-validation")]
    public class FieldConfigurationBaseTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public FieldConfigurationBaseTagHelper() { }
        public System.Func<ChameleonForms.Component.Config.IFieldConfiguration, ChameleonForms.Component.Config.IFieldConfiguration> FluentConfig { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field")]
    public class FieldConfigurationTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public FieldConfigurationTagHelper() { }
        public string AddContainerClass { get; set; }
        public string Append { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> AppendHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent AppendHtmlContent { get; set; }
        public string Hint { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> HintHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent HintHtmlContent { get; set; }
        public string HintId { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> OverrideFieldHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent OverrideFieldHtmlContent { get; set; }
        public string Prepend { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> PrependHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent PrependHtmlContent { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-element")]
    public class FieldElementConfigurationTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public FieldElementConfigurationTagHelper() { }
        public string AddClass { get; set; }
        public ChameleonForms.TagHelpers.RenderAs As { get; set; }
        [Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeName("attrs", DictionaryAttributePrefix="attr-")]
        public System.Collections.Generic.IDictionary<string, string> Attrs { get; set; }
        public int? Cols { get; set; }
        public bool? Disabled { get; set; }
        public System.Enum[] Exclude { get; set; }
        public string FalseLabel { get; set; }
        public string FormatString { get; set; }
        public bool HideEmptyItem { get; set; }
        public string Id { get; set; }
        public string InlineLabel { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> InlineLabelHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent InlineLabelHtmlContent { get; set; }
        public bool? InlineLabelWrapsElement { get; set; }
        public string Max { get; set; }
        public string Min { get; set; }
        public string NoneLabel { get; set; }
        public string Placeholder { get; set; }
        public bool? Readonly { get; set; }
        public bool? Required { get; set; }
        public int? Rows { get; set; }
        public decimal? Step { get; set; }
        public string TrueLabel { get; set; }
        public bool WithoutInlineLabel { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class FieldElementTagHelper : ChameleonForms.TagHelpers.ModelPropertyTagHelper
    {
        public FieldElementTagHelper() { }
        public override System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-label")]
    public class FieldLabelConfigurationTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public FieldLabelConfigurationTagHelper() { }
        public string AddLabelClass { get; set; }
        public string Label { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> LabelHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LabelHtmlContent { get; set; }
        public bool WithoutLabelElement { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class FieldLabelTagHelper : ChameleonForms.TagHelpers.ModelPropertyTagHelper
    {
        public FieldLabelTagHelper() { }
        public override System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty) { }
    }
    public class FieldTagHelper : ChameleonForms.TagHelpers.ModelPropertyTagHelper
    {
        public FieldTagHelper() { }
        public override System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field-validation")]
    public class FieldValidationConfigurationTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public FieldValidationConfigurationTagHelper() { }
        public string AddValidationClass { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class FieldValidationTagHelper : ChameleonForms.TagHelpers.ModelPropertyTagHelper
    {
        public FieldValidationTagHelper() { }
        public override System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("form-button")]
    public class FormButtonTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public FormButtonTagHelper() { }
        public System.Func<ChameleonForms.Component.ButtonHtmlAttributes, ChameleonForms.Component.ButtonHtmlAttributes> FluentAttrs { get; set; }
        public string Label { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class FormMessageTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public FormMessageTagHelper() { }
        public string Heading { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> HeadingHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent HeadingHtmlContent { get; set; }
        public ChameleonForms.Enums.MessageType Type { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class FormNavigationTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public FormNavigationTagHelper() { }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("form-partial", TagStructure=Microsoft.AspNetCore.Razor.TagHelpers.TagStructure.WithoutEndTag)]
    public class FormPartialTagHelper : ChameleonForms.TagHelpers.ModelPropertyTagHelper
    {
        public FormPartialTagHelper() { }
        public string Name { get; set; }
        public override System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty) { }
    }
    public class FormSectionTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public FormSectionTagHelper() { }
        public string Heading { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> HeadingHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent HeadingHtmlContent { get; set; }
        [System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                true,
                false})]
        public System.Func<object, Microsoft.AspNetCore.Html.IHtmlContent> LeadingHtml { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LeadingHtmlContent { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("form-button")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("form-section")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("reset-button")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("submit-button")]
    public class HtmlAttributesTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public HtmlAttributesTagHelper() { }
        public string AddClass { get; set; }
        [Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeName("attrs", DictionaryAttributePrefix="attr-")]
        public System.Collections.Generic.IDictionary<string, string> Attrs { get; set; }
        public bool? Disabled { get; set; }
        public System.Func<ChameleonForms.HtmlAttributes, ChameleonForms.HtmlAttributes> FluentConfig { get; set; }
        public string Id { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class ManualFieldContext
    {
        public ManualFieldContext() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Element { get; set; }
        public ChameleonForms.Component.Config.IFieldConfiguration FieldConfiguration { get; set; }
        public bool? IsValid { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent Label { get; set; }
        public Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata ModelMetadata { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent Validation { get; set; }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("manual-element", ParentTag="field")]
    public class ManualFieldElementTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public ManualFieldElementTagHelper() { }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("manual-label", ParentTag="field")]
    public class ManualFieldLabelTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public ManualFieldLabelTagHelper() { }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("field", Attributes="manual")]
    public class ManualFieldTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public ManualFieldTagHelper() { }
        public bool? IsValid { get; set; }
        public Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata ModelMetadata { get; set; }
        public override int Order { get; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("manual-validation", ParentTag="field")]
    public class ManualFieldValidationTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public ManualFieldValidationTagHelper() { }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class MessageParagraphTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public MessageParagraphTagHelper() { }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public abstract class ModelAwareTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        protected ModelAwareTagHelper() { }
        public override int Order { get; }
        [Microsoft.AspNetCore.Mvc.ViewFeatures.ViewContext]
        [Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNotBound]
        public Microsoft.AspNetCore.Mvc.Rendering.ViewContext ViewContext { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
        public abstract System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output);
    }
    public abstract class ModelPropertyTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        protected ModelPropertyTagHelper() { }
        public Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression For { get; set; }
        public override int Order { get; }
        [Microsoft.AspNetCore.Mvc.ViewFeatures.ViewContext]
        [Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNotBound]
        public Microsoft.AspNetCore.Mvc.Rendering.ViewContext ViewContext { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
        public abstract System.Threading.Tasks.Task ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>> modelProperty);
    }
    public enum RenderAs
    {
        Default = 0,
        RadioList = 1,
        CheckboxList = 2,
        Dropdown = 3,
    }
    public class ResetButtonTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public ResetButtonTagHelper() { }
        public System.Func<ChameleonForms.Component.ButtonHtmlAttributes, ChameleonForms.Component.ButtonHtmlAttributes> FluentAttrs { get; set; }
        public string Label { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public class SubmitButtonTagHelper : ChameleonForms.TagHelpers.ModelAwareTagHelper
    {
        public SubmitButtonTagHelper() { }
        public System.Func<ChameleonForms.Component.ButtonHtmlAttributes, ChameleonForms.Component.ButtonHtmlAttributes> FluentAttrs { get; set; }
        public string Label { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
        public override System.Threading.Tasks.Task ProcessWhileAwareOfModelTypeAsync<TModel>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
    public static class TagHelperContextExtensions
    {
        public const string FieldConfigurationItemsKey = "ChameleonForms:FieldConfiguration";
        public static ChameleonForms.Component.Config.IFieldConfiguration GetFieldConfiguration(this Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context) { }
        public static ChameleonForms.HtmlAttributes GetHtmlAttributes(this Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context) { }
    }
}
namespace ChameleonForms.Templates.TwitterBootstrap3
{
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("form-button")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("reset-button")]
    [Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElement("submit-button")]
    public class TwitterBootstrap3SubmitButtonTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    {
        public TwitterBootstrap3SubmitButtonTagHelper() { }
        public ChameleonForms.Templates.TwitterBootstrap3.EmphasisStyle EmphasisStyle { get; set; }
        public string Icon { get; set; }
        public ChameleonForms.Templates.TwitterBootstrap3.ButtonSize Size { get; set; }
        public override System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output) { }
    }
}
namespace ChameleonForms.Utils
{
    public class DisposableHtmlHelper<TModel> : Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>, System.IDisposable
    {
        public DisposableHtmlHelper(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator htmlGenerator, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine viewEngine, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider metadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope bufferScope, System.Text.Encodings.Web.HtmlEncoder htmlEncoder, System.Text.Encodings.Web.UrlEncoder urlEncoder, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider modelExpressionProvider, Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext) { }
        public void Dispose() { }
    }
    public static class ExpressionBuilder
    {
        public static System.Linq.Expressions.Expression<System.Func<T, TResult>> CreateAccessor<T, TResult>(string propertyNameOrPath) { }
    }
    public static class ViewContextExtensions
    {
        public static Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> GetHtmlHelper<TModel>(this Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext) { }
    }
}
namespace ChameleonForms.Validators
{
    public class DateTimeClientModelValidatorProvider : Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider
    {
        public DateTimeClientModelValidatorProvider() { }
        public void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext context) { }
    }
    public class IntegralNumericClientModelValidatorProvider : Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider
    {
        public IntegralNumericClientModelValidatorProvider() { }
        public void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext context) { }
    }
}
ASSEMBLY ChameleonForms.Templates
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.1", FrameworkDisplayName="")]
namespace ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params
{
    public class BeginSectionParams
    {
        public BeginSectionParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Heading { get; set; }
        public ChameleonForms.HtmlAttributes HtmlAttributes { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LeadingHtml { get; set; }
    }
    public class FieldConfigurationParams
    {
        public FieldConfigurationParams() { }
        public ChameleonForms.Component.Config.IReadonlyFieldConfiguration FieldConfiguration { get; set; }
    }
    public class FieldParams : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldConfigurationParams
    {
        public FieldParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent ElementHtml { get; set; }
        public Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata FieldMetadata { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LabelHtml { get; set; }
        public ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldRenderMode RenderMode { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent RequiredDesignator { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent ValidationHtml { get; set; }
    }
    public enum FieldRenderMode
    {
        Field = 0,
        BeginField = 1,
    }
    public class ListParams
    {
        public ListParams() { }
        public System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> Items { get; set; }
    }
    public class MessageParagraphParams
    {
        public MessageParagraphParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Paragraph { get; set; }
    }
    public class MessageParams
    {
        public MessageParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Heading { get; set; }
        public ChameleonForms.Enums.MessageType MessageType { get; set; }
    }
}
namespace ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params
{
    public class BeginSectionParams
    {
        public BeginSectionParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Heading { get; set; }
        public ChameleonForms.HtmlAttributes HtmlAttributes { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LeadingHtml { get; set; }
    }
    public class FieldConfigurationParams
    {
        public FieldConfigurationParams() { }
        public ChameleonForms.Component.Config.IReadonlyFieldConfiguration FieldConfiguration { get; set; }
        public bool IsInputGroup { get; set; }
    }
    public class FieldParams : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldConfigurationParams
    {
        public FieldParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent ElementHtml { get; set; }
        public Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata FieldMetadata { get; set; }
        public bool IsValid { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent LabelHtml { get; set; }
        public ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldRenderMode RenderMode { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent RequiredDesignator { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent ValidationHtml { get; set; }
    }
    public enum FieldRenderMode
    {
        Field = 0,
        BeginField = 1,
    }
    public class LabelParams
    {
        public LabelParams() { }
        public bool DisplayDesignator { get; set; }
        public bool HasLabel { get; set; }
        public bool IsCheckboxControl { get; set; }
        public bool IsRequired { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent Label { get; set; }
        public Microsoft.AspNetCore.Html.IHtmlContent RequiredDesignator { get; set; }
    }
    public class ListParams
    {
        public ListParams() { }
        public bool IsCheckbox { get; set; }
        public System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> Items { get; set; }
    }
    public class MessageParagraphParams
    {
        public MessageParagraphParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Paragraph { get; set; }
    }
    public class MessageParams
    {
        public MessageParams() { }
        public Microsoft.AspNetCore.Html.IHtmlContent Heading { get; set; }
        public ChameleonForms.Templates.TwitterBootstrap3.EmphasisStyle MessageType { get; set; }
    }
}
namespace ChameleonForms.Templates.Default
{
    public class DefaultFormTemplate : ChameleonForms.Templates.IFormTemplate
    {
        public DefaultFormTemplate() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginField(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginForm(string action, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, ChameleonForms.HtmlAttributes htmlAttributes, ChameleonForms.Enums.EncType? enctype) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginMessage(ChameleonForms.Enums.MessageType messageType, Microsoft.AspNetCore.Html.IHtmlContent heading) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginNavigation() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginNestedSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent BeginSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent Button(Microsoft.AspNetCore.Html.IHtmlContent content, string type, string id, string value, ChameleonForms.HtmlAttributes htmlAttributes) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndField() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndForm() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndMessage() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndNavigation() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndNestedSection() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent EndSection() { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent MessageParagraph(Microsoft.AspNetCore.Html.IHtmlContent paragraph) { }
        public virtual void PrepareFieldConfiguration<TModel, T>(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator, ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration, ChameleonForms.Component.FieldParent fieldParent) { }
        public virtual Microsoft.AspNetCore.Html.IHtmlContent RadioOrCheckboxList(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> list, bool isCheckbox) { }
        protected virtual Microsoft.AspNetCore.Html.IHtmlContent RequiredDesignator(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
    }
}
namespace ChameleonForms.Templates.TwitterBootstrap3
{
    public static class ButtonHtmlAttributesExtensions
    {
        public static ChameleonForms.Component.ButtonHtmlAttributes WithIcon(this ChameleonForms.Component.ButtonHtmlAttributes attrs, string icon) { }
        public static ChameleonForms.Component.ButtonHtmlAttributes WithSize(this ChameleonForms.Component.ButtonHtmlAttributes attrs, ChameleonForms.Templates.TwitterBootstrap3.ButtonSize size) { }
        public static ChameleonForms.Component.ButtonHtmlAttributes WithStyle(this ChameleonForms.Component.ButtonHtmlAttributes attrs, ChameleonForms.Templates.TwitterBootstrap3.EmphasisStyle style) { }
    }
    public enum ButtonSize
    {
        [System.ComponentModel.Description("")]
        NoneSpecified = 0,
        [System.ComponentModel.Description("xs")]
        ExtraSmall = 1,
        [System.ComponentModel.Description("sm")]
        Small = 2,
        Default = 3,
        [System.ComponentModel.Description("lg")]
        Large = 4,
    }
    public enum EmphasisStyle
    {
        Default = 0,
        Primary = 1,
        Success = 2,
        Info = 3,
        Warning = 4,
        Danger = 5,
    }
    public static class FieldConfigurationExtensions
    {
        public static ChameleonForms.Component.Config.IFieldConfiguration AsInputGroup(this ChameleonForms.Component.Config.IFieldConfiguration fc) { }
    }
    public class TwitterBootstrap3FormTemplate : ChameleonForms.Templates.Default.DefaultFormTemplate
    {
        public const string IconAttrKey = "data-chameleonforms-twbs-icon";
        public TwitterBootstrap3FormTemplate() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginField(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginForm(string action, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, ChameleonForms.HtmlAttributes htmlAttributes, ChameleonForms.Enums.EncType? enctype) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginMessage(ChameleonForms.Enums.MessageType messageType, Microsoft.AspNetCore.Html.IHtmlContent heading) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginNavigation() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginNestedSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent BeginSection(Microsoft.AspNetCore.Html.IHtmlContent heading = null, Microsoft.AspNetCore.Html.IHtmlContent leadingHtml = null, ChameleonForms.HtmlAttributes htmlAttributes = null) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Button(Microsoft.AspNetCore.Html.IHtmlContent content, string type, string id, string value, ChameleonForms.HtmlAttributes htmlAttributes) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndField() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndForm() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndMessage() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndNavigation() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndNestedSection() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent EndSection() { }
        public override Microsoft.AspNetCore.Html.IHtmlContent Field(Microsoft.AspNetCore.Html.IHtmlContent labelHtml, Microsoft.AspNetCore.Html.IHtmlContent elementHtml, Microsoft.AspNetCore.Html.IHtmlContent validationHtml, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
        public override void PrepareFieldConfiguration<TModel, T>(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T> fieldGenerator, ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, ChameleonForms.Component.Config.IFieldConfiguration fieldConfiguration, ChameleonForms.Component.FieldParent fieldParent) { }
        public override Microsoft.AspNetCore.Html.IHtmlContent RadioOrCheckboxList(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Html.IHtmlContent> list, bool isCheckbox) { }
        protected override Microsoft.AspNetCore.Html.IHtmlContent RequiredDesignator(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata, ChameleonForms.Component.Config.IReadonlyFieldConfiguration fieldConfiguration, bool isValid) { }
    }
}
