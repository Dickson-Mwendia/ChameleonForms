{
  "apidocs/ChameleonForms.Attributes.ExistsInAttribute.html": {
    "href": "apidocs/ChameleonForms.Attributes.ExistsInAttribute.html",
    "title": "Class ExistsInAttribute | ChameleonForms",
    "keywords": "Class ExistsInAttribute Indicates that the attributed property value should exist within the list property referenced by the attribute. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute ExistsInAttribute Inherited Members System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Attributes Assembly : ChameleonForms.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)] public class ExistsInAttribute : ValidationAttribute, IModelMetadataAware Constructors | Improve this Doc View Source ExistsInAttribute(String, String, String) Instantiates an ExistsInAttribute . Declaration public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty) Parameters Type Name Description System.String listProperty The name of the property containing the list this property should reference. System.String valueProperty The name of the property of the list items to use for the value System.String nameProperty The name of the property of the list items to use for the name/label | Improve this Doc View Source ExistsInAttribute(String, String, String, Boolean) Instantiates an ExistsInAttribute . Declaration public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty, bool enableValidation) Parameters Type Name Description System.String listProperty The name of the property containing the list this property should reference. System.String valueProperty The name of the property of the list items to use for the value System.String nameProperty The name of the property of the list items to use for the name/label System.Boolean enableValidation Optional override for ExistsIn server-side validation configuration (if not specified, static configuration setting ExistsInAttribute.EnableValidation is used) Fields | Improve this Doc View Source EnableValidation Application-wide configuration for whether or not to enable ExistsIn validation. Declaration public static bool EnableValidation Field Value Type Description System.Boolean | Improve this Doc View Source ExistsKey Additional Values metadata key for whether this attribute has been applied to the property. Declaration public const string ExistsKey = \"ExistsInList\" Field Value Type Description System.String | Improve this Doc View Source NameKey Additional Values metadata key for the name of the name/label property for the list items. Declaration public const string NameKey = \"ExistsInNameProperty\" Field Value Type Description System.String | Improve this Doc View Source PropertyKey Additional Values metadata key for the name of the list property. Declaration public const string PropertyKey = \"ExistsInProperty\" Field Value Type Description System.String | Improve this Doc View Source ValueKey Additional Values metadata key for the name of the value property for the list items. Declaration public const string ValueKey = \"ExistsInValueProperty\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDisplayMetadata(DisplayMetadataProviderContext) Declaration public void GetDisplayMetadata(DisplayMetadataProviderContext metadata) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext metadata | Improve this Doc View Source IsValid(Object, ValidationContext) Called when validation is performed using the attribute. Declaration protected override ValidationResult IsValid(object value, ValidationContext context) Parameters Type Name Description System.Object value The object to validate System.ComponentModel.DataAnnotations.ValidationContext context The context within which validation occurs Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult The result of validation Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) | Improve this Doc View Source ValidateListConfiguration(Object, String, String, String, String) Given a model, ensures the ExistsIn attribute has a valid configuration for generating and validating a list. Declaration public static void ValidateListConfiguration(object model, string listProperty, string valueProperty, string nameProperty, string memberName) Parameters Type Name Description System.Object model The model being validated System.String listProperty The name of the property containing the list this property should reference. System.String valueProperty The name of the property of the list items to use for the value System.String nameProperty The name of the property of the list items to use for the name/label System.String memberName The name of the property that the ExistsIn attribute is applied do Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Attributes.html": {
    "href": "apidocs/ChameleonForms.Attributes.html",
    "title": "Namespace ChameleonForms.Attributes | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Attributes Classes ExistsInAttribute Indicates that the attributed property value should exist within the list property referenced by the attribute."
  },
  "apidocs/ChameleonForms.ChameleonFormExtensions.html": {
    "href": "apidocs/ChameleonForms.ChameleonFormExtensions.html",
    "title": "Class ChameleonFormExtensions | ChameleonForms",
    "keywords": "Class ChameleonFormExtensions Default extension methods for Form<TModel> . Inheritance System.Object ChameleonFormExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public static class ChameleonFormExtensions Methods | Improve this Doc View Source BeginChameleonForm<TModel>(IHtmlHelper<TModel>, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) Constructs a Form<TModel> object with the default ChameleonForms template renderer. Declaration public static IForm<TModel> BeginChameleonForm<TModel>(this IHtmlHelper<TModel> helper, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = default(EncType? ), bool? outputAntiforgeryToken = default(bool? )) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The HTML Helper for the current view System.String action The action the form should submit to Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The HTTP method the form submission should use HtmlAttributes htmlAttributes Any HTML attributes the form should use System.Nullable < EncType > enctype The encoding type the form submission should use System.Nullable < System.Boolean > outputAntiforgeryToken Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET Returns Type Description IForm <TModel> A Form<TModel> object with an instance of the default form template renderer. Type Parameters Name Description TModel The view model type for the current view Examples @using (var f = Html.BeginChameleonForm(...)) { ... } | Improve this Doc View Source BeginChameleonFormFor<TOriginalModel, TNewModel>(IHtmlHelper<TOriginalModel>, TNewModel, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) Constructs a Form<TModel> object with the default ChameleonForms template renderer using the given model type and instance. Values will bind back to the model type specified as if that was the model all along. Declaration public static IForm<TNewModel> BeginChameleonFormFor<TOriginalModel, TNewModel>(this IHtmlHelper<TOriginalModel> helper, TNewModel model, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = default(EncType? ), bool? outputAntiforgeryToken = default(bool? )) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TOriginalModel> helper The HTML Helper for the current view TNewModel model The model to use for the form System.String action The action the form should submit to Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The HTTP method the form submission should use HtmlAttributes htmlAttributes Any HTML attributes the form should use System.Nullable < EncType > enctype The encoding type the form submission should use System.Nullable < System.Boolean > outputAntiforgeryToken Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET Returns Type Description IForm <TNewModel> A Form<TModel> object with an instance of the default form template renderer. Type Parameters Name Description TOriginalModel The model type of the view TNewModel The model type of the sub-property to construct the form for Remarks This can also be done using the For() HTML helper extension method and just a type: @using (var f = Html.For<AnotherModelType>().BeginChameleonForm(...)) { ... } Examples @using (var f = Html.BeginChameleonFormFor(new AnotherModelType(), ...)) { ... } @using (var f = Html.BeginChameleonFormFor(default(AnotherModelType), ...)) { ... } | Improve this Doc View Source BeginChameleonFormFor<TParentModel, TChildModel>(IHtmlHelper<TParentModel>, Expression<Func<TParentModel, TChildModel>>, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) Constructs a Form<TModel> object with the default ChameleonForms template renderer using a sub-property of the current model as the model. Values will bind back to the model type of the sub-property as if that was the model all along. Declaration public static IForm<TChildModel> BeginChameleonFormFor<TParentModel, TChildModel>(this IHtmlHelper<TParentModel> helper, Expression<Func<TParentModel, TChildModel>> formFor, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = default(EncType? ), bool? outputAntiforgeryToken = default(bool? )) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TParentModel> helper The HTML Helper for the current view System.Linq.Expressions.Expression < System.Func <TParentModel, TChildModel>> formFor A lambda expression identifying the sub-property to construct the form for System.String action The action the form should submit to Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The HTTP method the form submission should use HtmlAttributes htmlAttributes Any HTML attributes the form should use System.Nullable < EncType > enctype The encoding type the form submission should use System.Nullable < System.Boolean > outputAntiforgeryToken Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET Returns Type Description IForm <TChildModel> A Form<TModel> object with an instance of the default form template renderer. Type Parameters Name Description TParentModel The model type of the view TChildModel The model type of the sub-property to construct the form for Examples @using (var f = Html.BeginChameleonFormFor(m => m.Subproperty, ...)) { ... } | Improve this Doc View Source PartialForAsync<TModel, TPartialModel>(IForm<TModel>, Expression<Func<TModel, TPartialModel>>, String) Renders the given partial in the context of the given property. Use PartialFor(m => m, ...) pr Partial(...) to render a partial for the model itself rather than a child property. Declaration public static Task<IHtmlContent> PartialForAsync<TModel, TPartialModel>(this IForm<TModel> form, Expression<Func<TModel, TPartialModel>> partialModelProperty, string partialViewName) Parameters Type Name Description IForm <TModel> form The form System.Linq.Expressions.Expression < System.Func <TModel, TPartialModel>> partialModelProperty The property to use for the partial model System.String partialViewName The name of the partial view to render Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Html.IHtmlContent > The HTML for the rendered partial Type Parameters Name Description TModel The form model type TPartialModel The type of the model property to use for the partial model"
  },
  "apidocs/ChameleonForms.Component.ButtonHtmlAttributes.html": {
    "href": "apidocs/ChameleonForms.Component.ButtonHtmlAttributes.html",
    "title": "Class ButtonHtmlAttributes | ChameleonForms",
    "keywords": "Class ButtonHtmlAttributes HtmlAttributes class that is returned from button methods that allows for extension methods targetted at buttons. Inheritance System.Object HtmlAttributes LazyHtmlAttributes ButtonHtmlAttributes Implements Microsoft.AspNetCore.Html.IHtmlContent Inherited Members LazyHtmlAttributes.WriteTo(TextWriter, HtmlEncoder) HtmlAttributes.Attributes HtmlAttributes.AddClass(String) HtmlAttributes.Id(String) HtmlAttributes.Disabled(Boolean) HtmlAttributes.Readonly(Boolean) HtmlAttributes.Required(Boolean) HtmlAttributes.Has(String) HtmlAttributes.Attr(String, Object) HtmlAttributes.Attr(Func<Object, Object>) HtmlAttributes.Attrs(Func<Object, Object>[]) HtmlAttributes.Attrs(IDictionary<String, Object>) HtmlAttributes.Attrs(IDictionary<String, String>) HtmlAttributes.Attrs(Object) HtmlAttributes.ToDictionary() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.Core.dll Syntax public class ButtonHtmlAttributes : LazyHtmlAttributes, IHtmlContent Constructors | Improve this Doc View Source ButtonHtmlAttributes(Func<HtmlAttributes, IHtmlContent>) Construct a ButtonHtmlAttributes class. Declaration public ButtonHtmlAttributes(Func<HtmlAttributes, IHtmlContent> htmlGenerator) Parameters Type Name Description System.Func < HtmlAttributes , Microsoft.AspNetCore.Html.IHtmlContent > htmlGenerator The generator to use to generate the HTML when .ToHtmlString() is called Implements Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent) ButtonHtmlAttributesExtensions.WithIcon(ButtonHtmlAttributes, String) ButtonHtmlAttributesExtensions.WithStyle(ButtonHtmlAttributes, EmphasisStyle) ButtonHtmlAttributesExtensions.WithSize(ButtonHtmlAttributes, ButtonSize)"
  },
  "apidocs/ChameleonForms.Component.Config.FieldConfiguration.html": {
    "href": "apidocs/ChameleonForms.Component.Config.FieldConfiguration.html",
    "title": "Class FieldConfiguration | ChameleonForms",
    "keywords": "Class FieldConfiguration Holds configuration data for a form field. Inheritance System.Object FieldConfiguration Implements IFieldConfiguration Microsoft.AspNetCore.Html.IHtmlContent IReadonlyFieldConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component.Config Assembly : ChameleonForms.Core.dll Syntax public class FieldConfiguration : IFieldConfiguration, IHtmlContent, IReadonlyFieldConfiguration Constructors | Improve this Doc View Source FieldConfiguration() Constructs a field configuration. Declaration public FieldConfiguration() Properties | Improve this Doc View Source AppendedHtml A list of HTML to be appended to the form field in ltr order. Declaration public IEnumerable<IHtmlContent> AppendedHtml { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source Attributes Attributes to add to the form element's HTML. Declaration public HtmlAttributes Attributes { get; } Property Value Type Description HtmlAttributes | Improve this Doc View Source Bag A dynamic bag to allow for custom extensions using the field configuration. Declaration public dynamic Bag { get; } Property Value Type Description System.Object | Improve this Doc View Source DisplayType Returns the display type for the field. Declaration public FieldDisplayType DisplayType { get; } Property Value Type Description FieldDisplayType | Improve this Doc View Source EmptyItemHidden Whether or not the empty item is hidden. Declaration public bool EmptyItemHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ExcludedEnums Enum value(s) to exclude from the generated field. Declaration public Enum[] ExcludedEnums { get; } Property Value Type Description System.Enum [] | Improve this Doc View Source FalseString The label that represents false. Declaration public string FalseString { get; } Property Value Type Description System.String | Improve this Doc View Source FieldContainerClasses Any CSS class(es) to use for the field container element. Declaration public string FieldContainerClasses { get; } Property Value Type Description System.String | Improve this Doc View Source FieldHtml The HTML to be used as the field html. Declaration public IHtmlContent FieldHtml { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source FormatString The format string to use for the field. Declaration public string FormatString { get; } Property Value Type Description System.String | Improve this Doc View Source HasInlineLabel Whether or not to use an inline <label>. Declaration public bool HasInlineLabel { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasLabelElement Whether or not to use a <label>. Declaration public bool HasLabelElement { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Hint Get the hint to display with the field. Declaration public IHtmlContent Hint { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source HintId The ID to use for a field hint. Declaration public string HintId { get; } Property Value Type Description System.String | Improve this Doc View Source HtmlAttributes Attributes to add to the form element's HTML. Declaration public IDictionary<string, object> HtmlAttributes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > | Improve this Doc View Source InlineLabelText Gets any text that has been set for an inline label. Declaration public IHtmlContent InlineLabelText { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source LabelClasses Any CSS class(es) to use for the field label. Declaration public string LabelClasses { get; } Property Value Type Description System.String | Improve this Doc View Source LabelText Gets any text that has been set for the label. Declaration public IHtmlContent LabelText { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source NoneString The label that represents none. Declaration public string NoneString { get; } Property Value Type Description System.String | Improve this Doc View Source PrependedHtml A list of HTML to be prepended to the form field in ltr order. Declaration public IEnumerable<IHtmlContent> PrependedHtml { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source ShouldInlineLabelWrapElement Whether or not inline <label> should wrap their <input> element. Declaration public bool ShouldInlineLabelWrapElement { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TrueString The label that represents true. Declaration public string TrueString { get; } Property Value Type Description System.String | Improve this Doc View Source ValidationClasses Any CSS class(es) to use for the field validation message. Declaration public string ValidationClasses { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddClass(String) Adds a CSS class (or a number of CSS classes) to the attributes. Declaration public IFieldConfiguration AddClass(string class) Parameters Type Name Description System.String class The CSS class(es) to add Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddFieldContainerClass(String) Specify one or more CSS classes to use for the field container element. Declaration public IFieldConfiguration AddFieldContainerClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field container element Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddLabelClass(String) Specify one or more CSS classes to use for the field label. Declaration public IFieldConfiguration AddLabelClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddValidationClass(String) Specify one or more CSS classes to use for the field validation message. Declaration public IFieldConfiguration AddValidationClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field validation message Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(IHtmlContent) Appends the given HTML to the form field. Declaration public IFieldConfiguration Append(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML to append Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(Func<Object, IHtmlContent>) Appends the given HTML to the form field. Declaration public IFieldConfiguration Append(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML to append as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(String) Appends the given string to the form field. Declaration public IFieldConfiguration Append(string str) Parameters Type Name Description System.String str The string to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AsCheckboxList() Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Declaration public IFieldConfiguration AsCheckboxList() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining See Also AsRadioList () | Improve this Doc View Source AsDropDown() Renders the field as a drop-down control. Use for a list or boolean value. Declaration public IFieldConfiguration AsDropDown() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AsRadioList() Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Declaration public IFieldConfiguration AsRadioList() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining See Also AsCheckboxList () | Improve this Doc View Source Attr(Func<Object, Object>) Adds or updates a HTML attribute with using a lambda method to express the attribute. Declaration public IFieldConfiguration Attr(Func<object, object> attribute) Parameters Type Name Description System.Func < System.Object , System.Object > attribute A lambda expression representing the attribute to set and its value Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attr(String, Object) Adds or updates a HTML attribute with a given value. Declaration public IFieldConfiguration Attr(string key, object value) Parameters Type Name Description System.String key The name of the HTML attribute to add/update System.Object value The value of the HTML attribute to add/update Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, Object>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration public IFieldConfiguration Attrs(IDictionary<string, object> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > attributes A dictionary of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, String>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration public IFieldConfiguration Attrs(IDictionary<string, string> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > attributes A dictionary of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(Func<Object, Object>[]) Adds or updates a set of HTML attributes using lambda methods to express the attributes. Declaration public IFieldConfiguration Attrs(params Func<object, object>[] attributes) Parameters Type Name Description System.Func < System.Object , System.Object >[] attributes A list of lambas where the lambda variable name is the name of the attribute and the value is the value Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(Object) Adds or updates a set of HTML attributes using anonymous objects to express the attributes. Declaration public IFieldConfiguration Attrs(object attributes) Parameters Type Name Description System.Object attributes An anonymous object of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Cols(Int32) Sets the number of cols for a textarea to use. Declaration public IFieldConfiguration Cols(int numCols) Parameters Type Name Description System.Int32 numCols The number of cols for the textarea Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Disabled(Boolean) Sets the field to be disabled (value not submitted, can not click). Declaration public IFieldConfiguration Disabled(bool disabled = true) Parameters Type Name Description System.Boolean disabled Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Exclude(Enum[]) Excludes one or more Enum values from the generated field. Declaration public IFieldConfiguration Exclude(params Enum[] enumValues) Parameters Type Name Description System.Enum [] enumValues The value of Enum(s) to exclude from the generated field. Returns Type Description IFieldConfiguration | Improve this Doc View Source GetBagData<TData>(String) Returns data from the Bag stored in the given property or default(TData) if there is none present. Declaration public TData GetBagData<TData>(string propertyName) Parameters Type Name Description System.String propertyName The name of the property to retrieve the data for Returns Type Description TData The data from the Bag or default(TData) if there was no data against that property in the bag Type Parameters Name Description TData The type of the expected data to return | Improve this Doc View Source HideEmptyItem() Hide the empty item that would normally display for the field. Declaration public IFieldConfiguration HideEmptyItem() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Id(String) Override the default id for the field. Declaration public IFieldConfiguration Id(string id) Parameters Type Name Description System.String id The text to use for the id Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(IHtmlContent) Sets an inline label for a checkbox. Declaration public IFieldConfiguration InlineLabel(IHtmlContent labelHtml) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The html to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(Func<Object, IHtmlContent>) Sets an inline label for a checkbox. Declaration public IFieldConfiguration InlineLabel(Func<dynamic, IHtmlContent> labelHtml) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > labelHtml The html to use for the label as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(String) Sets an inline label for a checkbox. Declaration public IFieldConfiguration InlineLabel(string labelText) Parameters Type Name Description System.String labelText The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabelWrapsElement(Boolean) Specify that inline labels should wrap their input element. Important for bootstrap. Declaration public IFieldConfiguration InlineLabelWrapsElement(bool wrapElement = true) Parameters Type Name Description System.Boolean wrapElement True if the input element should be wrapped. Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(IHtmlContent) Override the default label for the field. Declaration public IFieldConfiguration Label(IHtmlContent labelHtml) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(Func<Object, IHtmlContent>) Override the default label for the field. Declaration public IFieldConfiguration Label(Func<dynamic, IHtmlContent> labelHtml) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > labelHtml The text to use for the label as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(String) Override the default label for the field. Declaration public IFieldConfiguration Label(string labelText) Parameters Type Name Description System.String labelText The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(Decimal) Sets the maximum value to accept for numeric text controls. Declaration public IFieldConfiguration Max(decimal max) Parameters Type Name Description System.Decimal max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(Int64) Sets the maximum value to accept for numeric text controls. Declaration public IFieldConfiguration Max(long max) Parameters Type Name Description System.Int64 max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(String) Sets the maximum value to accept for numeric text controls. Declaration public IFieldConfiguration Max(string max) Parameters Type Name Description System.String max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(Decimal) Sets the minimum value to accept for numeric text controls. Declaration public IFieldConfiguration Min(decimal min) Parameters Type Name Description System.Decimal min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(Int64) Sets the minimum value to accept for numeric text controls. Declaration public IFieldConfiguration Min(long min) Parameters Type Name Description System.Int64 min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(String) Sets the minimum value to accept for numeric text controls. Declaration public IFieldConfiguration Min(string min) Parameters Type Name Description System.String min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source OverrideFieldHtml(IHtmlContent) Override the HTML of the form field. This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration public IFieldConfiguration OverrideFieldHtml(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML for the field Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source OverrideFieldHtml(Func<Object, IHtmlContent>) Override the HTML of the form field. This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration public IFieldConfiguration OverrideFieldHtml(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML for the field as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Placeholder(String) Sets a hint to the user of what can be entered in the field. Declaration public IFieldConfiguration Placeholder(string placeholderText) Parameters Type Name Description System.String placeholderText The text to use for the placeholder Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(IHtmlContent) Prepends the given HTML to the form field. Declaration public IFieldConfiguration Prepend(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(Func<Object, IHtmlContent>) Prepends the given HTML to the form field. Declaration public IFieldConfiguration Prepend(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML to prepend as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(String) Prepends the given string to the form field. Declaration public IFieldConfiguration Prepend(string str) Parameters Type Name Description System.String str The string to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Readonly(Boolean) Sets the field to be readonly (value can not be modified). Declaration public IFieldConfiguration Readonly(bool readonly = true) Parameters Type Name Description System.Boolean readonly Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Required(Boolean) Sets the field to be required. Declaration public IFieldConfiguration Required(bool required = true) Parameters Type Name Description System.Boolean required Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Rows(Int32) Sets the number of rows for a textarea to use. Declaration public IFieldConfiguration Rows(int numRows) Parameters Type Name Description System.Int32 numRows The number of rows for the textarea Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source SetField(IHtmlContent) Sets the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration public void SetField(IHtmlContent field) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent field The field being configured | Improve this Doc View Source SetField(Func<IHtmlContent>) Sets a lambda expression to get the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration public void SetField(Func<IHtmlContent> field) Parameters Type Name Description System.Func < Microsoft.AspNetCore.Html.IHtmlContent > field A lambda returning the HTML to output | Improve this Doc View Source SetField(Func<Object, IHtmlContent>) Sets the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration public void SetField(Func<dynamic, IHtmlContent> field) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > field The field being configured as a templated razor delegate | Improve this Doc View Source Step(Decimal) Sets the stepping interval to use for numeric text controls. Declaration public IFieldConfiguration Step(decimal step) Parameters Type Name Description System.Decimal step The stepping interval Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Step(Int64) Sets the stepping interval to use for numeric text controls. Declaration public IFieldConfiguration Step(long step) Parameters Type Name Description System.Int64 step The stepping interval Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithFalseAs(String) Change the label that represents false. Declaration public IFieldConfiguration WithFalseAs(string falseString) Parameters Type Name Description System.String falseString The label to use as false Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithFormatString(String) Uses the given format string when outputting the field value. Declaration public IFieldConfiguration WithFormatString(string formatString) Parameters Type Name Description System.String formatString The format string to use Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(IHtmlContent) Supply a HTML hint to display along with the field. Declaration public IFieldConfiguration WithHint(IHtmlContent hint) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent hint The hint markup Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(Func<Object, IHtmlContent>) Supply a HTML hint to display along with the field. Declaration public IFieldConfiguration WithHint(Func<dynamic, IHtmlContent> hint) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > hint The hint markup as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(String) Supply a string hint to display along with the field. Declaration public IFieldConfiguration WithHint(string hint) Parameters Type Name Description System.String hint The hint string Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHintId(String) Specify an ID to use for a field hint. Declaration public IFieldConfiguration WithHintId(string hintId) Parameters Type Name Description System.String hintId The ID to use Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithNoneAs(String) Change the label that represents none. Declaration public IFieldConfiguration WithNoneAs(string noneString) Parameters Type Name Description System.String noneString The label to use as none Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithoutInlineLabel() Specify that no inline label should be generated. Declaration public IFieldConfiguration WithoutInlineLabel() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithoutLabelElement() Don't use a <label>, but still include the label text for the field. Declaration public IFieldConfiguration WithoutLabelElement() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithTrueAs(String) Change the label that represents true. Declaration public IFieldConfiguration WithTrueAs(string trueString) Parameters Type Name Description System.String trueString The label to use as true Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WriteTo(TextWriter, HtmlEncoder) Called when form component outputted to the page; writes the form content HTML to the given writer. Declaration public void WriteTo(TextWriter writer, HtmlEncoder encoder) Parameters Type Name Description System.IO.TextWriter writer The writer to write to System.Text.Encodings.Web.HtmlEncoder encoder The HTML encoder to use when writing Implements IFieldConfiguration Microsoft.AspNetCore.Html.IHtmlContent IReadonlyFieldConfiguration Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) FieldConfigurationExtensions.TabIndex(IFieldConfiguration, Int32) FieldConfigurationExtensions.AutoFocus(IFieldConfiguration) HtmlContentExtensions.ToHtmlString(IHtmlContent) FieldConfigurationExtensions.AsInputGroup(IFieldConfiguration)"
  },
  "apidocs/ChameleonForms.Component.Config.FieldConfigurationExtensions.html": {
    "href": "apidocs/ChameleonForms.Component.Config.FieldConfigurationExtensions.html",
    "title": "Class FieldConfigurationExtensions | ChameleonForms",
    "keywords": "Class FieldConfigurationExtensions Provides additional configuration options to FieldConfiguration Inheritance System.Object FieldConfigurationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component.Config Assembly : ChameleonForms.Core.dll Syntax public static class FieldConfigurationExtensions Methods | Improve this Doc View Source AutoFocus(IFieldConfiguration) Applys the autofocus attribute to a given field Declaration public static IFieldConfiguration AutoFocus(this IFieldConfiguration config) Parameters Type Name Description IFieldConfiguration config Field configuration to modify Returns Type Description IFieldConfiguration The instance of IFieldConfiguration passed in to continue chaining things | Improve this Doc View Source TabIndex(IFieldConfiguration, Int32) Sets the tab index of a given field Declaration public static IFieldConfiguration TabIndex(this IFieldConfiguration config, int index) Parameters Type Name Description IFieldConfiguration config Field configuration to update System.Int32 index Tab index to be set Returns Type Description IFieldConfiguration The instance of IFieldConfiguration passed in to continue chaining things"
  },
  "apidocs/ChameleonForms.Component.Config.html": {
    "href": "apidocs/ChameleonForms.Component.Config.html",
    "title": "Namespace ChameleonForms.Component.Config | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Component.Config Classes FieldConfiguration Holds configuration data for a form field. FieldConfigurationExtensions Provides additional configuration options to FieldConfiguration Interfaces IFieldConfiguration Holds configuration data for a form field. IReadonlyFieldConfiguration Immutable field configuration for use when generating a field's HTML."
  },
  "apidocs/ChameleonForms.Component.Config.IFieldConfiguration.html": {
    "href": "apidocs/ChameleonForms.Component.Config.IFieldConfiguration.html",
    "title": "Interface IFieldConfiguration | ChameleonForms",
    "keywords": "Interface IFieldConfiguration Holds configuration data for a form field. Inherited Members Microsoft.AspNetCore.Html.IHtmlContent.WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder) IReadonlyFieldConfiguration.Bag IReadonlyFieldConfiguration.GetBagData<TData>(String) IReadonlyFieldConfiguration.HtmlAttributes IReadonlyFieldConfiguration.InlineLabelText IReadonlyFieldConfiguration.LabelText IReadonlyFieldConfiguration.DisplayType IReadonlyFieldConfiguration.TrueString IReadonlyFieldConfiguration.FalseString IReadonlyFieldConfiguration.NoneString IReadonlyFieldConfiguration.Hint IReadonlyFieldConfiguration.PrependedHtml IReadonlyFieldConfiguration.AppendedHtml IReadonlyFieldConfiguration.FieldHtml IReadonlyFieldConfiguration.FormatString IReadonlyFieldConfiguration.EmptyItemHidden IReadonlyFieldConfiguration.HasLabelElement IReadonlyFieldConfiguration.LabelClasses IReadonlyFieldConfiguration.FieldContainerClasses IReadonlyFieldConfiguration.ValidationClasses IReadonlyFieldConfiguration.ExcludedEnums IReadonlyFieldConfiguration.HasInlineLabel IReadonlyFieldConfiguration.ShouldInlineLabelWrapElement IReadonlyFieldConfiguration.HintId Namespace : ChameleonForms.Component.Config Assembly : ChameleonForms.Core.dll Syntax public interface IFieldConfiguration : IHtmlContent, IReadonlyFieldConfiguration Properties | Improve this Doc View Source Attributes Attributes to add to the form element's HTML. Declaration HtmlAttributes Attributes { get; } Property Value Type Description HtmlAttributes Methods | Improve this Doc View Source AddClass(String) Adds a CSS class (or a number of CSS classes) to the attributes. Declaration IFieldConfiguration AddClass(string class) Parameters Type Name Description System.String class The CSS class(es) to add Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddFieldContainerClass(String) Specify one or more CSS classes to use for the field container element. Declaration IFieldConfiguration AddFieldContainerClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field container element Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddLabelClass(String) Specify one or more CSS classes to use for the field label. Declaration IFieldConfiguration AddLabelClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AddValidationClass(String) Specify one or more CSS classes to use for the field validation message. Declaration IFieldConfiguration AddValidationClass(string class) Parameters Type Name Description System.String class Any CSS class(es) to use for the field validation message Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(IHtmlContent) Appends the given HTML to the form field. Declaration IFieldConfiguration Append(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML to append Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(Func<Object, IHtmlContent>) Appends the given HTML to the form field. Declaration IFieldConfiguration Append(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML to append as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Append(String) Appends the given string to the form field. Declaration IFieldConfiguration Append(string str) Parameters Type Name Description System.String str The string to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AsCheckboxList() Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Declaration IFieldConfiguration AsCheckboxList() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining See Also AsRadioList() | Improve this Doc View Source AsDropDown() Renders the field as a drop-down control. Use for a list or boolean value. Declaration IFieldConfiguration AsDropDown() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source AsRadioList() Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Declaration IFieldConfiguration AsRadioList() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining See Also AsCheckboxList() | Improve this Doc View Source Attr(Func<Object, Object>) Adds or updates a HTML attribute with using a lambda method to express the attribute. Declaration IFieldConfiguration Attr(Func<object, object> attribute) Parameters Type Name Description System.Func < System.Object , System.Object > attribute A lambda expression representing the attribute to set and its value Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining Examples h.Attr(style => \"width: 100%;\") | Improve this Doc View Source Attr(String, Object) Adds or updates a HTML attribute with a given value. Declaration IFieldConfiguration Attr(string key, object value) Parameters Type Name Description System.String key The name of the HTML attribute to add/update System.Object value The value of the HTML attribute to add/update Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, Object>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration IFieldConfiguration Attrs(IDictionary<string, object> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > attributes A dictionary of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, String>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration IFieldConfiguration Attrs(IDictionary<string, string> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > attributes A dictionary of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(Func<Object, Object>[]) Adds or updates a set of HTML attributes using lambda methods to express the attributes. Declaration IFieldConfiguration Attrs(params Func<object, object>[] attributes) Parameters Type Name Description System.Func < System.Object , System.Object >[] attributes A list of lambas where the lambda variable name is the name of the attribute and the value is the value Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Attrs(Object) Adds or updates a set of HTML attributes using anonymous objects to express the attributes. Declaration IFieldConfiguration Attrs(object attributes) Parameters Type Name Description System.Object attributes An anonymous object of attributes Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Cols(Int32) Sets the number of cols for a textarea to use. Declaration IFieldConfiguration Cols(int numCols) Parameters Type Name Description System.Int32 numCols The number of cols for the textarea Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Disabled(Boolean) Sets the field to be disabled (value not submitted, can not click). Declaration IFieldConfiguration Disabled(bool disabled = true) Parameters Type Name Description System.Boolean disabled Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Exclude(Enum[]) Excludes one or more Enum values from the generated field. Declaration IFieldConfiguration Exclude(params Enum[] enumValues) Parameters Type Name Description System.Enum [] enumValues The value of Enum(s) to exclude from the generated field. Returns Type Description IFieldConfiguration | Improve this Doc View Source HideEmptyItem() Hide the empty item that would normally display for the field. Declaration IFieldConfiguration HideEmptyItem() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Id(String) Override the default id for the field. Declaration IFieldConfiguration Id(string id) Parameters Type Name Description System.String id The text to use for the id Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(IHtmlContent) Sets an inline label for a checkbox. Declaration IFieldConfiguration InlineLabel(IHtmlContent labelHtml) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The html to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(Func<Object, IHtmlContent>) Sets an inline label for a checkbox. Declaration IFieldConfiguration InlineLabel(Func<dynamic, IHtmlContent> labelHtml) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > labelHtml The html to use for the label as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabel(String) Sets an inline label for a checkbox. Declaration IFieldConfiguration InlineLabel(string labelText) Parameters Type Name Description System.String labelText The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source InlineLabelWrapsElement(Boolean) Specify that inline labels should wrap their input element. Important for bootstrap. Declaration IFieldConfiguration InlineLabelWrapsElement(bool wrapElement = true) Parameters Type Name Description System.Boolean wrapElement True if the input element should be wrapped. Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(IHtmlContent) Override the default label for the field. Declaration IFieldConfiguration Label(IHtmlContent labelHtml) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(Func<Object, IHtmlContent>) Override the default label for the field. Declaration IFieldConfiguration Label(Func<dynamic, IHtmlContent> labelHtml) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > labelHtml The text to use for the label as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Label(String) Override the default label for the field. Declaration IFieldConfiguration Label(string labelText) Parameters Type Name Description System.String labelText The text to use for the label Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(Decimal) Sets the maximum value to accept for numeric text controls. Declaration IFieldConfiguration Max(decimal max) Parameters Type Name Description System.Decimal max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(Int64) Sets the maximum value to accept for numeric text controls. Declaration IFieldConfiguration Max(long max) Parameters Type Name Description System.Int64 max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Max(String) Sets the maximum value to accept for numeric text controls. Declaration IFieldConfiguration Max(string max) Parameters Type Name Description System.String max The maximum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(Decimal) Sets the minimum value to accept for numeric text controls. Declaration IFieldConfiguration Min(decimal min) Parameters Type Name Description System.Decimal min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(Int64) Sets the minimum value to accept for numeric text controls. Declaration IFieldConfiguration Min(long min) Parameters Type Name Description System.Int64 min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Min(String) Sets the minimum value to accept for numeric text controls. Declaration IFieldConfiguration Min(string min) Parameters Type Name Description System.String min The minimum value to accept Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source OverrideFieldHtml(IHtmlContent) Override the HTML of the form field. This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration IFieldConfiguration OverrideFieldHtml(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML for the field Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source OverrideFieldHtml(Func<Object, IHtmlContent>) Override the HTML of the form field. This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration IFieldConfiguration OverrideFieldHtml(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML for the field as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Placeholder(String) Sets a hint to the user of what can be entered in the field. Declaration IFieldConfiguration Placeholder(string placeholderText) Parameters Type Name Description System.String placeholderText The text to use for the placeholder Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(IHtmlContent) Prepends the given HTML to the form field. Declaration IFieldConfiguration Prepend(IHtmlContent html) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent html The HTML to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(Func<Object, IHtmlContent>) Prepends the given HTML to the form field. Declaration IFieldConfiguration Prepend(Func<dynamic, IHtmlContent> html) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > html The HTML to prepend as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Prepend(String) Prepends the given string to the form field. Declaration IFieldConfiguration Prepend(string str) Parameters Type Name Description System.String str The string to prepend Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Readonly(Boolean) Sets the field to be readonly (value can not be modified). Declaration IFieldConfiguration Readonly(bool readonly = true) Parameters Type Name Description System.Boolean readonly Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Required(Boolean) Sets the field to be required. Declaration IFieldConfiguration Required(bool required = true) Parameters Type Name Description System.Boolean required Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Rows(Int32) Sets the number of rows for a textarea to use. Declaration IFieldConfiguration Rows(int numRows) Parameters Type Name Description System.Int32 numRows The number of rows for the textarea Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source SetField(IHtmlContent) Sets the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration void SetField(IHtmlContent field) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent field The field being configured | Improve this Doc View Source SetField(Func<IHtmlContent>) Sets a lambda expression to get the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration void SetField(Func<IHtmlContent> field) Parameters Type Name Description System.Func < Microsoft.AspNetCore.Html.IHtmlContent > field A lambda returning the HTML to output | Improve this Doc View Source SetField(Func<Object, IHtmlContent>) Sets the field that the field configuration is wrapping so that a call to ToHtmlString() will output the given field. Declaration void SetField(Func<dynamic, IHtmlContent> field) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > field The field being configured as a templated razor delegate | Improve this Doc View Source Step(Decimal) Sets the stepping interval to use for numeric text controls. Declaration IFieldConfiguration Step(decimal step) Parameters Type Name Description System.Decimal step The stepping interval Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source Step(Int64) Sets the stepping interval to use for numeric text controls. Declaration IFieldConfiguration Step(long step) Parameters Type Name Description System.Int64 step The stepping interval Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithFalseAs(String) Change the label that represents false. Declaration IFieldConfiguration WithFalseAs(string falseString) Parameters Type Name Description System.String falseString The label to use as false Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithFormatString(String) Uses the given format string when outputting the field value. Declaration IFieldConfiguration WithFormatString(string formatString) Parameters Type Name Description System.String formatString The format string to use Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(IHtmlContent) Supply a HTML hint to display along with the field. Declaration IFieldConfiguration WithHint(IHtmlContent hint) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent hint The hint markup Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(Func<Object, IHtmlContent>) Supply a HTML hint to display along with the field. Declaration IFieldConfiguration WithHint(Func<dynamic, IHtmlContent> hint) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > hint The hint markup as a templated razor delegate Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHint(String) Supply a string hint to display along with the field. Declaration IFieldConfiguration WithHint(string hint) Parameters Type Name Description System.String hint The hint string Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithHintId(String) Specify an ID to use for a field hint. Declaration IFieldConfiguration WithHintId(string hintId) Parameters Type Name Description System.String hintId The ID to use Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithNoneAs(String) Change the label that represents none. Declaration IFieldConfiguration WithNoneAs(string noneString) Parameters Type Name Description System.String noneString The label to use as none Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithoutInlineLabel() Specify that no inline label should be generated. Declaration IFieldConfiguration WithoutInlineLabel() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithoutLabelElement() Don't use a <label>, but still include the label text for the field. Declaration IFieldConfiguration WithoutLabelElement() Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining | Improve this Doc View Source WithTrueAs(String) Change the label that represents true. Declaration IFieldConfiguration WithTrueAs(string trueString) Parameters Type Name Description System.String trueString The label to use as true Returns Type Description IFieldConfiguration The IFieldConfiguration to allow for method chaining Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) FieldConfigurationExtensions.TabIndex(IFieldConfiguration, Int32) FieldConfigurationExtensions.AutoFocus(IFieldConfiguration) HtmlContentExtensions.ToHtmlString(IHtmlContent) FieldConfigurationExtensions.AsInputGroup(IFieldConfiguration)"
  },
  "apidocs/ChameleonForms.Component.Config.IReadonlyFieldConfiguration.html": {
    "href": "apidocs/ChameleonForms.Component.Config.IReadonlyFieldConfiguration.html",
    "title": "Interface IReadonlyFieldConfiguration | ChameleonForms",
    "keywords": "Interface IReadonlyFieldConfiguration Immutable field configuration for use when generating a field's HTML. Namespace : ChameleonForms.Component.Config Assembly : ChameleonForms.Core.dll Syntax public interface IReadonlyFieldConfiguration Properties | Improve this Doc View Source AppendedHtml A list of HTML to be appended to the form field in ltr order. Declaration IEnumerable<IHtmlContent> AppendedHtml { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source Bag A dynamic bag to allow for custom extensions using the field configuration. Declaration dynamic Bag { get; } Property Value Type Description System.Object | Improve this Doc View Source DisplayType Returns the display type for the field. Declaration FieldDisplayType DisplayType { get; } Property Value Type Description FieldDisplayType | Improve this Doc View Source EmptyItemHidden Whether or not the empty item is hidden. Declaration bool EmptyItemHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ExcludedEnums Enum value(s) to exclude from the generated field. Declaration Enum[] ExcludedEnums { get; } Property Value Type Description System.Enum [] | Improve this Doc View Source FalseString The label that represents false. Declaration string FalseString { get; } Property Value Type Description System.String | Improve this Doc View Source FieldContainerClasses Any CSS class(es) to use for the field container element. Declaration string FieldContainerClasses { get; } Property Value Type Description System.String | Improve this Doc View Source FieldHtml The HTML to be used as the field html. Declaration IHtmlContent FieldHtml { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source FormatString The format string to use for the field. Declaration string FormatString { get; } Property Value Type Description System.String | Improve this Doc View Source HasInlineLabel Whether or not to use an inline <label>. Declaration bool HasInlineLabel { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasLabelElement Whether or not to use a <label>. Declaration bool HasLabelElement { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Hint Get the hint to display with the field. Declaration IHtmlContent Hint { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source HintId The ID to use for a field hint. Declaration string HintId { get; } Property Value Type Description System.String | Improve this Doc View Source HtmlAttributes Attributes to add to the form element's HTML. Declaration IDictionary<string, object> HtmlAttributes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > | Improve this Doc View Source InlineLabelText Gets any text that has been set for an inline label. Declaration IHtmlContent InlineLabelText { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source LabelClasses Any CSS class(es) to use for the field label. Declaration string LabelClasses { get; } Property Value Type Description System.String | Improve this Doc View Source LabelText Gets any text that has been set for the label. Declaration IHtmlContent LabelText { get; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source NoneString The label that represents none. Declaration string NoneString { get; } Property Value Type Description System.String | Improve this Doc View Source PrependedHtml A list of HTML to be prepended to the form field in ltr order. Declaration IEnumerable<IHtmlContent> PrependedHtml { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source ShouldInlineLabelWrapElement Whether or not inline <label> should wrap their <input> element. Declaration bool ShouldInlineLabelWrapElement { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TrueString The label that represents true. Declaration string TrueString { get; } Property Value Type Description System.String | Improve this Doc View Source ValidationClasses Any CSS class(es) to use for the field validation message. Declaration string ValidationClasses { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetBagData<TData>(String) Returns data from the Bag stored in the given property or default(TData) if there is none present. Declaration TData GetBagData<TData>(string propertyName) Parameters Type Name Description System.String propertyName The name of the property to retrieve the data for Returns Type Description TData The data from the Bag or default(TData) if there was no data against that property in the bag Type Parameters Name Description TData The type of the expected data to return Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Component.Field.html": {
    "href": "apidocs/ChameleonForms.Component.Field.html",
    "title": "Class Field | ChameleonForms",
    "keywords": "Class Field Helper for field configuration. Inheritance System.Object Field Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public static class Field Methods | Improve this Doc View Source Configure() Returns a field configuration object. Declaration public static FieldConfiguration Configure() Returns Type Description FieldConfiguration A field configuration"
  },
  "apidocs/ChameleonForms.Component.Field-1.html": {
    "href": "apidocs/ChameleonForms.Component.Field-1.html",
    "title": "Class Field<TModel> | ChameleonForms",
    "keywords": "Class Field<TModel> Wraps the output of a single form field. Inheritance System.Object FormComponent <TModel> Field<TModel> Implements IFormComponent <TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Inherited Members FormComponent<TModel>.IsSelfClosing FormComponent<TModel>.Form FormComponent<TModel>.Initialise() FormComponent<TModel>.WriteTo(TextWriter, HtmlEncoder) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public class Field<TModel> : FormComponent<TModel>, IFormComponent<TModel>, IHtmlContent, IDisposable Type Parameters Name Description TModel The view model type for the current view Constructors | Improve this Doc View Source Field(IForm<TModel>, Boolean, IFieldGenerator, IFieldConfiguration) Creates a form field. Declaration public Field(IForm<TModel> form, bool isParent, IFieldGenerator fieldGenerator, IFieldConfiguration config) Parameters Type Name Description IForm <TModel> form The form the field is being created in System.Boolean isParent Whether or not the field has other fields nested within it IFieldGenerator fieldGenerator A field HTML generator class IFieldConfiguration config The configuration values for the field Methods | Improve this Doc View Source Begin() Returns the HTML representation of the beginning of the form component. Declaration public override IHtmlContent Begin() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.Begin() | Improve this Doc View Source Dispose() Called when form component is created within a using block: writes the end tag(s) of the component. Declaration public override void Dispose() Overrides ChameleonForms.Component.FormComponent<TModel>.Dispose() | Improve this Doc View Source End() Returns the HTML representation of the end of the form component. Declaration public override IHtmlContent End() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.End() Implements IFormComponent<TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent) FieldExtensions.FieldFor<TModel, T>(Field<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration)"
  },
  "apidocs/ChameleonForms.Component.FieldExtensions.html": {
    "href": "apidocs/ChameleonForms.Component.FieldExtensions.html",
    "title": "Class FieldExtensions | ChameleonForms",
    "keywords": "Class FieldExtensions Extension methods for the creation of form fields, labels and validation messages. Inheritance System.Object FieldExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public static class FieldExtensions Methods | Improve this Doc View Source BeginFieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a single form field as a child of a form section that can have other form fields nested within it. Declaration public static Field<TModel> BeginFieldFor<TModel, T>(this ISection<TModel> section, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description ISection <TModel> section The section the field is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the field for IFieldConfiguration config Any configuration information for the field Returns Type Description Field <TModel> The form field Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @using (var f = s.BeginFieldFor(m => m.Company)) { @f.FieldFor(m => m.PositionTitle) } | Improve this Doc View Source FieldElementFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a standalone form field to be output in a form. Declaration public static IFieldConfiguration FieldElementFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description IForm <TModel> form The form the field is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the field for IFieldConfiguration config Optional base field configuration Returns Type Description IFieldConfiguration A field configuration object that allows you to configure the field Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @using (var f = Html.BeginChameleonForm()) { @f.FieldElementFor(m => m.PositionTitle) } | Improve this Doc View Source FieldFor<TModel, T>(Field<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a single form field as a child of another form field. Declaration public static IFieldConfiguration FieldFor<TModel, T>(this Field<TModel> field, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description Field <TModel> field The parent field the field is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the field for IFieldConfiguration config Optional base field configuration Returns Type Description IFieldConfiguration A field configuration object that allows you to configure the field Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @using (var f = s.BeginFieldFor(m => m.Company)) { @f.FieldFor(m => m.PositionTitle) } | Improve this Doc View Source FieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a single form field as a child of a form section. Declaration public static IFieldConfiguration FieldFor<TModel, T>(this ISection<TModel> section, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description ISection <TModel> section The section the field is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the field for IFieldConfiguration config Optional base field configuration Returns Type Description IFieldConfiguration A field configuration object that allows you to configure the field Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @s.FieldFor(m => m.FirstName) | Improve this Doc View Source LabelFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a standalone label to be output in a form for a field. Declaration public static IFieldConfiguration LabelFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description IForm <TModel> form The form the label is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the label for IFieldConfiguration config Optional base field configuration Returns Type Description IFieldConfiguration The HTML for the label Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @using (var f = Html.BeginChameleonForm()) { @f.LabelFor(m => m.PositionTitle) } | Improve this Doc View Source ValidationMessageFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) Creates a standalone validation message to be output in a form for a field. Declaration public static IFieldConfiguration ValidationMessageFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) Parameters Type Name Description IForm <TModel> form The form the label is being created in System.Linq.Expressions.Expression < System.Func <TModel, T>> property A lamdba expression to identify the field to render the validation message for IFieldConfiguration config Optional base field configuration Returns Type Description IFieldConfiguration The HTML for the validation message Type Parameters Name Description TModel The view model type for the current view T The type of the field being generated Examples @using (var f = Html.BeginChameleonForm()) { @f.ValidationMessageFor(m => m.PositionTitle) }"
  },
  "apidocs/ChameleonForms.Component.FieldParent.html": {
    "href": "apidocs/ChameleonForms.Component.FieldParent.html",
    "title": "Enum FieldParent | ChameleonForms",
    "keywords": "Enum FieldParent The parent of the field being generated. Namespace : ChameleonForms.Component Assembly : ChameleonForms.Core.dll Syntax public enum FieldParent Fields Name Description Form The parent is the root Form. Section The parent is a section (or a field within a section). Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Component.FormComponent-1.html": {
    "href": "apidocs/ChameleonForms.Component.FormComponent-1.html",
    "title": "Class FormComponent<TModel> | ChameleonForms",
    "keywords": "Class FormComponent<TModel> Chameleon Forms base component class; provides an ability to easily write HTML to the page in a self-closing or nested manner. Ensure you call Initialise() at the end of the constructor when extending this class. Inheritance System.Object FormComponent<TModel> Field<TModel> Message<TModel> Navigation<TModel> Section<TModel> Implements IFormComponent <TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public abstract class FormComponent<TModel> : IFormComponent<TModel>, IHtmlContent, IDisposable Type Parameters Name Description TModel Constructors | Improve this Doc View Source FormComponent(IForm<TModel>, Boolean) Create a form component. Declaration protected FormComponent(IForm<TModel> form, bool isSelfClosing) Parameters Type Name Description IForm <TModel> form The form System.Boolean isSelfClosing Whether or not the component is self closing or has an explicit end tag Fields | Improve this Doc View Source IsSelfClosing Whether or not the component is self-closing when instantiated or Dispose will be called later. Declaration protected readonly bool IsSelfClosing Field Value Type Description System.Boolean Properties | Improve this Doc View Source Form The form that the component is attached to. Declaration public IForm<TModel> Form { get; } Property Value Type Description IForm <TModel> Methods | Improve this Doc View Source Begin() Returns the HTML representation of the beginning of the form component. Declaration public abstract IHtmlContent Begin() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the form component | Improve this Doc View Source Dispose() Called when form component is created within a using block: writes the end tag(s) of the component. Declaration public virtual void Dispose() | Improve this Doc View Source End() Returns the HTML representation of the end of the form component. Declaration public abstract IHtmlContent End() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the form component | Improve this Doc View Source Initialise() Initialises the form component; should be called at the end of the constructor of any derived classes. Writes HTML directly to the page is the component isn't self-closing Declaration public void Initialise() | Improve this Doc View Source WriteTo(TextWriter, HtmlEncoder) Called when form component outputted to the page; writes the form content HTML to the given writer. Declaration public void WriteTo(TextWriter writer, HtmlEncoder encoder) Parameters Type Name Description System.IO.TextWriter writer The writer to write to System.Text.Encodings.Web.HtmlEncoder encoder The HTML encoder to use when writing Implements IFormComponent<TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent)"
  },
  "apidocs/ChameleonForms.Component.html": {
    "href": "apidocs/ChameleonForms.Component.html",
    "title": "Namespace ChameleonForms.Component | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Component Classes ButtonHtmlAttributes HtmlAttributes class that is returned from button methods that allows for extension methods targetted at buttons. Field Helper for field configuration. Field<TModel> Wraps the output of a single form field. FieldExtensions Extension methods for the creation of form fields, labels and validation messages. FormComponent<TModel> Chameleon Forms base component class; provides an ability to easily write HTML to the page in a self-closing or nested manner. Ensure you call Initialise() at the end of the constructor when extending this class. Message<TModel> Wraps the output of a message to display to a user. MessageExtensions Extension methods for the creation of messages. Navigation<TModel> Wraps the output of the navigation area of a form. For example the area with submit buttons. NavigationExtensions Extension methods for the creation of navigation sections. Section<TModel> Wraps the output of a form section. SectionExtensions Extension methods to create form sections. Interfaces IFormComponent<TModel> Chameleon Forms component - holds a reference to a form. ISection Interface for a modeless cast of a ChameleonForms Section. ISection<TModel> Tagging interface for a ChameleonForms Section with a model type. Enums FieldParent The parent of the field being generated."
  },
  "apidocs/ChameleonForms.Component.IFormComponent-1.html": {
    "href": "apidocs/ChameleonForms.Component.IFormComponent-1.html",
    "title": "Interface IFormComponent<TModel> | ChameleonForms",
    "keywords": "Interface IFormComponent<TModel> Chameleon Forms component - holds a reference to a form. Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public interface IFormComponent<TModel> Type Parameters Name Description TModel The view model type for the current view Properties | Improve this Doc View Source Form The form that the component is attached to. Declaration IForm<TModel> Form { get; } Property Value Type Description IForm <TModel> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Component.ISection.html": {
    "href": "apidocs/ChameleonForms.Component.ISection.html",
    "title": "Interface ISection | ChameleonForms",
    "keywords": "Interface ISection Interface for a modeless cast of a ChameleonForms Section. Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public interface ISection Methods | Improve this Doc View Source CreatePartialSection<TPartialModel>(IForm<TPartialModel>) Returns a section with the same characteristics as the current section, but using the given partial form. Declaration ISection<TPartialModel> CreatePartialSection<TPartialModel>(IForm<TPartialModel> partialModelForm) Parameters Type Name Description IForm <TPartialModel> partialModelForm Returns Type Description ISection <TPartialModel> A section with the same characteristics as the current section, but using the given partial form Type Parameters Name Description TPartialModel The model type of the partial view | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, Boolean, IFieldConfiguration) Outputs a field with passed in HTML. Declaration IFieldConfiguration Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml = null, ModelMetadata metadata = null, bool isValid = true, IFieldConfiguration fieldConfiguration = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML for the label part of the field Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML for the field element part of the field Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML for the validation markup part of the field Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata Any field metadata System.Boolean isValid Whether or not the field is valid IFieldConfiguration fieldConfiguration Optional field configuration Returns Type Description IFieldConfiguration A field configuration that can be used to output the field as well as configure it fluently Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Component.ISection-1.html": {
    "href": "apidocs/ChameleonForms.Component.ISection-1.html",
    "title": "Interface ISection<TModel> | ChameleonForms",
    "keywords": "Interface ISection<TModel> Tagging interface for a ChameleonForms Section with a model type. Inherited Members IFormComponent<TModel>.Form System.IDisposable.Dispose() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public interface ISection<TModel> : IFormComponent<TModel>, IDisposable Type Parameters Name Description TModel Methods | Improve this Doc View Source CreatePartialSection(IHtmlHelper<TModel>) Returns a section with the same characteristics as the current section, but using the given partial form. Declaration ISection<TModel> CreatePartialSection(IHtmlHelper<TModel> partialHelper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> partialHelper The HTML helper from the partial view Returns Type Description ISection <TModel> A section with the same characteristics as the current section, but using the given partial form | Improve this Doc View Source CreatePartialSection<TPartialModel>(IForm<TPartialModel>) Returns a section with the same characteristics as the current section, but using the given partial form. Declaration ISection<TPartialModel> CreatePartialSection<TPartialModel>(IForm<TPartialModel> partialModelForm) Parameters Type Name Description IForm <TPartialModel> partialModelForm The Form<TModel> from the partial view Returns Type Description ISection <TPartialModel> A section with the same characteristics as the current section, but using the given partial form Type Parameters Name Description TPartialModel The model type of the partial view | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, Boolean, IFieldConfiguration) Outputs a field with passed in HTML. Declaration IFieldConfiguration Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml = null, ModelMetadata metadata = null, bool isValid = true, IFieldConfiguration fieldConfiguration = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML for the label part of the field Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML for the field element part of the field Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML for the validation markup part of the field Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata Any field metadata System.Boolean isValid Whether or not the field is valid IFieldConfiguration fieldConfiguration Optional field configuration Returns Type Description IFieldConfiguration A field configuration that can be used to output the field as well as configure it fluently Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) FieldExtensions.FieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.BeginFieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) SectionExtensions.BeginSection<TModel>(ISection<TModel>, String, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.PartialForAsync<TModel, TPartialModel>(ISection<TModel>, Expression<Func<TModel, TPartialModel>>, String)"
  },
  "apidocs/ChameleonForms.Component.Message-1.html": {
    "href": "apidocs/ChameleonForms.Component.Message-1.html",
    "title": "Class Message<TModel> | ChameleonForms",
    "keywords": "Class Message<TModel> Wraps the output of a message to display to a user. Inheritance System.Object FormComponent <TModel> Message<TModel> Implements IFormComponent <TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Inherited Members FormComponent<TModel>.IsSelfClosing FormComponent<TModel>.Form FormComponent<TModel>.Initialise() FormComponent<TModel>.WriteTo(TextWriter, HtmlEncoder) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public class Message<TModel> : FormComponent<TModel>, IFormComponent<TModel>, IHtmlContent, IDisposable Type Parameters Name Description TModel The view model type for the current view Constructors | Improve this Doc View Source Message(IForm<TModel>, MessageType, IHtmlContent) Creates a message. Declaration public Message(IForm<TModel> form, MessageType messageType, IHtmlContent heading) Parameters Type Name Description IForm <TModel> form The form the message is being created in MessageType messageType The type of message to display Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the message | Improve this Doc View Source Message(IForm<TModel>, MessageType, String) Creates a message. Declaration public Message(IForm<TModel> form, MessageType messageType, string heading) Parameters Type Name Description IForm <TModel> form The form the message is being created in MessageType messageType The type of message to display System.String heading The heading for the message Methods | Improve this Doc View Source Begin() Returns the HTML representation of the beginning of the form component. Declaration public override IHtmlContent Begin() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.Begin() | Improve this Doc View Source Dispose() Called when form component is created within a using block: writes the end tag(s) of the component. Declaration public override void Dispose() Overrides ChameleonForms.Component.FormComponent<TModel>.Dispose() | Improve this Doc View Source End() Returns the HTML representation of the end of the form component. Declaration public override IHtmlContent End() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.End() | Improve this Doc View Source Paragraph(IHtmlContent) Creates the HTML for a paragraph in the message. Declaration public virtual IHtmlContent Paragraph(IHtmlContent paragraph) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent paragraph The paragraph to output Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the paragraph | Improve this Doc View Source Paragraph(Func<Object, IHtmlContent>) Creates the HTML for a paragraph in the message. Declaration public virtual IHtmlContent Paragraph(Func<dynamic, IHtmlContent> paragraph) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > paragraph The paragraph to output as a templated razor delegate Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the paragraph | Improve this Doc View Source Paragraph(String) Creates the HTML for a paragraph in the message. Declaration public virtual IHtmlContent Paragraph(string paragraph) Parameters Type Name Description System.String paragraph The paragraph to output Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the paragraph Implements IFormComponent<TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent)"
  },
  "apidocs/ChameleonForms.Component.MessageExtensions.html": {
    "href": "apidocs/ChameleonForms.Component.MessageExtensions.html",
    "title": "Class MessageExtensions | ChameleonForms",
    "keywords": "Class MessageExtensions Extension methods for the creation of messages. Inheritance System.Object MessageExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public static class MessageExtensions Methods | Improve this Doc View Source BeginMessage<TModel>(IForm<TModel>, MessageType, IHtmlContent) Creates a message. Declaration public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, IHtmlContent heading) Parameters Type Name Description IForm <TModel> form The form the message is being created in MessageType messageType The type of message to display Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the message Returns Type Description Message <TModel> The message Type Parameters Name Description TModel The view model type for the current view Examples @using (var m = f.BeginMessage(MessageType.Success, new HtmlString(\"<strong>The submission was successful</strong>\"))) { @m.Paragraph(string.Format(&quot;Your item was successfully created with id {0}\", Model.Id)) } | Improve this Doc View Source BeginMessage<TModel>(IForm<TModel>, MessageType, Func<Object, IHtmlContent>) Creates a message. Declaration public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, Func<dynamic, IHtmlContent> heading) Parameters Type Name Description IForm <TModel> form The form the message is being created in MessageType messageType The type of message to display System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > heading The heading for the message as a templated razor delegate Returns Type Description Message <TModel> The message Type Parameters Name Description TModel The view model type for the current view Examples @using (var m = f.BeginMessage(MessageType.Success, new HtmlString(@<strong>The submission was successful</strong>))) { @m.Paragraph(string.Format(&quot;Your item was successfully created with id {0}\", Model.Id)) } | Improve this Doc View Source BeginMessage<TModel>(IForm<TModel>, MessageType, String) Creates a message. Declaration public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, string heading = null) Parameters Type Name Description IForm <TModel> form The form the message is being created in MessageType messageType The type of message to display System.String heading The heading for the message Returns Type Description Message <TModel> The message Type Parameters Name Description TModel The view model type for the current view Examples @using (var m = f.BeginMessage(MessageType.Success, \"Your submission was successful\")) { @m.Paragraph(string.Format(&quot;Your item was successfully created with id {0}\", Model.Id)) }"
  },
  "apidocs/ChameleonForms.Component.Navigation-1.html": {
    "href": "apidocs/ChameleonForms.Component.Navigation-1.html",
    "title": "Class Navigation<TModel> | ChameleonForms",
    "keywords": "Class Navigation<TModel> Wraps the output of the navigation area of a form. For example the area with submit buttons. Inheritance System.Object FormComponent <TModel> Navigation<TModel> Implements IFormComponent <TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Inherited Members FormComponent<TModel>.IsSelfClosing FormComponent<TModel>.Form FormComponent<TModel>.Initialise() FormComponent<TModel>.WriteTo(TextWriter, HtmlEncoder) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public class Navigation<TModel> : FormComponent<TModel>, IFormComponent<TModel>, IHtmlContent, IDisposable Type Parameters Name Description TModel The view model type for the current view Constructors | Improve this Doc View Source Navigation(IForm<TModel>) Creates a form navigation area. Declaration public Navigation(IForm<TModel> form) Parameters Type Name Description IForm <TModel> form The form the message is being created in Methods | Improve this Doc View Source Begin() Returns the HTML representation of the beginning of the form component. Declaration public override IHtmlContent Begin() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.Begin() | Improve this Doc View Source Button(IHtmlContent) Creates the HTML for a <button>. Declaration public ButtonHtmlAttributes Button(IHtmlContent content) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content to display in the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Button(Func<Object, IHtmlContent>) Creates the HTML for a <button>. Declaration public ButtonHtmlAttributes Button(Func<dynamic, IHtmlContent> content) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > content The content to display in the button as a templated razor delegate Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Button(String) Creates the HTML for a <button>. Declaration public ButtonHtmlAttributes Button(string text) Parameters Type Name Description System.String text The text to display in the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Dispose() Called when form component is created within a using block: writes the end tag(s) of the component. Declaration public override void Dispose() Overrides ChameleonForms.Component.FormComponent<TModel>.Dispose() | Improve this Doc View Source End() Returns the HTML representation of the end of the form component. Declaration public override IHtmlContent End() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.End() | Improve this Doc View Source Reset(IHtmlContent) Creates the HTML for a reset <button>. Declaration public ButtonHtmlAttributes Reset(IHtmlContent content) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content to display for the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Reset(Func<Object, IHtmlContent>) Creates the HTML for a reset <button>. Declaration public ButtonHtmlAttributes Reset(Func<dynamic, IHtmlContent> content) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > content The content to display for the button as a templated razor delegate Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Reset(String) Creates the HTML for a reset <button>. Declaration public ButtonHtmlAttributes Reset(string text) Parameters Type Name Description System.String text The text to display for the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Submit(IHtmlContent) Creates the HTML for a submit <button>. Declaration public ButtonHtmlAttributes Submit(IHtmlContent content) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content to display in the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Submit(Func<Object, IHtmlContent>) Creates the HTML for a submit <button>. Declaration public ButtonHtmlAttributes Submit(Func<dynamic, IHtmlContent> content) Parameters Type Name Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > content The content to display in the button as a templated razor delegate Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Submit(String) Creates the HTML for a submit <button>. Declaration public ButtonHtmlAttributes Submit(string text) Parameters Type Name Description System.String text The text to display in the button Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Submit(String, String, IHtmlContent) Creates the HTML for a submit button that submits a value in the form post when clicked. Declaration public ButtonHtmlAttributes Submit(string name, string value, IHtmlContent content = null) Parameters Type Name Description System.String name The name of the element System.String value The value to submit with the form Microsoft.AspNetCore.Html.IHtmlContent content The text the user sees (leave as the default null if you want the user to see the value instead) Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML | Improve this Doc View Source Submit(String, String, Func<Object, IHtmlContent>) Creates the HTML for a submit button that submits a value in the form post when clicked. Declaration public ButtonHtmlAttributes Submit(string name, string value, Func<dynamic, IHtmlContent> content) Parameters Type Name Description System.String name The name of the element System.String value The value to submit with the form System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > content The text the user sees as a templated razor delegate Returns Type Description ButtonHtmlAttributes Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML Implements IFormComponent<TModel> Microsoft.AspNetCore.Html.IHtmlContent System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent)"
  },
  "apidocs/ChameleonForms.Component.NavigationExtensions.html": {
    "href": "apidocs/ChameleonForms.Component.NavigationExtensions.html",
    "title": "Class NavigationExtensions | ChameleonForms",
    "keywords": "Class NavigationExtensions Extension methods for the creation of navigation sections. Inheritance System.Object NavigationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public static class NavigationExtensions Methods | Improve this Doc View Source BeginNavigation<TModel>(IForm<TModel>) Creates a navigation section. Declaration public static Navigation<TModel> BeginNavigation<TModel>(this IForm<TModel> form) Parameters Type Name Description IForm <TModel> form The form the navigation is being created in Returns Type Description Navigation <TModel> The form navigation Type Parameters Name Description TModel The view model type for the current view Examples @using (var n = f.BeginNavigation()) { @n.Submit(&quot;Previous&quot;, \"previous\") @n.Submit(&quot;Save&quot;, \"save\") @n.Submit(&quot;Next&quot;, \"next\") }"
  },
  "apidocs/ChameleonForms.Component.Section-1.html": {
    "href": "apidocs/ChameleonForms.Component.Section-1.html",
    "title": "Class Section<TModel> | ChameleonForms",
    "keywords": "Class Section<TModel> Wraps the output of a form section. Inheritance System.Object FormComponent <TModel> Section<TModel> Implements Microsoft.AspNetCore.Html.IHtmlContent ISection ISection <TModel> IFormComponent <TModel> System.IDisposable Inherited Members FormComponent<TModel>.IsSelfClosing FormComponent<TModel>.Form FormComponent<TModel>.Initialise() FormComponent<TModel>.WriteTo(TextWriter, HtmlEncoder) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public class Section<TModel> : FormComponent<TModel>, IHtmlContent, ISection, ISection<TModel>, IFormComponent<TModel>, IDisposable Type Parameters Name Description TModel The view model type for the current view Constructors | Improve this Doc View Source Section(IForm<TModel>, IHtmlContent, Boolean, IHtmlContent, HtmlAttributes) Creates a form section Declaration public Section(IForm<TModel> form, IHtmlContent heading, bool nested, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description IForm <TModel> form The form the message is being created in Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the section System.Boolean nested Whether the section is nested within another section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Methods | Improve this Doc View Source Begin() Returns the HTML representation of the beginning of the form component. Declaration public override IHtmlContent Begin() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.Begin() | Improve this Doc View Source CreatePartialSection(IHtmlHelper<TModel>) Returns a section with the same characteristics as the current section, but using the given partial form. Declaration public ISection<TModel> CreatePartialSection(IHtmlHelper<TModel> partialHelper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> partialHelper The HTML helper from the partial view Returns Type Description ISection <TModel> A section with the same characteristics as the current section, but using the given partial form | Improve this Doc View Source CreatePartialSection<TPartialModel>(IForm<TPartialModel>) Returns a section with the same characteristics as the current section, but using the given partial form. Declaration public ISection<TPartialModel> CreatePartialSection<TPartialModel>(IForm<TPartialModel> partialModelForm) Parameters Type Name Description IForm <TPartialModel> partialModelForm The Form<TModel> from the partial view Returns Type Description ISection <TPartialModel> A section with the same characteristics as the current section, but using the given partial form Type Parameters Name Description TPartialModel The model type of the partial view | Improve this Doc View Source Dispose() Called when form section is created within a using block: writes the end tag(s) of the section. Declaration public override void Dispose() Overrides ChameleonForms.Component.FormComponent<TModel>.Dispose() | Improve this Doc View Source End() Returns the HTML representation of the end of the form component. Declaration public override IHtmlContent End() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the form component Overrides ChameleonForms.Component.FormComponent<TModel>.End() | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, Boolean, IFieldConfiguration) Outputs a field with passed in HTML. Declaration public IFieldConfiguration Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml = null, ModelMetadata metadata = null, bool isValid = true, IFieldConfiguration fieldConfiguration = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML for the label part of the field Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML for the field element part of the field Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML for the validation markup part of the field Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata Any field metadata System.Boolean isValid Whether or not the field is valid IFieldConfiguration fieldConfiguration Optional field configuration Returns Type Description IFieldConfiguration A field configuration that can be used to output the field as well as configure it fluently Implements Microsoft.AspNetCore.Html.IHtmlContent ISection ISection<TModel> IFormComponent<TModel> System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent) FieldExtensions.FieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.BeginFieldFor<TModel, T>(ISection<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) SectionExtensions.BeginSection<TModel>(ISection<TModel>, String, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(ISection<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.PartialForAsync<TModel, TPartialModel>(ISection<TModel>, Expression<Func<TModel, TPartialModel>>, String)"
  },
  "apidocs/ChameleonForms.Component.SectionExtensions.html": {
    "href": "apidocs/ChameleonForms.Component.SectionExtensions.html",
    "title": "Class SectionExtensions | ChameleonForms",
    "keywords": "Class SectionExtensions Extension methods to create form sections. Inheritance System.Object SectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Component Assembly : ChameleonForms.dll Syntax public static class SectionExtensions Methods | Improve this Doc View Source BeginSection<TModel>(ISection<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) Creates a nested form section. Declaration public static Section<TModel> BeginSection<TModel>(this ISection<TModel> section, IHtmlContent heading, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description ISection <TModel> section The section the section is being created under Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The nested form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\")) { using (var ss = s.BeginSection(new HtmlString(\"<strong>Nested section heading</strong>\"))) { @ss.FieldFor(m => m.FirstName) } } | Improve this Doc View Source BeginSection<TModel>(ISection<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes) Creates a nested form section. Declaration public static Section<TModel> BeginSection<TModel>(this ISection<TModel> section, Func<dynamic, IHtmlContent> heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) Parameters Type Name Description ISection <TModel> section The section the section is being created under System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > heading The heading for the section System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The nested form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\")) { using (var ss = s.BeginSection(@<strong>Nested section heading</strong>, leadingHtml: <p>Leading html...</p>)) { @ss.FieldFor(m => m.FirstName) } } | Improve this Doc View Source BeginSection<TModel>(ISection<TModel>, String, IHtmlContent, HtmlAttributes) Creates a nested form section. Declaration public static Section<TModel> BeginSection<TModel>(this ISection<TModel> section, string heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description ISection <TModel> section The section the section is being created under System.String heading The heading for the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The nested form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\")) { using (var ss = s.BeginSection(\"Nested section heading\")) { @ss.FieldFor(m => m.FirstName) } } | Improve this Doc View Source BeginSection<TModel>(ISection<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) Creates a nested form section. Declaration public static Section<TModel> BeginSection<TModel>(this ISection<TModel> section, string heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) Parameters Type Name Description ISection <TModel> section The section the section is being created under System.String heading The heading for the section System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > leadingHtml Any HTML to output at the start of the section as a templated razor delegate HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The nested form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\")) { using (var ss = s.BeginSection(\"Nested section heading\", leadingHtml: @<p>Leading html...</p>)) { @ss.FieldFor(m => m.FirstName) } } | Improve this Doc View Source BeginSection<TModel>(IForm<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) Creates a top-level form section. Declaration public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, IHtmlContent heading, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description IForm <TModel> form The form the section is being created in Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(new HtmlString(\"<strong>Section heading</strong>\"))) { @s.FieldFor(m => m.FirstName) } | Improve this Doc View Source BeginSection<TModel>(IForm<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes) Creates a top-level form section. Declaration public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, Func<dynamic, IHtmlContent> heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) Parameters Type Name Description IForm <TModel> form The form the section is being created in System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > heading The heading for the section as a templated razor delegate System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > leadingHtml Any HTML to output at the start of the section as a templated razor delegate HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(@<strong>Section heading</strong>, leadingHtml: @<p>Leading html...</p>)) { @s.FieldFor(m => m.FirstName) } | Improve this Doc View Source BeginSection<TModel>(IForm<TModel>, String, IHtmlContent, HtmlAttributes) Creates a top-level form section. Declaration public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, string heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description IForm <TModel> form The form the section is being created in System.String heading The heading for the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\")) { @s.FieldFor(m => m.FirstName) } | Improve this Doc View Source BeginSection<TModel>(IForm<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) Creates a top-level form section. Declaration public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, string heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) Parameters Type Name Description IForm <TModel> form The form the section is being created in System.String heading The heading for the section System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > leadingHtml Any HTML to output at the start of the section as a templated razor delegate HtmlAttributes htmlAttributes Any HTML attributes to apply to the section container Returns Type Description Section <TModel> The form section Type Parameters Name Description TModel The view model type for the current view Examples @using (var s = f.BeginSection(\"Section heading\", leadingHtml: @<p>Leading html...</p>)) { @s.FieldFor(m => m.FirstName) } | Improve this Doc View Source PartialForAsync<TModel, TPartialModel>(ISection<TModel>, Expression<Func<TModel, TPartialModel>>, String) Renders the given partial in the context of the given property. Use PartialFor(m => m) to render a partial for the model itself rather than a child property. Declaration public static Task<IHtmlContent> PartialForAsync<TModel, TPartialModel>(this ISection<TModel> section, Expression<Func<TModel, TPartialModel>> partialModelProperty, string partialViewName) Parameters Type Name Description ISection <TModel> section The current section System.Linq.Expressions.Expression < System.Func <TModel, TPartialModel>> partialModelProperty The property to use for the partial model System.String partialViewName The name of the partial view to render Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Html.IHtmlContent > The HTML for the rendered partial Type Parameters Name Description TModel The form model type TPartialModel The type of the model property to use for the partial model"
  },
  "apidocs/ChameleonForms.Config.ChameleonFormsConfigBuilder-1.html": {
    "href": "apidocs/ChameleonForms.Config.ChameleonFormsConfigBuilder-1.html",
    "title": "Class ChameleonFormsConfigBuilder<TFormTemplate> | ChameleonForms",
    "keywords": "Class ChameleonFormsConfigBuilder<TFormTemplate> Provides a fluent builder syntax to configure Chameleon Forms. Inheritance System.Object ChameleonFormsConfigBuilder<TFormTemplate> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Config Assembly : ChameleonForms.dll Syntax public class ChameleonFormsConfigBuilder<TFormTemplate> where TFormTemplate : IFormTemplate Type Parameters Name Description TFormTemplate The template type to use Methods | Improve this Doc View Source WithHumanizedLabelTransformer(IStringTransformer) Humanize labels with the given transformer. Use Humanizer.To to access the default Humanizer ones. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithHumanizedLabelTransformer(IStringTransformer transformer) Parameters Type Name Description Humanizer.IStringTransformer transformer Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining Examples builder.WithHumanizedLabelTransformer(To.TitleCase) | Improve this Doc View Source WithoutDateTimeBinding() Turn off model binding of System.DateTime s. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeBinding() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutDateTimeClientModelValidation() Turn off client model validation of System.DateTime s. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeClientModelValidation() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutEnumListBinding() Turn off model binding of enum lists. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutEnumListBinding() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutFlagsEnumBinding() Turn off model binding of flag enums. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutFlagsEnumBinding() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutHumanizedLabels() Turn off humanized labels. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutHumanizedLabels() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutIntegralClientModelValidation() Turn off client model validation of integral numerics. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutIntegralClientModelValidation() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutTemplateTypeRegistration() Don't register the template type with the Microsoft.Extensions.DependencyInjection.ServiceCollection . Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutTemplateTypeRegistration() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining | Improve this Doc View Source WithoutUriBinding() Turn off model binding of System.Uri s. Declaration public ChameleonFormsConfigBuilder<TFormTemplate> WithoutUriBinding() Returns Type Description ChameleonFormsConfigBuilder <TFormTemplate> The builder to allow fluent method chaining Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Config.html": {
    "href": "apidocs/ChameleonForms.Config.html",
    "title": "Namespace ChameleonForms.Config | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Config Classes ChameleonFormsConfigBuilder<TFormTemplate> Provides a fluent builder syntax to configure Chameleon Forms."
  },
  "apidocs/ChameleonForms.Constants.html": {
    "href": "apidocs/ChameleonForms.Constants.html",
    "title": "Class Constants | ChameleonForms",
    "keywords": "Class Constants Global ChameleonForms constants. Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public static class Constants Fields | Improve this Doc View Source ViewDataFieldKey The key that is used to stash a ChameleonForm Field<TModel> within ViewData. Declaration public const string ViewDataFieldKey = \"ChameleonForms_Field\" Field Value Type Description System.String | Improve this Doc View Source ViewDataFormKey The key that is used to stash a ChameleonForm Form<TModel> within ViewData. Declaration public const string ViewDataFormKey = \"ChameleonForms_Form\" Field Value Type Description System.String | Improve this Doc View Source ViewDataMessageKey The key that is used to stash a ChameleonForm Message<TModel> within ViewData. Declaration public const string ViewDataMessageKey = \"ChameleonForms_Message\" Field Value Type Description System.String | Improve this Doc View Source ViewDataNavigationKey The key that is used to stash a ChameleonForm Navigation<TModel> within ViewData. Declaration public const string ViewDataNavigationKey = \"ChameleonForms_Navigation\" Field Value Type Description System.String | Improve this Doc View Source ViewDataSectionKey The key that is used to stash a ChameleonForm Form<TModel> within ViewData. Declaration public const string ViewDataSectionKey = \"ChameleonForms_Section\" Field Value Type Description System.String"
  },
  "apidocs/ChameleonForms.Enums.EncType.html": {
    "href": "apidocs/ChameleonForms.Enums.EncType.html",
    "title": "Enum EncType | ChameleonForms",
    "keywords": "Enum EncType Representation of the different form encoding types. Use .Humanize() to get the enc type for output. Namespace : ChameleonForms.Enums Assembly : ChameleonForms.Core.dll Syntax public enum EncType Fields Name Description Multipart Multipart Plain Plain text UrlEncoded URL encoded Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Enums.FieldDisplayType.html": {
    "href": "apidocs/ChameleonForms.Enums.FieldDisplayType.html",
    "title": "Enum FieldDisplayType | ChameleonForms",
    "keywords": "Enum FieldDisplayType The display type for a field control. Namespace : ChameleonForms.Enums Assembly : ChameleonForms.Core.dll Syntax public enum FieldDisplayType Fields Name Description Checkbox Display the field as a single checkbox control. Custom Display the field as a custom control. Default The default display type for the field control. DropDown Display the field as a drop-down control. FileUpload Display the field as a file upload control. List Display the field as a list of checkboxes or radio button controls. MultiLineText Display the field as a multi-line text input control. SingleLineText Display the field as a single line text input control. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Enums.html": {
    "href": "apidocs/ChameleonForms.Enums.html",
    "title": "Namespace ChameleonForms.Enums | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Enums Enums EncType Representation of the different form encoding types. Use .Humanize() to get the enc type for output. FieldDisplayType The display type for a field control. MessageType Types of messages that can be displayed to the user TextInputType The different types of <input /> fields."
  },
  "apidocs/ChameleonForms.Enums.MessageType.html": {
    "href": "apidocs/ChameleonForms.Enums.MessageType.html",
    "title": "Enum MessageType | ChameleonForms",
    "keywords": "Enum MessageType Types of messages that can be displayed to the user Namespace : ChameleonForms.Enums Assembly : ChameleonForms.Core.dll Syntax public enum MessageType Fields Name Description Action User action required. Failure Action failed. Information Informational message. Success Action successful. Warning Warning message. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Enums.TextInputType.html": {
    "href": "apidocs/ChameleonForms.Enums.TextInputType.html",
    "title": "Enum TextInputType | ChameleonForms",
    "keywords": "Enum TextInputType The different types of <input /> fields. Namespace : ChameleonForms.Enums Assembly : ChameleonForms.Core.dll Syntax public enum TextInputType Fields Name Description Email <input type=\"email\" /> File <input type=\"file\" /> Number <input type=\"number\" /> Password <input type=\"password\" /> Text <input type=\"text\" /> Url <input type=\"url\" /> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Extensions.html": {
    "href": "apidocs/ChameleonForms.Extensions.html",
    "title": "Class Extensions | ChameleonForms",
    "keywords": "Class Extensions Extension methods used by ChameleonForms. Inheritance System.Object Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.Core.dll Syntax public static class Extensions Methods | Improve this Doc View Source Attrs(IHtmlHelper, Func<Object, Object>[]) Shortcut to tersely create HtmlAttributes object from the HTML Helper. Declaration public static HtmlAttributes Attrs(this IHtmlHelper helper, params Func<object, object>[] attrs) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The HTML helper System.Func < System.Object , System.Object >[] attrs Any attributes you want to define in attr_name => attr_value format Returns Type Description HtmlAttributes A HtmlAttributes object that can be used to chain methods to further specify attributes | Improve this Doc View Source ToHtml(String) Converts a string to an encoded Microsoft.AspNetCore.Html.IHtmlContent . Declaration public static IHtmlContent ToHtml(this string content) Parameters Type Name Description System.String content The content to encode and turn into an IHtmlContent Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The IHtmlContent"
  },
  "apidocs/ChameleonForms.FieldGenerators.DefaultFieldGenerator-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.DefaultFieldGenerator-2.html",
    "title": "Class DefaultFieldGenerator<TModel, T> | ChameleonForms",
    "keywords": "Class DefaultFieldGenerator<TModel, T> The default field HTML generator. Inheritance System.Object DefaultFieldGenerator<TModel, T> Implements IFieldGenerator <TModel, T> IFieldGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators Assembly : ChameleonForms.dll Syntax public class DefaultFieldGenerator<TModel, T> : IFieldGenerator<TModel, T>, IFieldGenerator Type Parameters Name Description TModel The type of the view model for the form T The type of the field being generated Constructors | Improve this Doc View Source DefaultFieldGenerator(IHtmlHelper<TModel>, Expression<Func<TModel, T>>, IFormTemplate) Constructs the field generator. Declaration public DefaultFieldGenerator(IHtmlHelper<TModel> htmlHelper, Expression<Func<TModel, T>> fieldProperty, IFormTemplate template) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> htmlHelper The HTML helper for the current view System.Linq.Expressions.Expression < System.Func <TModel, T>> fieldProperty Expression to identify the property to generate the field for IFormTemplate template The template being used to output the form Properties | Improve this Doc View Source FieldProperty The expression that identifies the property in the model being output. Declaration public Expression<Func<TModel, T>> FieldProperty { get; } Property Value Type Description System.Linq.Expressions.Expression < System.Func <TModel, T>> | Improve this Doc View Source HtmlHelper A HTML helper for the model. Declaration public IHtmlHelper<TModel> HtmlHelper { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> | Improve this Doc View Source Metadata The metadata for the form field. Declaration public ModelMetadata Metadata { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source Template The form template that will be used to render the form. Declaration public IFormTemplate Template { get; } Property Value Type Description IFormTemplate Methods | Improve this Doc View Source GetCustomAttributes() Returns any custom attributes against the field being generated. Declaration public IEnumerable<Attribute> GetCustomAttributes() Returns Type Description System.Collections.Generic.IEnumerable < System.Attribute > The attributes | Improve this Doc View Source GetFieldDisplayName() Returns the displayable name of the field being generated. Declaration public string GetFieldDisplayName() Returns Type Description System.String The id | Improve this Doc View Source GetFieldHtml(IFieldConfiguration) Creates the HTML for the field control after preparing the given field configuration. Declaration public IHtmlContent GetFieldHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field control | Improve this Doc View Source GetFieldHtml(IReadonlyFieldConfiguration) Creates the HTML for the field control. Declaration public IHtmlContent GetFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field control | Improve this Doc View Source GetFieldId() Returns the id of the field being generated. Declaration public string GetFieldId() Returns Type Description System.String The id | Improve this Doc View Source GetLabelHtml(IFieldConfiguration) Creates the HTML for the field label after preparing the given field configuration. Declaration public IHtmlContent GetLabelHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field label | Improve this Doc View Source GetLabelHtml(IReadonlyFieldConfiguration) Creates the HTML for the field label. Declaration public IHtmlContent GetLabelHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field label | Improve this Doc View Source GetModel() Returns a model with the current values for the form. Declaration public TModel GetModel() Returns Type Description TModel The current model | Improve this Doc View Source GetValidationHtml(IFieldConfiguration) Creates the HTML for the field's validation messages after preparing the given field configuration. Declaration public IHtmlContent GetValidationHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field's validation messages | Improve this Doc View Source GetValidationHtml(IReadonlyFieldConfiguration) Creates the HTML for the field's validation messages Declaration public IHtmlContent GetValidationHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field's validation messages | Improve this Doc View Source GetValue() Returns the current value of the field. Declaration public T GetValue() Returns Type Description T The current field value | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration, FieldParent) Turns the given IFieldConfiguration into a FieldConfiguration ready to use for generating the form field. Declaration public IReadonlyFieldConfiguration PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration, FieldParent fieldParent) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify FieldParent fieldParent The parent component of the field Returns Type Description IReadonlyFieldConfiguration The readonly field configuration; ready for generating the form field Implements IFieldGenerator<TModel, T> IFieldGenerator Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) FieldGeneratorExtensions.HasMultipleValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.HasMultipleEnumValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.HasEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.GetEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsSelected<TModel, T>(IFieldGenerator<TModel, T>, Object) FieldGeneratorExtensions.GetUnderlyingType<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsNumeric<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsIntegralNumber<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsFloatingNumber<TModel, T>(IFieldGenerator<TModel, T>)"
  },
  "apidocs/ChameleonForms.FieldGenerators.FieldGeneratorExtensions.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.FieldGeneratorExtensions.html",
    "title": "Class FieldGeneratorExtensions | ChameleonForms",
    "keywords": "Class FieldGeneratorExtensions Extension methods for IFieldGenerator . Inheritance System.Object FieldGeneratorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators Assembly : ChameleonForms.dll Syntax public static class FieldGeneratorExtensions Fields | Improve this Doc View Source FloatingTypes List of floating-pint types. Declaration public static readonly HashSet<Type> FloatingTypes Field Value Type Description System.Collections.Generic.HashSet < System.Type > | Improve this Doc View Source IntTypes List of integral types. Declaration public static readonly HashSet<Type> IntTypes Field Value Type Description System.Collections.Generic.HashSet < System.Type > | Improve this Doc View Source NumericTypes List of all numeric types. Declaration public static readonly HashSet<Type> NumericTypes Field Value Type Description System.Collections.Generic.HashSet < System.Type > Methods | Improve this Doc View Source GetEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) Returns the enumerated values of a field that is an System.Collections.Generic.IEnumerable<T> . Declaration public static IEnumerable<object> GetEnumerableValues<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The enumerated values of the field Type Parameters Name Description TModel T | Improve this Doc View Source GetUnderlyingType<TModel, T>(IFieldGenerator<TModel, T>) Returns the underlying type of the field - unwrapping System.Nullable<T> and System.Collections.Generic.IEnumerable<T> and IEnumerable<Nullable<T>>. Declaration public static Type GetUnderlyingType<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field Returns Type Description System.Type The underlying type of the field Type Parameters Name Description TModel T | Improve this Doc View Source HasEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field represented by the field generator is an enumerable list that allows multiple values. i.e. whether or not the field is an System.Collections.Generic.IEnumerable<T> Declaration public static bool HasEnumerableValues<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator Returns Type Description System.Boolean Whether or not the field is an System.Collections.Generic.IEnumerable<T> Type Parameters Name Description TModel T | Improve this Doc View Source HasMultipleEnumValues<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field represented by the field generator is an enum that can represent multiple values. i.e. whether or not the field is a flags enum. Declaration public static bool HasMultipleEnumValues<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator Returns Type Description System.Boolean Whether or not the field is a flags enum Type Parameters Name Description TModel T | Improve this Doc View Source HasMultipleValues<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field represented by the field generator allows the user to enter multiple values. Declaration public static bool HasMultipleValues<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator Returns Type Description System.Boolean Whether or not the user can enter multiple values Type Parameters Name Description TModel T | Improve this Doc View Source IsFloatingNumber<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field involves collection of floating-point number values. Declaration public static bool IsFloatingNumber<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field Returns Type Description System.Boolean Whether or not the field involves collection of floating-point number values Type Parameters Name Description TModel T | Improve this Doc View Source IsIntegralNumber<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field involves collection of integral number values. Declaration public static bool IsIntegralNumber<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field Returns Type Description System.Boolean Whether or not the field involves collection of integral number values Type Parameters Name Description TModel T | Improve this Doc View Source IsNumeric<TModel, T>(IFieldGenerator<TModel, T>) Whether or not the field involves collection of numeric values. Declaration public static bool IsNumeric<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field Returns Type Description System.Boolean Whether or not the field involves collection of numeric values Type Parameters Name Description TModel T | Improve this Doc View Source IsSelected<TModel, T>(IFieldGenerator<TModel, T>, Object) Whether or not the given value is present for the field represented by the field generator. Declaration public static bool IsSelected<TModel, T>(this IFieldGenerator<TModel, T> fieldGenerator, object value) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator wrapping the field System.Object value The value to check is selected Returns Type Description System.Boolean Whether or not the value is selected Type Parameters Name Description TModel T"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.BooleanHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.BooleanHandler-2.html",
    "title": "Class BooleanHandler<TModel, T> | ChameleonForms",
    "keywords": "Class BooleanHandler<TModel, T> Generates the HTML for the Field Element of boolean fields as either a single checkbox, a select list or a list of radio buttons. Inheritance System.Object FieldGeneratorHandler <TModel, T> BooleanHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class BooleanHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source BooleanHandler(IFieldGenerator<TModel, T>) Constructor for the Boolean Field Generator Handler. Declaration public BooleanHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.DateTimeHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.DateTimeHandler-2.html",
    "title": "Class DateTimeHandler<TModel, T> | ChameleonForms",
    "keywords": "Class DateTimeHandler<TModel, T> Generates the HTML for the Field Element of datetime fields. Inheritance System.Object FieldGeneratorHandler <TModel, T> DateTimeHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class DateTimeHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source DateTimeHandler(IFieldGenerator<TModel, T>) Constructor for the DateTime Field Generator Handler. Declaration public DateTimeHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.DefaultHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.DefaultHandler-2.html",
    "title": "Class DefaultHandler<TModel, T> | ChameleonForms",
    "keywords": "Class DefaultHandler<TModel, T> Generates the HTML for the Field Element of text input fields - always returns true when asked if it can handle a field. Inheritance System.Object FieldGeneratorHandler <TModel, T> DefaultHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class DefaultHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source DefaultHandler(IFieldGenerator<TModel, T>) Constructor for the Default Field Generator Handler. Declaration public DefaultHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.EnumListHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.EnumListHandler-2.html",
    "title": "Class EnumListHandler<TModel, T> | ChameleonForms",
    "keywords": "Class EnumListHandler<TModel, T> Generates the HTML for the Field Element of enum fields as either a select list or a list of radio buttons. Inheritance System.Object FieldGeneratorHandler <TModel, T> EnumListHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class EnumListHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source EnumListHandler(IFieldGenerator<TModel, T>) Constructor for the Enum Field Generator Handler. Declaration public EnumListHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler-2.html",
    "title": "Class FieldGeneratorHandler<TModel, T> | ChameleonForms",
    "keywords": "Class FieldGeneratorHandler<TModel, T> Base class that contains common logic for implementing field generator handlers. Inheritance System.Object FieldGeneratorHandler<TModel, T> BooleanHandler<TModel, T> DateTimeHandler<TModel, T> DefaultHandler<TModel, T> EnumListHandler<TModel, T> FileHandler<TModel, T> ListHandler<TModel, T> NumberHandler<TModel, T> PasswordHandler<TModel, T> TextAreaHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public abstract class FieldGeneratorHandler<TModel, T> : IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source FieldGeneratorHandler(IFieldGenerator<TModel, T>) Create a field generator handler. Declaration protected FieldGeneratorHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator to use Fields | Improve this Doc View Source FieldGenerator The field generator for the current field. Declaration protected readonly IFieldGenerator<TModel, T> FieldGenerator Field Value Type Description IFieldGenerator <TModel, T> Methods | Improve this Doc View Source AdjustHtmlForModelState(HtmlAttributes) Adjust the HTML attributes of a field based on the state of the model for that field. e.g. add validation attributes and error attributes. Declaration protected void AdjustHtmlForModelState(HtmlAttributes attrs) Parameters Type Name Description HtmlAttributes attrs The attributes to modify | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public abstract bool CanHandle() Returns Type Description System.Boolean | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public abstract IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public abstract FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control | Improve this Doc View Source GetFieldName() The value to use for the full HTML name of the field. Declaration protected string GetFieldName() Returns Type Description System.String The full HTML name of the field | Improve this Doc View Source GetInputHtml(TextInputType, IReadonlyFieldConfiguration) Returns HTML for an <input> HTML element. Declaration protected IHtmlContent GetInputHtml(TextInputType inputType, IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description TextInputType inputType The type of input to produce IReadonlyFieldConfiguration fieldConfiguration The field configuration to use for attributes and format string Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML of the input element | Improve this Doc View Source GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) Returns the HTML of a <select> list element. Automatically adds an empty item where appropriate. Declaration protected IHtmlContent GetSelectListHtml(IEnumerable<SelectListItem> selectList, IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Mvc.Rendering.SelectListItem > selectList The list of items to choose from in the select list IReadonlyFieldConfiguration fieldConfiguration The field configuration to use for attributes and empty item configuration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public virtual void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.FileHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.FileHandler-2.html",
    "title": "Class FileHandler<TModel, T> | ChameleonForms",
    "keywords": "Class FileHandler<TModel, T> Generates the HTML for the Field Element of file upload fields. Inheritance System.Object FieldGeneratorHandler <TModel, T> FileHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class FileHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source FileHandler(IFieldGenerator<TModel, T>) Constructor for the File Field Generator Handler. Declaration public FileHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.html",
    "title": "Namespace ChameleonForms.FieldGenerators.Handlers | ChameleonForms",
    "keywords": "Namespace ChameleonForms.FieldGenerators.Handlers Classes BooleanHandler<TModel, T> Generates the HTML for the Field Element of boolean fields as either a single checkbox, a select list or a list of radio buttons. DateTimeHandler<TModel, T> Generates the HTML for the Field Element of datetime fields. DefaultHandler<TModel, T> Generates the HTML for the Field Element of text input fields - always returns true when asked if it can handle a field. EnumListHandler<TModel, T> Generates the HTML for the Field Element of enum fields as either a select list or a list of radio buttons. FieldGeneratorHandler<TModel, T> Base class that contains common logic for implementing field generator handlers. FileHandler<TModel, T> Generates the HTML for the Field Element of file upload fields. ListHandler<TModel, T> Generates the HTML for the Field Element of list fields as either a select list or a list of radio buttons. ListPropertyNullException Exception for when the list property for an [ExistsIn] is null. ModelNullException Exception that denotes the model in the page is null when it was needed. NumberHandler<TModel, T> Generates the HTML for the Field Element of text input fields - always returns true when asked if it can handle a field. PasswordHandler<TModel, T> Generates the HTML for the Field Element of password fields. TextAreaHandler<TModel, T> Generates the HTML for the Field Element of textarea fields. Interfaces IFieldGeneratorHandler<TModel, T> A Field Generator Handler is responsible for generating the HTML for a Field Element of a particular type of field."
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler-2.html",
    "title": "Interface IFieldGeneratorHandler<TModel, T> | ChameleonForms",
    "keywords": "Interface IFieldGeneratorHandler<TModel, T> A Field Generator Handler is responsible for generating the HTML for a Field Element of a particular type of field. Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.Core.dll Syntax public interface IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration bool CanHandle() Returns Type Description System.Boolean | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.ListHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.ListHandler-2.html",
    "title": "Class ListHandler<TModel, T> | ChameleonForms",
    "keywords": "Class ListHandler<TModel, T> Generates the HTML for the Field Element of list fields as either a select list or a list of radio buttons. Inheritance System.Object FieldGeneratorHandler <TModel, T> ListHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class ListHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source ListHandler(IFieldGenerator<TModel, T>) Constructor for the List Field Generator Handler. Declaration public ListHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.ListPropertyNullException.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.ListPropertyNullException.html",
    "title": "Class ListPropertyNullException | ChameleonForms",
    "keywords": "Class ListPropertyNullException Exception for when the list property for an [ExistsIn] is null. Inheritance System.Object System.Exception ListPropertyNullException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class ListPropertyNullException : Exception, ISerializable Constructors | Improve this Doc View Source ListPropertyNullException(String, String) Creates a ListPropertyNullException . Declaration public ListPropertyNullException(string listPropertyName, string propertyName) Parameters Type Name Description System.String listPropertyName The name of the list property that is null System.String propertyName The name of the property that had the [ExistsIn] pointing to the list property Implements System.Runtime.Serialization.ISerializable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.ModelNullException.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.ModelNullException.html",
    "title": "Class ModelNullException | ChameleonForms",
    "keywords": "Class ModelNullException Exception that denotes the model in the page is null when it was needed. Inheritance System.Object System.Exception ModelNullException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class ModelNullException : Exception, ISerializable Constructors | Improve this Doc View Source ModelNullException(String) Creates a ModelNullException . Declaration public ModelNullException(string propertyName) Parameters Type Name Description System.String propertyName The name of the property that had the [ExistsIn] pointing to the list property Implements System.Runtime.Serialization.ISerializable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.NumberHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.NumberHandler-2.html",
    "title": "Class NumberHandler<TModel, T> | ChameleonForms",
    "keywords": "Class NumberHandler<TModel, T> Generates the HTML for the Field Element of text input fields - always returns true when asked if it can handle a field. Inheritance System.Object FieldGeneratorHandler <TModel, T> NumberHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class NumberHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source NumberHandler(IFieldGenerator<TModel, T>) Constructor for the Default Field Generator Handler. Declaration public NumberHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.PasswordHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.PasswordHandler-2.html",
    "title": "Class PasswordHandler<TModel, T> | ChameleonForms",
    "keywords": "Class PasswordHandler<TModel, T> Generates the HTML for the Field Element of password fields. Inheritance System.Object FieldGeneratorHandler <TModel, T> PasswordHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class PasswordHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source PasswordHandler(IFieldGenerator<TModel, T>) Constructor for the Password Field Generator Handler. Declaration public PasswordHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.Handlers.TextAreaHandler-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.Handlers.TextAreaHandler-2.html",
    "title": "Class TextAreaHandler<TModel, T> | ChameleonForms",
    "keywords": "Class TextAreaHandler<TModel, T> Generates the HTML for the Field Element of textarea fields. Inheritance System.Object FieldGeneratorHandler <TModel, T> TextAreaHandler<TModel, T> Implements IFieldGeneratorHandler <TModel, T> Inherited Members FieldGeneratorHandler<TModel, T>.FieldGenerator FieldGeneratorHandler<TModel, T>.CanHandle() FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(IFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetDisplayType(IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetInputHtml(TextInputType, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetSelectListHtml(IEnumerable<SelectListItem>, IReadonlyFieldConfiguration) FieldGeneratorHandler<TModel, T>.GetFieldName() FieldGeneratorHandler<TModel, T>.AdjustHtmlForModelState(HtmlAttributes) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.FieldGenerators.Handlers Assembly : ChameleonForms.dll Syntax public class TextAreaHandler<TModel, T> : FieldGeneratorHandler<TModel, T>, IFieldGeneratorHandler<TModel, T> Type Parameters Name Description TModel The type of the model the form is being output for T The type of the property in the model that the specific field is being output for Constructors | Improve this Doc View Source TextAreaHandler(IFieldGenerator<TModel, T>) Constructor for the TextArea Field Generator Handler. Declaration public TextAreaHandler(IFieldGenerator<TModel, T> fieldGenerator) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The field generator for the field Methods | Improve this Doc View Source CanHandle() Whether or not the current field can be output using this field generator handler. Declaration public override bool CanHandle() Returns Type Description System.Boolean Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.CanHandle() | Improve this Doc View Source GenerateFieldHtml(IReadonlyFieldConfiguration) Generate the HTML for the current field's Field Element using this handler. Declaration public override IHtmlContent GenerateFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The field configuration to use to generate the HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the Field Element Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GenerateFieldHtml(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source GetDisplayType(IReadonlyFieldConfiguration) The type of control the field will be displayed as. Declaration public override FieldDisplayType GetDisplayType(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration The configuration for the field Returns Type Description FieldDisplayType The display type of the field control Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.GetDisplayType(ChameleonForms.Component.Config.IReadonlyFieldConfiguration) | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration) Modify the field configuration for the field using this field generator handler. Declaration public override void PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify Overrides ChameleonForms.FieldGenerators.Handlers.FieldGeneratorHandler<TModel, T>.PrepareFieldConfiguration(ChameleonForms.Component.Config.IFieldConfiguration) Implements IFieldGeneratorHandler<TModel, T> Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.html",
    "title": "Namespace ChameleonForms.FieldGenerators | ChameleonForms",
    "keywords": "Namespace ChameleonForms.FieldGenerators Classes DefaultFieldGenerator<TModel, T> The default field HTML generator. FieldGeneratorExtensions Extension methods for IFieldGenerator . Interfaces IFieldGenerator Generates the HTML for a single form field. IFieldGenerator<TModel, T> Generates the HTML for a single form field."
  },
  "apidocs/ChameleonForms.FieldGenerators.IFieldGenerator.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.IFieldGenerator.html",
    "title": "Interface IFieldGenerator | ChameleonForms",
    "keywords": "Interface IFieldGenerator Generates the HTML for a single form field. Namespace : ChameleonForms.FieldGenerators Assembly : ChameleonForms.Core.dll Syntax public interface IFieldGenerator Properties | Improve this Doc View Source Metadata The metadata for the form field. Declaration ModelMetadata Metadata { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source Template The form template that will be used to render the form. Declaration IFormTemplate Template { get; } Property Value Type Description IFormTemplate Methods | Improve this Doc View Source GetFieldHtml(IFieldConfiguration) Creates the HTML for the field control after preparing the given field configuration. Declaration IHtmlContent GetFieldHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field control | Improve this Doc View Source GetFieldHtml(IReadonlyFieldConfiguration) Creates the HTML for the field control. Declaration IHtmlContent GetFieldHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field control | Improve this Doc View Source GetFieldId() Returns the id of the field being generated. Declaration string GetFieldId() Returns Type Description System.String The id | Improve this Doc View Source GetLabelHtml(IFieldConfiguration) Creates the HTML for the field label after preparing the given field configuration. Declaration IHtmlContent GetLabelHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field label | Improve this Doc View Source GetLabelHtml(IReadonlyFieldConfiguration) Creates the HTML for the field label. Declaration IHtmlContent GetLabelHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field label | Improve this Doc View Source GetValidationHtml(IFieldConfiguration) Creates the HTML for the field's validation messages after preparing the given field configuration. Declaration IHtmlContent GetValidationHtml(IFieldConfiguration fieldConfiguration) Parameters Type Name Description IFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field's validation messages | Improve this Doc View Source GetValidationHtml(IReadonlyFieldConfiguration) Creates the HTML for the field's validation messages Declaration IHtmlContent GetValidationHtml(IReadonlyFieldConfiguration fieldConfiguration) Parameters Type Name Description IReadonlyFieldConfiguration fieldConfiguration Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field's validation messages | Improve this Doc View Source PrepareFieldConfiguration(IFieldConfiguration, FieldParent) Turns the given IFieldConfiguration into a FieldConfiguration ready to use for generating the form field. Declaration IReadonlyFieldConfiguration PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration, FieldParent fieldParent) Parameters Type Name Description IFieldConfiguration fieldConfiguration The field configuration to modify FieldParent fieldParent The parent component of the field Returns Type Description IReadonlyFieldConfiguration The readonly field configuration; ready for generating the form field Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.FieldGenerators.IFieldGenerator-2.html": {
    "href": "apidocs/ChameleonForms.FieldGenerators.IFieldGenerator-2.html",
    "title": "Interface IFieldGenerator<TModel, T> | ChameleonForms",
    "keywords": "Interface IFieldGenerator<TModel, T> Generates the HTML for a single form field. Inherited Members IFieldGenerator.Metadata IFieldGenerator.Template IFieldGenerator.PrepareFieldConfiguration(IFieldConfiguration, FieldParent) IFieldGenerator.GetFieldHtml(IReadonlyFieldConfiguration) IFieldGenerator.GetLabelHtml(IReadonlyFieldConfiguration) IFieldGenerator.GetValidationHtml(IReadonlyFieldConfiguration) IFieldGenerator.GetFieldHtml(IFieldConfiguration) IFieldGenerator.GetLabelHtml(IFieldConfiguration) IFieldGenerator.GetValidationHtml(IFieldConfiguration) IFieldGenerator.GetFieldId() Namespace : ChameleonForms.FieldGenerators Assembly : ChameleonForms.Core.dll Syntax public interface IFieldGenerator<TModel, T> : IFieldGenerator Type Parameters Name Description TModel T Properties | Improve this Doc View Source FieldProperty The expression that identifies the property in the model being output. Declaration Expression<Func<TModel, T>> FieldProperty { get; } Property Value Type Description System.Linq.Expressions.Expression < System.Func <TModel, T>> | Improve this Doc View Source HtmlHelper A HTML helper for the model. Declaration IHtmlHelper<TModel> HtmlHelper { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> Methods | Improve this Doc View Source GetCustomAttributes() Returns any custom attributes against the field being generated. Declaration IEnumerable<Attribute> GetCustomAttributes() Returns Type Description System.Collections.Generic.IEnumerable < System.Attribute > The attributes | Improve this Doc View Source GetFieldDisplayName() Returns the displayable name of the field being generated. Declaration string GetFieldDisplayName() Returns Type Description System.String The id | Improve this Doc View Source GetModel() Returns a model with the current values for the form. Declaration TModel GetModel() Returns Type Description TModel The current model | Improve this Doc View Source GetValue() Returns the current value of the field. Declaration T GetValue() Returns Type Description T The current field value Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) FieldGeneratorExtensions.HasMultipleValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.HasMultipleEnumValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.HasEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.GetEnumerableValues<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsSelected<TModel, T>(IFieldGenerator<TModel, T>, Object) FieldGeneratorExtensions.GetUnderlyingType<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsNumeric<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsIntegralNumber<TModel, T>(IFieldGenerator<TModel, T>) FieldGeneratorExtensions.IsFloatingNumber<TModel, T>(IFieldGenerator<TModel, T>)"
  },
  "apidocs/ChameleonForms.Form-1.html": {
    "href": "apidocs/ChameleonForms.Form-1.html",
    "title": "Class Form<TModel> | ChameleonForms",
    "keywords": "Class Form<TModel> Default Chameleon Form implementation. Inheritance System.Object Form<TModel> Implements IForm <TModel> IForm System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public class Form<TModel> : IForm<TModel>, IForm, IDisposable Type Parameters Name Description TModel Constructors | Improve this Doc View Source Form(IHtmlHelper<TModel>, IFormTemplate, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) Construct a Chameleon Form. Note: Contains a call to the virtual method Write. Declaration public Form(IHtmlHelper<TModel> helper, IFormTemplate template, string action, FormMethod method, HtmlAttributes htmlAttributes, EncType? enctype, bool? outputAntiforgeryToken) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The HTML Helper for the current view IFormTemplate template A template renderer instance to use to render the form System.String action The action the form should submit to Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The HTTP method the form submission should use HtmlAttributes htmlAttributes Any HTML attributes the form should use expressed as an anonymous object System.Nullable < EncType > enctype The encoding type the form submission should use System.Nullable < System.Boolean > outputAntiforgeryToken Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET Properties | Improve this Doc View Source HtmlHelper The HTML helper for the current view. Declaration public IHtmlHelper<TModel> HtmlHelper { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> | Improve this Doc View Source Template The template renderer for the current view. Declaration public IFormTemplate Template { get; } Property Value Type Description IFormTemplate Methods | Improve this Doc View Source CreatePartialForm(IHtmlHelper<TModel>) Returns a wrapped ChameleonForms.PartialViewForm`1 for the given partial view helper. Declaration public IForm<TModel> CreatePartialForm(IHtmlHelper<TModel> partialViewHelper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> partialViewHelper The HTML Helper from the partial view Returns Type Description IForm <TModel> The PartialViewForm wrapping the original form | Improve this Doc View Source CreatePartialForm<TPartialModel>(LambdaExpression, IHtmlHelper<TPartialModel>) Returns a wrapped ChameleonForms.PartialViewForm`2 for the given partial view information. Declaration public IForm<TPartialModel> CreatePartialForm<TPartialModel>(LambdaExpression partialModelExpression, IHtmlHelper<TPartialModel> partialViewHelper) Parameters Type Name Description System.Linq.Expressions.LambdaExpression partialModelExpression The expression that identifies the partial model Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TPartialModel> partialViewHelper The HTML Helper from the partial view Returns Type Description IForm <TPartialModel> The PartialViewForm wrapping the original form Type Parameters Name Description TPartialModel The model type of the partial view | Improve this Doc View Source Dispose() Called when form is created within a using block: writes the end tag of the form. Declaration public void Dispose() | Improve this Doc View Source GetFieldGenerator<T>(Expression<Func<TModel, T>>) The field generator for the given field. Declaration public virtual IFieldGenerator GetFieldGenerator<T>(Expression<Func<TModel, T>> property) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, T>> property The property to return the field generator for Returns Type Description IFieldGenerator Type Parameters Name Description T | Improve this Doc View Source Write(IHtmlContent) Writes a HTML String directly to the view's output. Declaration public virtual void Write(IHtmlContent htmlContent) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent htmlContent The HTML to write to the view's output Implements IForm<TModel> IForm System.IDisposable Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) ChameleonFormExtensions.PartialForAsync<TModel, TPartialModel>(IForm<TModel>, Expression<Func<TModel, TPartialModel>>, String) FieldExtensions.FieldElementFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.LabelFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.ValidationMessageFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, String) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, IHtmlContent) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, Func<Object, IHtmlContent>) NavigationExtensions.BeginNavigation<TModel>(IForm<TModel>) SectionExtensions.BeginSection<TModel>(IForm<TModel>, String, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes)"
  },
  "apidocs/ChameleonForms.html": {
    "href": "apidocs/ChameleonForms.html",
    "title": "Namespace ChameleonForms | ChameleonForms",
    "keywords": "Namespace ChameleonForms Classes ChameleonFormExtensions Default extension methods for Form<TModel> . Constants Global ChameleonForms constants. Extensions Extension methods used by ChameleonForms. Form<TModel> Default Chameleon Form implementation. HtmlAttributes Represents a set of HTML attributes. HtmlAttributesExtensions Extension methods for the HtmlAttributes class. HtmlHelperExtensions Extension methods against HtmlHelper. HumanizedLabelsDisplayMetadataProvider Data Annotations Model Metadata Provider that transforms camel-case view model property names to sentence case for their display name unless the display name has already been overriden. LazyHtmlAttributes HtmlAttributes class that evaluates a given HTML generator when .ToHtmlString() is called. ServiceCollectionExtensions Extension methods for Microsoft.Extensions.DependencyInjection.IServiceCollection . Interfaces IForm Interface for a modeless cast of a Chameleon Form. IForm<TModel> Interface for a Chameleon Form."
  },
  "apidocs/ChameleonForms.HtmlAttributes.html": {
    "href": "apidocs/ChameleonForms.HtmlAttributes.html",
    "title": "Class HtmlAttributes | ChameleonForms",
    "keywords": "Class HtmlAttributes Represents a set of HTML attributes. Inheritance System.Object HtmlAttributes LazyHtmlAttributes Implements Microsoft.AspNetCore.Html.IHtmlContent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.Core.dll Syntax public class HtmlAttributes : IHtmlContent Constructors | Improve this Doc View Source HtmlAttributes(IDictionary<String, Object>) Constructs a HtmlAttributes object using a dictionary to express the attributes. Declaration public HtmlAttributes(IDictionary<string, object> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > attributes A dictionary of attributes Examples var h = new HtmlAttributes(new Dictionary<string, object> {{\"style\", \"width: 100%;\"}, {\"cellpadding\", 0}, {\"class\", \"class1 class2\"}, {\"src\", \"http://url/\"}, {\"data-somedata\", \"&quot;rubbi&h&quot;\"}}); | Improve this Doc View Source HtmlAttributes(IDictionary<String, String>) Constructs a HtmlAttributes object using a dictionary to express the attributes. Declaration public HtmlAttributes(IDictionary<string, string> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > attributes A dictionary of attributes Examples var h = new HtmlAttributes(new Dictionary<string, string> {{\"style\", \"width: 100%;\"}, {\"cellpadding\", \"0\"}, {\"class\", \"class1 class2\"}, {\"src\", \"http://url/\"}, {\"data-somedata\", \"&quot;rubbi&h&quot;\"}}); | Improve this Doc View Source HtmlAttributes(Func<Object, Object>[]) Constructs a HtmlAttributes object using lambda methods to express the attributes. Declaration public HtmlAttributes(params Func<object, object>[] attributes) Parameters Type Name Description System.Func < System.Object , System.Object >[] attributes A list of lambas where the lambda variable name is the name of the attribute and the value is the value Examples var h = new HtmlAttributes(style => \"width: 100%;\", cellpadding => 0, @class => \"class1 class2\", src => \"http://url/\", data_somedata => \"&quot;rubbi&h&quot;\"); | Improve this Doc View Source HtmlAttributes(Object) Constructs a HtmlAttributes object using an anonymous object to express the attributes. Declaration public HtmlAttributes(object attributes) Parameters Type Name Description System.Object attributes An anonymous object of attributes Examples var h = new HtmlAttributes(new { style = \"width: 100%;\", cellpadding = 0, @class = \"class1 class2\", src = \"http://url/\", data_somedata = \"&quot;rubbi&h&quot;\" }); Properties | Improve this Doc View Source Attributes Dictionary of the attributes currently stored in the object. Declaration public IDictionary<string, string> Attributes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source AddClass(String) Adds a CSS class (or a number of CSS classes) to the attributes. Declaration public HtmlAttributes AddClass(string class) Parameters Type Name Description System.String class The CSS class(es) to add Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Attr(Func<Object, Object>) Adds or updates a HTML attribute with using a lambda method to express the attribute. Declaration public HtmlAttributes Attr(Func<object, object> attribute) Parameters Type Name Description System.Func < System.Object , System.Object > attribute A lambda expression representing the attribute to set and its value Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining Examples h.Attr(style => \"width: 100%;\") | Improve this Doc View Source Attr(String, Object) Adds or updates a HTML attribute with a given value. Declaration public HtmlAttributes Attr(string key, object value) Parameters Type Name Description System.String key The name of the HTML attribute to add/update System.Object value The value of the HTML attribute to add/update Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, Object>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration public HtmlAttributes Attrs(IDictionary<string, object> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > attributes A dictionary of attributes Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Attrs(IDictionary<String, String>) Adds or updates a set of HTML attributes using a dictionary to express the attributes. Declaration public HtmlAttributes Attrs(IDictionary<string, string> attributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > attributes A dictionary of attributes Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Attrs(Func<Object, Object>[]) Adds or updates a set of HTML attributes using lambda methods to express the attributes. Declaration public HtmlAttributes Attrs(params Func<object, object>[] attributes) Parameters Type Name Description System.Func < System.Object , System.Object >[] attributes A list of lambas where the lambda variable name is the name of the attribute and the value is the value Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Attrs(Object) Adds or updates a set of HTML attributes using anonymous objects to express the attributes. Declaration public HtmlAttributes Attrs(object attributes) Parameters Type Name Description System.Object attributes An anonymous object of attributes Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Disabled(Boolean) Sets the disabled attribute. Declaration public HtmlAttributes Disabled(bool disabled = true) Parameters Type Name Description System.Boolean disabled Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Has(String) Returns whether or not a value is set for the given attribute. Declaration public bool Has(string key) Parameters Type Name Description System.String key The name of the HTML attribute to check Returns Type Description System.Boolean Whether or not there is a value set for the attribute | Improve this Doc View Source Id(String) Set the id attribute. Declaration public HtmlAttributes Id(string id) Parameters Type Name Description System.String id The text to use for the id Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Readonly(Boolean) Sets the readonly attribute. Declaration public HtmlAttributes Readonly(bool readonly = true) Parameters Type Name Description System.Boolean readonly Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source Required(Boolean) Sets the required attribute. Declaration public HtmlAttributes Required(bool required = true) Parameters Type Name Description System.Boolean required Returns Type Description HtmlAttributes The HtmlAttributes attribute to allow for method chaining | Improve this Doc View Source ToDictionary() Returns the HTML attributes as a dictionary. Declaration public IDictionary<string, object> ToDictionary() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > A dictionary of HTML attributes compatible with the standard ASP.NET MVC method signatures | Improve this Doc View Source WriteTo(TextWriter, HtmlEncoder) Called when form component outputted to the page; writes the form content HTML to the given writer. Declaration public virtual void WriteTo(TextWriter writer, HtmlEncoder encoder) Parameters Type Name Description System.IO.TextWriter writer The writer to write to System.Text.Encodings.Web.HtmlEncoder encoder The HTML encoder to use when writing Operators | Improve this Doc View Source Implicit(Dictionary<String, Object> to HtmlAttributes) Implicitly convert from a dictionary to a new HtmlAttributes object. Declaration public static implicit operator HtmlAttributes(Dictionary<string, object> attributes) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Object > attributes The dictionary of HTML attributes Returns Type Description HtmlAttributes The new HtmlAttributes object | Improve this Doc View Source Implicit(Dictionary<String, String> to HtmlAttributes) Implicitly convert from a dictionary to a new HtmlAttributes object. Declaration public static implicit operator HtmlAttributes(Dictionary<string, string> attributes) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > attributes The dictionary of HTML attributes Returns Type Description HtmlAttributes The new HtmlAttributes object Implements Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent)"
  },
  "apidocs/ChameleonForms.HtmlAttributesExtensions.html": {
    "href": "apidocs/ChameleonForms.HtmlAttributesExtensions.html",
    "title": "Class HtmlAttributesExtensions | ChameleonForms",
    "keywords": "Class HtmlAttributesExtensions Extension methods for the HtmlAttributes class. Inheritance System.Object HtmlAttributesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.Core.dll Syntax public static class HtmlAttributesExtensions Methods | Improve this Doc View Source ToHtmlAttributes(IDictionary<String, Object>) Explicitly convert a dictionary to a HtmlAttributes class. Declaration public static HtmlAttributes ToHtmlAttributes(this IDictionary<string, object> htmlAttributes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > htmlAttributes A dictionary of HTML attributes Returns Type Description HtmlAttributes A new HtmlAttributes with the attributes | Improve this Doc View Source ToHtmlAttributes(Object) Convert from an anonymous object to a HtmlAttributes class. Declaration public static HtmlAttributes ToHtmlAttributes(this object htmlAttributes) Parameters Type Name Description System.Object htmlAttributes An anonymous object of HTML attributes Returns Type Description HtmlAttributes A new HtmlAttributes with the attributes"
  },
  "apidocs/ChameleonForms.HtmlHelperExtensions.html": {
    "href": "apidocs/ChameleonForms.HtmlHelperExtensions.html",
    "title": "Class HtmlHelperExtensions | ChameleonForms",
    "keywords": "Class HtmlHelperExtensions Extension methods against HtmlHelper. Inheritance System.Object HtmlHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public static class HtmlHelperExtensions Methods | Improve this Doc View Source For<TModel>(IHtmlHelper, TModel, String) Creates a HTML helper based on another HTML helper against a different model type. Declaration public static DisposableHtmlHelper<TModel> For<TModel>(this IHtmlHelper htmlHelper, TModel model = null, string htmlFieldPrefix = null) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper The original HTML helper TModel model An instance of the model type to use as the model System.String htmlFieldPrefix A prefix value to use for field names Returns Type Description DisposableHtmlHelper <TModel> The HTML helper against the other model type Type Parameters Name Description TModel The model type to create a helper for | Improve this Doc View Source For<TParentModel, TChildModel>(IHtmlHelper<TParentModel>, Expression<Func<TParentModel, TChildModel>>, Boolean) Creates a HTML helper from a parent model to use a sub-property as it's model. Declaration public static DisposableHtmlHelper<TChildModel> For<TParentModel, TChildModel>(this IHtmlHelper<TParentModel> helper, Expression<Func<TParentModel, TChildModel>> propertyFor, bool bindFieldsToParent) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TParentModel> helper The parent HTML helper System.Linq.Expressions.Expression < System.Func <TParentModel, TChildModel>> propertyFor The sub-property to use System.Boolean bindFieldsToParent Whether to set field names to bind to the parent model type (true) or the sub-property type (false) Returns Type Description DisposableHtmlHelper <TChildModel> A HTML helper against the sub-property Type Parameters Name Description TParentModel The model of the parent type TChildModel The model of the sub-property to use | Improve this Doc View Source GetChameleonForm<TModel>(IHtmlHelper<TModel>) Returns the current ChameleonForm that is in context for the view. Declaration public static IForm<TModel> GetChameleonForm<TModel>(this IHtmlHelper<TModel> helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The current HTML helper Returns Type Description IForm <TModel> The ChameleonForms Form<TModel> instance Type Parameters Name Description TModel The page model type | Improve this Doc View Source GetChameleonFormsField<TModel>(IHtmlHelper<TModel>) Returns the current ChameleonForms form field that is in context for the view. Declaration public static Field<TModel> GetChameleonFormsField<TModel>(this IHtmlHelper<TModel> helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The current HTML helper Returns Type Description Field <TModel> The ChameleonForms Field<TModel> instance Type Parameters Name Description TModel The page model type | Improve this Doc View Source GetChameleonFormsMessage<TModel>(IHtmlHelper<TModel>) Returns the current ChameleonForms message that is in context for the view. Declaration public static Message<TModel> GetChameleonFormsMessage<TModel>(this IHtmlHelper<TModel> helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The current HTML helper Returns Type Description Message <TModel> The ChameleonForms Message<TModel> instance Type Parameters Name Description TModel The page model type | Improve this Doc View Source GetChameleonFormsNavigation<TModel>(IHtmlHelper<TModel>) Returns the current ChameleonForms navigation that is in context for the view. Declaration public static Navigation<TModel> GetChameleonFormsNavigation<TModel>(this IHtmlHelper<TModel> helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The current HTML helper Returns Type Description Navigation <TModel> The ChameleonForms Navigation<TModel> instance Type Parameters Name Description TModel The page model type | Improve this Doc View Source GetChameleonFormsSection<TModel>(IHtmlHelper<TModel>) Returns the current ChameleonForms form section that is in context for the view. Declaration public static ISection<TModel> GetChameleonFormsSection<TModel>(this IHtmlHelper<TModel> helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> helper The current HTML helper Returns Type Description ISection <TModel> The ChameleonForms Section<TModel> instance Type Parameters Name Description TModel The page model type | Improve this Doc View Source GetDefaultFormTemplate(IHtmlHelper) Gets the registered default form template from RequestServices. Declaration public static IFormTemplate GetDefaultFormTemplate(this IHtmlHelper htmlHelper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper The HTML Helper Returns Type Description IFormTemplate An instance of the default IFormTemplate | Improve this Doc View Source GetFieldName<TModel, TResult>(IHtmlHelper<TModel>, Expression<Func<TModel, TResult>>) Returns the field name for a field in a view model. Declaration public static string GetFieldName<TModel, TResult>(this IHtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TResult>> field) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> htmlHelper The HTML helper System.Linq.Expressions.Expression < System.Func <TModel, TResult>> field The field Returns Type Description System.String The field name Type Parameters Name Description TModel The view model type TResult The field type | Improve this Doc View Source GetFullHtmlFieldName<TModel, TResult>(IHtmlHelper<TModel>, Expression<Func<TModel, TResult>>) Returns the full HTML field name for a field in a view model within the current context / prefix. Declaration public static string GetFullHtmlFieldName<TModel, TResult>(this IHtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TResult>> field) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> htmlHelper The HTML helper System.Linq.Expressions.Expression < System.Func <TModel, TResult>> field The field Returns Type Description System.String The full HTML field name Type Parameters Name Description TModel The view model type TResult The field type | Improve this Doc View Source IsInChameleonForm(IHtmlHelper) Returns whether or not the view is currently within the context of a ChameleonForms form. If this returns true then you can safely call GetChameleonForm<TModel>(IHtmlHelper<TModel>) . Declaration public static bool IsInChameleonForm(this IHtmlHelper helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The current HTML helper Returns Type Description System.Boolean Whether or not there is a ChameleonForms form in context | Improve this Doc View Source IsInChameleonFormsField(IHtmlHelper) Returns whether or not the view is currently within the context of a ChameleonForms form field. If this returns true then you can safely call GetChameleonFormsField<TModel>(IHtmlHelper<TModel>) . Declaration public static bool IsInChameleonFormsField(this IHtmlHelper helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The current HTML helper Returns Type Description System.Boolean Whether or not there is a ChameleonForms form field in context | Improve this Doc View Source IsInChameleonFormsMessage(IHtmlHelper) Returns whether or not the view is currently within the context of a ChameleonForms form message. If this returns true then you can safely call GetChameleonFormsMessage<TModel>(IHtmlHelper<TModel>) . Declaration public static bool IsInChameleonFormsMessage(this IHtmlHelper helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The current HTML helper Returns Type Description System.Boolean Whether or not there is a ChameleonForms form message in context | Improve this Doc View Source IsInChameleonFormsNavigation(IHtmlHelper) Returns whether or not the view is currently within the context of a ChameleonForms form navigation. If this returns true then you can safely call GetChameleonFormsNavigation<TModel>(IHtmlHelper<TModel>) . Declaration public static bool IsInChameleonFormsNavigation(this IHtmlHelper helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The current HTML helper Returns Type Description System.Boolean Whether or not there is a ChameleonForms form navigation in context | Improve this Doc View Source IsInChameleonFormsSection(IHtmlHelper) Returns whether or not the view is currently within the context of a ChameleonForms form section. If this returns true then you can safely call GetChameleonFormsSection<TModel>(IHtmlHelper<TModel>) . Declaration public static bool IsInChameleonFormsSection(this IHtmlHelper helper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper The current HTML helper Returns Type Description System.Boolean Whether or not there is a ChameleonForms form section in context"
  },
  "apidocs/ChameleonForms.HumanizedLabelsDisplayMetadataProvider.html": {
    "href": "apidocs/ChameleonForms.HumanizedLabelsDisplayMetadataProvider.html",
    "title": "Class HumanizedLabelsDisplayMetadataProvider | ChameleonForms",
    "keywords": "Class HumanizedLabelsDisplayMetadataProvider Data Annotations Model Metadata Provider that transforms camel-case view model property names to sentence case for their display name unless the display name has already been overriden. Inheritance System.Object HumanizedLabelsDisplayMetadataProvider Implements Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public class HumanizedLabelsDisplayMetadataProvider : IDisplayMetadataProvider, IMetadataDetailsProvider Constructors | Improve this Doc View Source HumanizedLabelsDisplayMetadataProvider(IStringTransformer) Creates HumanizedLabelsDisplayMetadataProvider . Declaration public HumanizedLabelsDisplayMetadataProvider(IStringTransformer to = null) Parameters Type Name Description Humanizer.IStringTransformer to The string transformer to use when creating display labels Methods | Improve this Doc View Source CreateDisplayMetadata(DisplayMetadataProviderContext) Creates the display metadata for a property that results in humanized labels. Declaration public void CreateDisplayMetadata(DisplayMetadataProviderContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext context The display metadata provider context for the property Implements Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.IForm.html": {
    "href": "apidocs/ChameleonForms.IForm.html",
    "title": "Interface IForm | ChameleonForms",
    "keywords": "Interface IForm Interface for a modeless cast of a Chameleon Form. Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public interface IForm Methods | Improve this Doc View Source CreatePartialForm<TPartialModel>(LambdaExpression, IHtmlHelper<TPartialModel>) Returns a wrapped ChameleonForms.PartialViewForm`2 for the given partial view information. Declaration IForm<TPartialModel> CreatePartialForm<TPartialModel>(LambdaExpression partialModelExpression, IHtmlHelper<TPartialModel> partialViewHelper) Parameters Type Name Description System.Linq.Expressions.LambdaExpression partialModelExpression The expression that identifies the partial model Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TPartialModel> partialViewHelper The HTML Helper from the partial view Returns Type Description IForm <TPartialModel> The PartialViewForm wrapping the original form Type Parameters Name Description TPartialModel The model type of the partial view Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.IForm-1.html": {
    "href": "apidocs/ChameleonForms.IForm-1.html",
    "title": "Interface IForm<TModel> | ChameleonForms",
    "keywords": "Interface IForm<TModel> Interface for a Chameleon Form. Inherited Members IForm.CreatePartialForm<TPartialModel>(LambdaExpression, IHtmlHelper<TPartialModel>) System.IDisposable.Dispose() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public interface IForm<TModel> : IForm, IDisposable Type Parameters Name Description TModel The view model type for the current view Properties | Improve this Doc View Source HtmlHelper The HTML helper for the current view. Declaration IHtmlHelper<TModel> HtmlHelper { get; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> | Improve this Doc View Source Template The template renderer for the current view. Declaration IFormTemplate Template { get; } Property Value Type Description IFormTemplate Methods | Improve this Doc View Source CreatePartialForm(IHtmlHelper<TModel>) Returns a wrapped ChameleonForms.PartialViewForm`1 for the given partial view helper. Declaration IForm<TModel> CreatePartialForm(IHtmlHelper<TModel> partialViewHelper) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> partialViewHelper The HTML Helper from the partial view Returns Type Description IForm <TModel> The PartialViewForm wrapping the original form | Improve this Doc View Source GetFieldGenerator<T>(Expression<Func<TModel, T>>) The field generator for the given field. Declaration IFieldGenerator GetFieldGenerator<T>(Expression<Func<TModel, T>> property) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, T>> property The property to return the field generator for Returns Type Description IFieldGenerator Type Parameters Name Description T | Improve this Doc View Source Write(IHtmlContent) Writes a HTML String directly to the view's output. Declaration void Write(IHtmlContent htmlContent) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent htmlContent The HTML to write to the view's output Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) ChameleonFormExtensions.PartialForAsync<TModel, TPartialModel>(IForm<TModel>, Expression<Func<TModel, TPartialModel>>, String) FieldExtensions.FieldElementFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.LabelFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) FieldExtensions.ValidationMessageFor<TModel, T>(IForm<TModel>, Expression<Func<TModel, T>>, IFieldConfiguration) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, String) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, IHtmlContent) MessageExtensions.BeginMessage<TModel>(IForm<TModel>, MessageType, Func<Object, IHtmlContent>) NavigationExtensions.BeginNavigation<TModel>(IForm<TModel>) SectionExtensions.BeginSection<TModel>(IForm<TModel>, String, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, String, Func<Object, IHtmlContent>, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, IHtmlContent, IHtmlContent, HtmlAttributes) SectionExtensions.BeginSection<TModel>(IForm<TModel>, Func<Object, IHtmlContent>, Func<Object, IHtmlContent>, HtmlAttributes)"
  },
  "apidocs/ChameleonForms.LazyHtmlAttributes.html": {
    "href": "apidocs/ChameleonForms.LazyHtmlAttributes.html",
    "title": "Class LazyHtmlAttributes | ChameleonForms",
    "keywords": "Class LazyHtmlAttributes HtmlAttributes class that evaluates a given HTML generator when .ToHtmlString() is called. Inheritance System.Object HtmlAttributes LazyHtmlAttributes ButtonHtmlAttributes Implements Microsoft.AspNetCore.Html.IHtmlContent Inherited Members HtmlAttributes.Attributes HtmlAttributes.AddClass(String) HtmlAttributes.Id(String) HtmlAttributes.Disabled(Boolean) HtmlAttributes.Readonly(Boolean) HtmlAttributes.Required(Boolean) HtmlAttributes.Has(String) HtmlAttributes.Attr(String, Object) HtmlAttributes.Attr(Func<Object, Object>) HtmlAttributes.Attrs(Func<Object, Object>[]) HtmlAttributes.Attrs(IDictionary<String, Object>) HtmlAttributes.Attrs(IDictionary<String, String>) HtmlAttributes.Attrs(Object) HtmlAttributes.ToDictionary() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.Core.dll Syntax public class LazyHtmlAttributes : HtmlAttributes, IHtmlContent Constructors | Improve this Doc View Source LazyHtmlAttributes(Func<HtmlAttributes, IHtmlContent>) Construct a LazyHtmlAttributes class. Declaration public LazyHtmlAttributes(Func<HtmlAttributes, IHtmlContent> htmlGenerator) Parameters Type Name Description System.Func < HtmlAttributes , Microsoft.AspNetCore.Html.IHtmlContent > htmlGenerator The generator to use to generate the HTML when .ToHtmlString() is called Methods | Improve this Doc View Source WriteTo(TextWriter, HtmlEncoder) Invokes the given HTML generator to return HTML. Declaration public override void WriteTo(TextWriter writer, HtmlEncoder encoder) Parameters Type Name Description System.IO.TextWriter writer System.Text.Encodings.Web.HtmlEncoder encoder Overrides HtmlAttributes.WriteTo(TextWriter, HtmlEncoder) Implements Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object) HtmlContentExtensions.ToHtmlString(IHtmlContent)"
  },
  "apidocs/ChameleonForms.ModelBinders.DateTimeModelBinder.html": {
    "href": "apidocs/ChameleonForms.ModelBinders.DateTimeModelBinder.html",
    "title": "Class DateTimeModelBinder | ChameleonForms",
    "keywords": "Class DateTimeModelBinder Binds a datetime in a model using the display format string. Inheritance System.Object DateTimeModelBinder Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.ModelBinders Assembly : ChameleonForms.dll Syntax public class DateTimeModelBinder : IModelBinder Methods | Improve this Doc View Source BindModelAsync(ModelBindingContext) Called when binding a model using this model binder. Declaration public Task BindModelAsync(ModelBindingContext bindingContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext The context within which binding occurs Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.ModelBinders.EnumListModelBinder-1.html": {
    "href": "apidocs/ChameleonForms.ModelBinders.EnumListModelBinder-1.html",
    "title": "Class EnumListModelBinder<T> | ChameleonForms",
    "keywords": "Class EnumListModelBinder<T> Binds a list of enums in a model. Inheritance System.Object Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder <T> Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder <T> EnumListModelBinder<T> Implements Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Inherited Members Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<T>.CanCreateInstance(System.Type) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<T>.ConvertToCollectionType(System.Type, System.Collections.Generic.IEnumerable<T>) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<T>.CopyToModel(System.Object, System.Collections.Generic.IEnumerable<T>) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<T>.CreateEmptyCollection(System.Type) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<T>.AddErrorIfBindingRequired(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<T>.CreateInstance(System.Type) Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<T>.ElementBinder Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<T>.Logger System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.ModelBinders Assembly : ChameleonForms.dll Syntax public class EnumListModelBinder<T> : ArrayModelBinder<T>, ICollectionModelBinder, IModelBinder Type Parameters Name Description T Constructors | Improve this Doc View Source EnumListModelBinder(IModelBinder, ILoggerFactory, Boolean, MvcOptions) Creates a new EnumListModelBinder<T> . Declaration public EnumListModelBinder(IModelBinder elementBinder, ILoggerFactory loggerFactory, bool allowValidatingTopLevelNodes, MvcOptions mvcOptions) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder elementBinder The Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder for binding T . Microsoft.Extensions.Logging.ILoggerFactory loggerFactory The Microsoft.Extensions.Logging.ILoggerFactory . System.Boolean allowValidatingTopLevelNodes Indication that validation of top-level models is enabled. If true and Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingRequired is true for a top-level model, the binder adds a Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary error when the model is not bound. Microsoft.AspNetCore.Mvc.MvcOptions mvcOptions The Microsoft.AspNetCore.Mvc.MvcOptions . Methods | Improve this Doc View Source BindModelAsync(ModelBindingContext) Called when binding a model using this model binder. Declaration public override Task BindModelAsync(ModelBindingContext bindingContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext The context within which binding occurs Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<T>.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) Implements Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.ModelBinders.FlagsEnumModelBinder.html": {
    "href": "apidocs/ChameleonForms.ModelBinders.FlagsEnumModelBinder.html",
    "title": "Class FlagsEnumModelBinder | ChameleonForms",
    "keywords": "Class FlagsEnumModelBinder Binds a flags enum in a model. Inheritance System.Object FlagsEnumModelBinder Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.ModelBinders Assembly : ChameleonForms.dll Syntax public class FlagsEnumModelBinder : IModelBinder Methods | Improve this Doc View Source BindModelAsync(ModelBindingContext) Called when binding a model using this model binder. Declaration public Task BindModelAsync(ModelBindingContext bindingContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext The context within which binding occurs Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.ModelBinders.html": {
    "href": "apidocs/ChameleonForms.ModelBinders.html",
    "title": "Namespace ChameleonForms.ModelBinders | ChameleonForms",
    "keywords": "Namespace ChameleonForms.ModelBinders Classes DateTimeModelBinder Binds a datetime in a model using the display format string. EnumListModelBinder<T> Binds a list of enums in a model. FlagsEnumModelBinder Binds a flags enum in a model. UriModelBinder Binds a System.Uri in a model."
  },
  "apidocs/ChameleonForms.ModelBinders.UriModelBinder.html": {
    "href": "apidocs/ChameleonForms.ModelBinders.UriModelBinder.html",
    "title": "Class UriModelBinder | ChameleonForms",
    "keywords": "Class UriModelBinder Binds a System.Uri in a model. Inheritance System.Object UriModelBinder Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.ModelBinders Assembly : ChameleonForms.dll Syntax public class UriModelBinder : IModelBinder Methods | Improve this Doc View Source BindModelAsync(ModelBindingContext) Called when binding a model using this model binder. Declaration public Task BindModelAsync(ModelBindingContext bindingContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext The context within which binding occurs Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.ServiceCollectionExtensions.html": {
    "href": "apidocs/ChameleonForms.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | ChameleonForms",
    "keywords": "Class ServiceCollectionExtensions Extension methods for Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms Assembly : ChameleonForms.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddChameleonForms(IServiceCollection, Func<ChameleonFormsConfigBuilder<DefaultFormTemplate>, ChameleonFormsConfigBuilder<DefaultFormTemplate>>) Adds ChameleonForms configuration with the DefaultFormTemplate . Declaration public static void AddChameleonForms(this IServiceCollection services, Func<ChameleonFormsConfigBuilder<DefaultFormTemplate>, ChameleonFormsConfigBuilder<DefaultFormTemplate>> configModifier = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Func < ChameleonFormsConfigBuilder < DefaultFormTemplate >, ChameleonFormsConfigBuilder < DefaultFormTemplate >> configModifier Lambda expression to alter configuration | Improve this Doc View Source AddChameleonForms<TFormTemplate>(IServiceCollection, ChameleonFormsConfigBuilder<TFormTemplate>) Adds ChameleonForms configuration with a specified form template and a builder instance. Declaration public static void AddChameleonForms<TFormTemplate>(this IServiceCollection services, ChameleonFormsConfigBuilder<TFormTemplate> configBuilder) where TFormTemplate : class, IFormTemplate Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection ChameleonFormsConfigBuilder <TFormTemplate> configBuilder The configuration builder to use to specify the Chameleon Forms configuration Type Parameters Name Description TFormTemplate The form template type to register as the default template | Improve this Doc View Source AddChameleonForms<TFormTemplate>(IServiceCollection, Func<ChameleonFormsConfigBuilder<TFormTemplate>, ChameleonFormsConfigBuilder<TFormTemplate>>) Adds ChameleonForms configuration with a specified form template and a builder modification delegate. Declaration public static void AddChameleonForms<TFormTemplate>(this IServiceCollection services, Func<ChameleonFormsConfigBuilder<TFormTemplate>, ChameleonFormsConfigBuilder<TFormTemplate>> configModifier = null) where TFormTemplate : class, IFormTemplate Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Func < ChameleonFormsConfigBuilder <TFormTemplate>, ChameleonFormsConfigBuilder <TFormTemplate>> configModifier Lambda expression to alter configuration Type Parameters Name Description TFormTemplate"
  },
  "apidocs/ChameleonForms.TagHelpers.ChameleonFormTagHelper.FormMethod.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ChameleonFormTagHelper.FormMethod.html",
    "title": "Enum ChameleonFormTagHelper.FormMethod | ChameleonForms",
    "keywords": "Enum ChameleonFormTagHelper.FormMethod Form method for the tag helper. POST is the default (for when the method isn't specified). Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public enum FormMethod Remarks Nullable enums don't allow you to omit the enum type in the views hence using this instead of Microsoft.AspNetCore.Mvc.Rendering.FormMethod (where GET is the default). Fields Name Description Get HTTP GET. Post HTTP POST. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.TagHelpers.ChameleonFormTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ChameleonFormTagHelper.html",
    "title": "Class ChameleonFormTagHelper | ChameleonForms",
    "keywords": "Class ChameleonFormTagHelper Tag helper to create a ChameleonForms form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper ChameleonFormTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class ChameleonFormTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source Action The action URL to post to for the form submission. Leave as default value for a self-submitting form. Declaration public string Action { get; set; } Property Value Type Description System.String | Improve this Doc View Source Enctype The encoding type to use for the form submission. URL encoded by default. Declaration public EncType Enctype { get; set; } Property Value Type Description EncType | Improve this Doc View Source Method The HTTP method to use for the form submission. POST by default. Declaration public ChameleonFormTagHelper.FormMethod Method { get; set; } Property Value Type Description ChameleonFormTagHelper.FormMethod | Improve this Doc View Source OutputAntiforgeryToken Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET. Declaration public bool? OutputAntiforgeryToken { get; set; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldConfigurationBaseTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldConfigurationBaseTagHelper.html",
    "title": "Class FieldConfigurationBaseTagHelper | ChameleonForms",
    "keywords": "Class FieldConfigurationBaseTagHelper Tag helper that accepts field configuration attributes for a , , or . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper FieldConfigurationBaseTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\")] [HtmlTargetElement(\"field-element\")] [HtmlTargetElement(\"field-label\")] [HtmlTargetElement(\"field-validation\")] public class FieldConfigurationBaseTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source FluentConfig Fluent configuration of the IFieldConfiguration . Declaration public Func<IFieldConfiguration, IFieldConfiguration> FluentConfig { get; set; } Property Value Type Description System.Func < IFieldConfiguration , IFieldConfiguration > Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldConfigurationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldConfigurationTagHelper.html",
    "title": "Class FieldConfigurationTagHelper | ChameleonForms",
    "keywords": "Class FieldConfigurationTagHelper Tag helper that accepts field configuration attributes for a . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper FieldConfigurationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\")] public class FieldConfigurationTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source AddContainerClass Specify one or more CSS classes to use for the field container element. Declaration public string AddContainerClass { get; set; } Property Value Type Description System.String | Improve this Doc View Source Append Appended HTML as a System.String . Declaration public string Append { get; set; } Property Value Type Description System.String | Improve this Doc View Source AppendHtml Appended HTML as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> AppendHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source AppendHtmlContent Appended HTML as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent AppendHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source Hint Hint as a System.String . Declaration public string Hint { get; set; } Property Value Type Description System.String | Improve this Doc View Source HintHtml Hint HTML as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> HintHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source HintHtmlContent Hint HTML as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent HintHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source HintId Specify an ID to use for a field hint. Declaration public string HintId { get; set; } Property Value Type Description System.String | Improve this Doc View Source OverrideFieldHtml Override the HTML of the form field as a Microsoft.AspNetCore.Html.IHtmlContent . This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration public Func<dynamic, IHtmlContent> OverrideFieldHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source OverrideFieldHtmlContent Override the HTML of the form field as templated razor delegate. This gives you ultimate flexibility with your field HTML when it's not quite what you want, but you still want the form template (e.g. label, surrounding html and validation message). Declaration public IHtmlContent OverrideFieldHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source Prepend Prepended HTML as a System.String . Declaration public string Prepend { get; set; } Property Value Type Description System.String | Improve this Doc View Source PrependHtml Prepended HTML as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> PrependHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source PrependHtmlContent Prepended HTML as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent PrependHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldElementConfigurationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldElementConfigurationTagHelper.html",
    "title": "Class FieldElementConfigurationTagHelper | ChameleonForms",
    "keywords": "Class FieldElementConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper FieldElementConfigurationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\")] [HtmlTargetElement(\"field-element\")] public class FieldElementConfigurationTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source AddClass Class(es) to add to the field element. Declaration public string AddClass { get; set; } Property Value Type Description System.String | Improve this Doc View Source As Override the render type of the field. Declaration public RenderAs As { get; set; } Property Value Type Description RenderAs | Improve this Doc View Source Attrs Arbitrary attributes to add to the field element. Add as a dictionary (attrs=\"@attrsDictionary&quot;) or as individual attributes (attr-id=\"id\" attr-data-xyz=\"asdf\"). Declaration [HtmlAttributeName(\"attrs\", DictionaryAttributePrefix = \"attr-\")] public IDictionary<string, string> Attrs { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Cols Sets the number of cols for a textarea to use. Declaration public int? Cols { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Disabled Whether the field is disabled (value not submitted, can not click). Declaration public bool? Disabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Exclude Excludes one or more Enum values from the generated field. Declaration public Enum[] Exclude { get; set; } Property Value Type Description System.Enum [] | Improve this Doc View Source FalseLabel Change the label that represents false. Declaration public string FalseLabel { get; set; } Property Value Type Description System.String | Improve this Doc View Source FormatString Uses the given format string when outputting the field value. Declaration public string FormatString { get; set; } Property Value Type Description System.String | Improve this Doc View Source HideEmptyItem Hide the empty item that would normally display for the field. Declaration public bool HideEmptyItem { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Id Field element id. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source InlineLabel Inline label text override Declaration public string InlineLabel { get; set; } Property Value Type Description System.String | Improve this Doc View Source InlineLabelHtml Inline label as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> InlineLabelHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source InlineLabelHtmlContent Inline label as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent InlineLabelHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source InlineLabelWrapsElement Specify that inline labels should wrap their input element. Declaration public bool? InlineLabelWrapsElement { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Max Sets the maximum value to accept for numeric text controls. Declaration public string Max { get; set; } Property Value Type Description System.String | Improve this Doc View Source Min Sets the minimum value to accept for numeric text controls. Declaration public string Min { get; set; } Property Value Type Description System.String | Improve this Doc View Source NoneLabel Change the label that represents none. Declaration public string NoneLabel { get; set; } Property Value Type Description System.String | Improve this Doc View Source Placeholder Placeholder text for the field. Declaration public string Placeholder { get; set; } Property Value Type Description System.String | Improve this Doc View Source Readonly Whether the field is readonly (value vannot be modified). Declaration public bool? Readonly { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Required Whether the field is required. Declaration public bool? Required { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Rows Sets the number of rows for a textarea to use. Declaration public int? Rows { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Step Sets the stepping interval to use for numeric text controls. Declaration public decimal? Step { get; set; } Property Value Type Description System.Nullable < System.Decimal > | Improve this Doc View Source TrueLabel Change the label that represents true. Declaration public string TrueLabel { get; set; } Property Value Type Description System.String | Improve this Doc View Source WithoutInlineLabel Specify that no inline label should be generated. Declaration public bool WithoutInlineLabel { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldElementTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldElementTagHelper.html",
    "title": "Class FieldElementTagHelper | ChameleonForms",
    "keywords": "Class FieldElementTagHelper Creates a ChameleonForms form field element, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FieldElementTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelPropertyTagHelper.Order ModelPropertyTagHelper.ViewContext ModelPropertyTagHelper.For ModelPropertyTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FieldElementTagHelper : ModelPropertyTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public override Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Overrides ChameleonForms.TagHelpers.ModelPropertyTagHelper.ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>>) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldLabelConfigurationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldLabelConfigurationTagHelper.html",
    "title": "Class FieldLabelConfigurationTagHelper | ChameleonForms",
    "keywords": "Class FieldLabelConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper FieldLabelConfigurationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\")] [HtmlTargetElement(\"field-label\")] public class FieldLabelConfigurationTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source AddLabelClass Specify one or more CSS classes to use for the field label. Declaration public string AddLabelClass { get; set; } Property Value Type Description System.String | Improve this Doc View Source Label Label text override Declaration public string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source LabelHtml Label as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> LabelHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source LabelHtmlContent Label as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent LabelHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source WithoutLabelElement Don't use a <label>, but still include the label text for the field. Declaration public bool WithoutLabelElement { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldLabelTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldLabelTagHelper.html",
    "title": "Class FieldLabelTagHelper | ChameleonForms",
    "keywords": "Class FieldLabelTagHelper Creates a ChameleonForms form field label, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FieldLabelTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelPropertyTagHelper.Order ModelPropertyTagHelper.ViewContext ModelPropertyTagHelper.For ModelPropertyTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FieldLabelTagHelper : ModelPropertyTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public override Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Overrides ChameleonForms.TagHelpers.ModelPropertyTagHelper.ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>>) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldTagHelper.html",
    "title": "Class FieldTagHelper | ChameleonForms",
    "keywords": "Class FieldTagHelper Creates a ChameleonForms form field context, use within a ChameleonForm form section or form field context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FieldTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelPropertyTagHelper.Order ModelPropertyTagHelper.ViewContext ModelPropertyTagHelper.For ModelPropertyTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FieldTagHelper : ModelPropertyTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public override Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Overrides ChameleonForms.TagHelpers.ModelPropertyTagHelper.ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>>) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldValidationConfigurationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldValidationConfigurationTagHelper.html",
    "title": "Class FieldValidationConfigurationTagHelper | ChameleonForms",
    "keywords": "Class FieldValidationConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper FieldValidationConfigurationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\")] [HtmlTargetElement(\"field-validation\")] public class FieldValidationConfigurationTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source AddValidationClass Specify one or more CSS classes to use for the field validation message. Declaration public string AddValidationClass { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FieldValidationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FieldValidationTagHelper.html",
    "title": "Class FieldValidationTagHelper | ChameleonForms",
    "keywords": "Class FieldValidationTagHelper Creates a ChameleonForms form field label, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FieldValidationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelPropertyTagHelper.Order ModelPropertyTagHelper.ViewContext ModelPropertyTagHelper.For ModelPropertyTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FieldValidationTagHelper : ModelPropertyTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public override Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Overrides ChameleonForms.TagHelpers.ModelPropertyTagHelper.ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>>) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FormButtonTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FormButtonTagHelper.html",
    "title": "Class FormButtonTagHelper | ChameleonForms",
    "keywords": "Class FormButtonTagHelper Creates a ChameleonForms form button, use within a ChameleonForm form navigation context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper FormButtonTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"form-button\")] public class FormButtonTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source FluentAttrs Allows you to specify button attributes fluently. Be sure to use single quotes when defining this so you can use double quotes for string parameters. Declaration public Func<ButtonHtmlAttributes, ButtonHtmlAttributes> FluentAttrs { get; set; } Property Value Type Description System.Func < ButtonHtmlAttributes , ButtonHtmlAttributes > | Improve this Doc View Source Label Button label (if text, otherwise make it the content within the button) Declaration public string Label { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FormMessageTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FormMessageTagHelper.html",
    "title": "Class FormMessageTagHelper | ChameleonForms",
    "keywords": "Class FormMessageTagHelper Creates a ChameleonForms form message context, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper FormMessageTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FormMessageTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source Heading Message heading as a System.String . Declaration public string Heading { get; set; } Property Value Type Description System.String | Improve this Doc View Source HeadingHtml Message heading as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> HeadingHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source HeadingHtmlContent Message heading as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent HeadingHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source Type Message type. Declaration public MessageType Type { get; set; } Property Value Type Description MessageType Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FormNavigationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FormNavigationTagHelper.html",
    "title": "Class FormNavigationTagHelper | ChameleonForms",
    "keywords": "Class FormNavigationTagHelper Creates a ChameleonForms form section context, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper FormNavigationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FormNavigationTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FormPartialTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FormPartialTagHelper.html",
    "title": "Class FormPartialTagHelper | ChameleonForms",
    "keywords": "Class FormPartialTagHelper Includes a partial view that is a different type to the parent form. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FormPartialTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelPropertyTagHelper.Order ModelPropertyTagHelper.ViewContext ModelPropertyTagHelper.For ModelPropertyTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"form-partial\", TagStructure = TagStructure.WithoutEndTag)] public class FormPartialTagHelper : ModelPropertyTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source Name The partial view name. Declaration public string Name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public override Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Overrides ChameleonForms.TagHelpers.ModelPropertyTagHelper.ProcessUsingModelPropertyAsync<TModel, TProperty>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Linq.Expressions.Expression<System.Func<TModel, TProperty>>) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.FormSectionTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.FormSectionTagHelper.html",
    "title": "Class FormSectionTagHelper | ChameleonForms",
    "keywords": "Class FormSectionTagHelper Creates a ChameleonForms form section context, use within a ChameleonForm form context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper FormSectionTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class FormSectionTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source Heading Section heading as a System.String . Declaration public string Heading { get; set; } Property Value Type Description System.String | Improve this Doc View Source HeadingHtml Section heading as templated razor delegate. Declaration public Func<dynamic, IHtmlContent> HeadingHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source HeadingHtmlContent Section heading as a Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent HeadingHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source LeadingHtml Leading HTML for the section, provided via a templated razor delegate. Declaration public Func<dynamic, IHtmlContent> LeadingHtml { get; set; } Property Value Type Description System.Func < System.Object , Microsoft.AspNetCore.Html.IHtmlContent > | Improve this Doc View Source LeadingHtmlContent Leading HTML for the section, provided as an Microsoft.AspNetCore.Html.IHtmlContent . Declaration public IHtmlContent LeadingHtmlContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.html",
    "title": "Namespace ChameleonForms.TagHelpers | ChameleonForms",
    "keywords": "Namespace ChameleonForms.TagHelpers Classes ChameleonFormTagHelper Tag helper to create a ChameleonForms form context. FieldConfigurationBaseTagHelper Tag helper that accepts field configuration attributes for a , , or . FieldConfigurationTagHelper Tag helper that accepts field configuration attributes for a . FieldElementConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . FieldElementTagHelper Creates a ChameleonForms form field element, use within a ChameleonForm form context. FieldLabelConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . FieldLabelTagHelper Creates a ChameleonForms form field label, use within a ChameleonForm form context. FieldTagHelper Creates a ChameleonForms form field context, use within a ChameleonForm form section or form field context. FieldValidationConfigurationTagHelper Tag helper that accepts field configuration attributes for a or . FieldValidationTagHelper Creates a ChameleonForms form field label, use within a ChameleonForm form context. FormButtonTagHelper Creates a ChameleonForms form button, use within a ChameleonForm form navigation context. FormMessageTagHelper Creates a ChameleonForms form message context, use within a ChameleonForm form context. FormNavigationTagHelper Creates a ChameleonForms form section context, use within a ChameleonForm form context. FormPartialTagHelper Includes a partial view that is a different type to the parent form. FormSectionTagHelper Creates a ChameleonForms form section context, use within a ChameleonForm form context. HtmlAttributesTagHelper Tag helper that accepts HTML attributes for a , , and . ManualFieldContext Context object for a manually specified form field. ManualFieldElementTagHelper Specify HTML for the manually specified field's element. ManualFieldLabelTagHelper Specify HTML for the manually specified field's label. ManualFieldTagHelper Creates a ChameleonForms form field context, use within a ChameleonForm form section or form field context. ManualFieldValidationTagHelper Specify HTML for the manually specified field's validation. MessageParagraphTagHelper Creates a ChameleonForms form message paragraph, use within a ChameleonForm form message context. ModelAwareTagHelper Tag helper that is aware of the current page model type (via a generic Process method). ModelPropertyTagHelper Tag helper that acts within the context of a property of the page model. ResetButtonTagHelper Creates a ChameleonForms form reset button, use within a ChameleonForm form navigation context. SubmitButtonTagHelper Creates a ChameleonForms form submit button, use within a ChameleonForm form navigation context. TagHelperContextExtensions Extension methods on Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext . Enums ChameleonFormTagHelper.FormMethod Form method for the tag helper. POST is the default (for when the method isn't specified). RenderAs Different field rendering options."
  },
  "apidocs/ChameleonForms.TagHelpers.HtmlAttributesTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.HtmlAttributesTagHelper.html",
    "title": "Class HtmlAttributesTagHelper | ChameleonForms",
    "keywords": "Class HtmlAttributesTagHelper Tag helper that accepts HTML attributes for a , , and . Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper HtmlAttributesTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"chameleon-form\")] [HtmlTargetElement(\"form-section\")] [HtmlTargetElement(\"form-button\")] [HtmlTargetElement(\"submit-button\")] [HtmlTargetElement(\"reset-button\")] public class HtmlAttributesTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source AddClass Adds a HTML class. Declaration public string AddClass { get; set; } Property Value Type Description System.String | Improve this Doc View Source Attrs HTML attributes to apply to the element. You can either pass them in as a dictionary (attrs=\"@dictionary&quot;), or you can pass them in as individual attributes via attr-attribute-name=\"attributevalue\" ... Declaration [HtmlAttributeName(\"attrs\", DictionaryAttributePrefix = \"attr-\")] public IDictionary<string, string> Attrs { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Disabled Sets the element as disabled. Declaration public bool? Disabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source FluentConfig Fluent configuration of the HtmlAttributes . Declaration public Func<HtmlAttributes, HtmlAttributes> FluentConfig { get; set; } Property Value Type Description System.Func < HtmlAttributes , HtmlAttributes > | Improve this Doc View Source Id Sets the HTML id. Declaration public string Id { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ManualFieldContext.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ManualFieldContext.html",
    "title": "Class ManualFieldContext | ChameleonForms",
    "keywords": "Class ManualFieldContext Context object for a manually specified form field. Inheritance System.Object ManualFieldContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class ManualFieldContext Properties | Improve this Doc View Source Element HTML for the field element. Declaration public IHtmlContent Element { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source FieldConfiguration Field Configuration. Declaration public IFieldConfiguration FieldConfiguration { get; set; } Property Value Type Description IFieldConfiguration | Improve this Doc View Source IsValid Optionally specify whether the field is in a valid state. Declaration public bool? IsValid { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Label HTML for the field label. Declaration public IHtmlContent Label { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source ModelMetadata Optional model metadata for the field. Declaration public ModelMetadata ModelMetadata { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source Validation HTML for the field validation. Declaration public IHtmlContent Validation { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ManualFieldElementTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ManualFieldElementTagHelper.html",
    "title": "Class ManualFieldElementTagHelper | ChameleonForms",
    "keywords": "Class ManualFieldElementTagHelper Specify HTML for the manually specified field's element. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ManualFieldElementTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"manual-element\", ParentTag = \"field\")] public class ManualFieldElementTagHelper : TagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ManualFieldLabelTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ManualFieldLabelTagHelper.html",
    "title": "Class ManualFieldLabelTagHelper | ChameleonForms",
    "keywords": "Class ManualFieldLabelTagHelper Specify HTML for the manually specified field's label. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ManualFieldLabelTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"manual-label\", ParentTag = \"field\")] public class ManualFieldLabelTagHelper : TagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ManualFieldTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ManualFieldTagHelper.html",
    "title": "Class ManualFieldTagHelper | ChameleonForms",
    "keywords": "Class ManualFieldTagHelper Creates a ChameleonForms form field context, use within a ChameleonForm form section or form field context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper ManualFieldTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"field\", Attributes = \"manual\")] public class ManualFieldTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source IsValid Optionally specify whether the field is in a valid state. Declaration public bool? IsValid { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ModelMetadata Optionally specify the model metadata for the field. Declaration public ModelMetadata ModelMetadata { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source Order Order in which this tag helper gets executed. Set higher than default so field configuration extensions can apply, but lower than the <field> tag helper so it can take control. Declaration public override int Order { get; } Property Value Type Description System.Int32 Overrides ModelAwareTagHelper.Order Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ManualFieldValidationTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ManualFieldValidationTagHelper.html",
    "title": "Class ManualFieldValidationTagHelper | ChameleonForms",
    "keywords": "Class ManualFieldValidationTagHelper Specify HTML for the manually specified field's validation. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ManualFieldValidationTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"manual-validation\", ParentTag = \"field\")] public class ManualFieldValidationTagHelper : TagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.MessageParagraphTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.MessageParagraphTagHelper.html",
    "title": "Class MessageParagraphTagHelper | ChameleonForms",
    "keywords": "Class MessageParagraphTagHelper Creates a ChameleonForms form message paragraph, use within a ChameleonForm form message context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper MessageParagraphTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class MessageParagraphTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ModelAwareTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ModelAwareTagHelper.html",
    "title": "Class ModelAwareTagHelper | ChameleonForms",
    "keywords": "Class ModelAwareTagHelper Tag helper that is aware of the current page model type (via a generic Process method). Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper ChameleonFormTagHelper FormButtonTagHelper FormMessageTagHelper FormNavigationTagHelper FormSectionTagHelper ManualFieldTagHelper MessageParagraphTagHelper ResetButtonTagHelper SubmitButtonTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public abstract class ModelAwareTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source Order Order in which this tag helper gets executed. Set higher than default so there is opportunity to extend this functionality. Declaration public override int Order { get; } Property Value Type Description System.Int32 Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order | Improve this Doc View Source ViewContext The page's Microsoft.AspNetCore.Mvc.Rendering.ViewContext . Declaration [HtmlAttributeNotBound] [ViewContext] public ViewContext ViewContext { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.ViewContext Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public abstract Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.ModelPropertyTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ModelPropertyTagHelper.html",
    "title": "Class ModelPropertyTagHelper | ChameleonForms",
    "keywords": "Class ModelPropertyTagHelper Tag helper that acts within the context of a property of the page model. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelPropertyTagHelper FieldElementTagHelper FieldLabelTagHelper FieldTagHelper FieldValidationTagHelper FormPartialTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public abstract class ModelPropertyTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source For A property (single or nested) within the page model. Declaration public ModelExpression For { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression | Improve this Doc View Source Order Order in which this tag helper gets executed. Set higher than default so there is opportunity to extend this functionality. Declaration public override int Order { get; } Property Value Type Description System.Int32 Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order | Improve this Doc View Source ViewContext The page's Microsoft.AspNetCore.Mvc.Rendering.ViewContext . Declaration [HtmlAttributeNotBound] [ViewContext] public ViewContext ViewContext { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.Rendering.ViewContext Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) | Improve this Doc View Source ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext, TagHelperOutput, Expression<Func<TModel, TProperty>>) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a property within the page model. Declaration public abstract Task ProcessUsingModelPropertyAsync<TModel, TProperty>(TagHelperContext context, TagHelperOutput output, Expression<Func<TModel, TProperty>> modelProperty) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. System.Linq.Expressions.Expression < System.Func <TModel, TProperty>> modelProperty A lambda expression representing the model property being targeted Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel TProperty Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.RenderAs.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.RenderAs.html",
    "title": "Enum RenderAs | ChameleonForms",
    "keywords": "Enum RenderAs Different field rendering options. Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public enum RenderAs Fields Name Description CheckboxList Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Default Whatever the default render option is. Dropdown Renders the field as a drop-down control. Use for a list or boolean value. RadioList Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. Use for a list or boolean value. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.TagHelpers.ResetButtonTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.ResetButtonTagHelper.html",
    "title": "Class ResetButtonTagHelper | ChameleonForms",
    "keywords": "Class ResetButtonTagHelper Creates a ChameleonForms form reset button, use within a ChameleonForm form navigation context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper ResetButtonTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class ResetButtonTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source FluentAttrs Declaration public Func<ButtonHtmlAttributes, ButtonHtmlAttributes> FluentAttrs { get; set; } Property Value Type Description System.Func < ButtonHtmlAttributes , ButtonHtmlAttributes > | Improve this Doc View Source Label Button label (if text, otherwise make it the content within the button) Declaration public string Label { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.SubmitButtonTagHelper.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.SubmitButtonTagHelper.html",
    "title": "Class SubmitButtonTagHelper | ChameleonForms",
    "keywords": "Class SubmitButtonTagHelper Creates a ChameleonForms form submit button, use within a ChameleonForm form navigation context. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper ModelAwareTagHelper SubmitButtonTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members ModelAwareTagHelper.Order ModelAwareTagHelper.ViewContext ModelAwareTagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public class SubmitButtonTagHelper : ModelAwareTagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source FluentAttrs Allows you to specify button attributes fluently. Be sure to use single quotes when defining this so you can use double quotes for string parameters. Declaration public Func<ButtonHtmlAttributes, ButtonHtmlAttributes> FluentAttrs { get; set; } Property Value Type Description System.Func < ButtonHtmlAttributes , ButtonHtmlAttributes > | Improve this Doc View Source Label Button label (if text, otherwise make it the content within the button) Declaration public string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Name to submit value for. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Value to submit; requires Name to be specified. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Asynchronously executes the Microsoft.AspNetCore.Razor.TagHelpers.TagHelper with the given context and output against a page model type. Declaration public override Task ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context Contains information associated with the current HTML tag. Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output A stateful HTML element used to generate an HTML tag. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that on completion updates the output . Type Parameters Name Description TModel Overrides ModelAwareTagHelper.ProcessWhileAwareOfModelTypeAsync<TModel>(TagHelperContext, TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.TagHelpers.TagHelperContextExtensions.html": {
    "href": "apidocs/ChameleonForms.TagHelpers.TagHelperContextExtensions.html",
    "title": "Class TagHelperContextExtensions | ChameleonForms",
    "keywords": "Class TagHelperContextExtensions Extension methods on Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext . Inheritance System.Object TagHelperContextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.TagHelpers Assembly : ChameleonForms.dll Syntax public static class TagHelperContextExtensions Fields | Improve this Doc View Source FieldConfigurationItemsKey The key that's used in Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext Items property to store IFieldConfiguration . Declaration public const string FieldConfigurationItemsKey = \"ChameleonForms:FieldConfiguration\" Field Value Type Description System.String Methods | Improve this Doc View Source GetFieldConfiguration(TagHelperContext) Idempotently gets a IFieldConfiguration from Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext Items. Declaration public static IFieldConfiguration GetFieldConfiguration(this TagHelperContext context) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The tag helper context Returns Type Description IFieldConfiguration The field configuration | Improve this Doc View Source GetHtmlAttributes(TagHelperContext) Idempotently gets a HtmlAttributes from Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext Items. Declaration public static HtmlAttributes GetHtmlAttributes(this TagHelperContext context) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The tag helper context Returns Type Description HtmlAttributes The HTML attributes"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.BeginSectionParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.BeginSectionParams.html",
    "title": "Class BeginSectionParams | ChameleonForms",
    "keywords": "Class BeginSectionParams Inheritance System.Object BeginSectionParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class BeginSectionParams Properties | Improve this Doc View Source Heading Declaration public IHtmlContent Heading { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source HtmlAttributes Declaration public HtmlAttributes HtmlAttributes { get; set; } Property Value Type Description HtmlAttributes | Improve this Doc View Source LeadingHtml Declaration public IHtmlContent LeadingHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldConfigurationParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldConfigurationParams.html",
    "title": "Class FieldConfigurationParams | ChameleonForms",
    "keywords": "Class FieldConfigurationParams Inheritance System.Object FieldConfigurationParams FieldParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class FieldConfigurationParams Properties | Improve this Doc View Source FieldConfiguration Declaration public IReadonlyFieldConfiguration FieldConfiguration { get; set; } Property Value Type Description IReadonlyFieldConfiguration Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldParams.html",
    "title": "Class FieldParams | ChameleonForms",
    "keywords": "Class FieldParams Inheritance System.Object FieldConfigurationParams FieldParams Inherited Members FieldConfigurationParams.FieldConfiguration System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class FieldParams : FieldConfigurationParams Properties | Improve this Doc View Source ElementHtml Declaration public IHtmlContent ElementHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source FieldMetadata Declaration public ModelMetadata FieldMetadata { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source LabelHtml Declaration public IHtmlContent LabelHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source RenderMode Declaration public FieldRenderMode RenderMode { get; set; } Property Value Type Description FieldRenderMode | Improve this Doc View Source RequiredDesignator Declaration public IHtmlContent RequiredDesignator { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source ValidationHtml Declaration public IHtmlContent ValidationHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldRenderMode.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.FieldRenderMode.html",
    "title": "Enum FieldRenderMode | ChameleonForms",
    "keywords": "Enum FieldRenderMode Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public enum FieldRenderMode Fields Name Description BeginField Field Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.html",
    "title": "Namespace ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Classes BeginSectionParams FieldConfigurationParams FieldParams ListParams MessageParagraphParams MessageParams Enums FieldRenderMode"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.ListParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.ListParams.html",
    "title": "Class ListParams | ChameleonForms",
    "keywords": "Class ListParams Inheritance System.Object ListParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class ListParams Properties | Improve this Doc View Source Items Declaration public IEnumerable<IHtmlContent> Items { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.MessageParagraphParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.MessageParagraphParams.html",
    "title": "Class MessageParagraphParams | ChameleonForms",
    "keywords": "Class MessageParagraphParams Inheritance System.Object MessageParagraphParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class MessageParagraphParams Properties | Improve this Doc View Source Paragraph Declaration public IHtmlContent Paragraph { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.MessageParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params.MessageParams.html",
    "title": "Class MessageParams | ChameleonForms",
    "keywords": "Class MessageParams Inheritance System.Object MessageParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsDefaultTemplate.Params Assembly : ChameleonForms.Templates.dll Syntax public class MessageParams Properties | Improve this Doc View Source Heading Declaration public IHtmlContent Heading { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source MessageType Declaration public MessageType MessageType { get; set; } Property Value Type Description MessageType Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.BeginSectionParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.BeginSectionParams.html",
    "title": "Class BeginSectionParams | ChameleonForms",
    "keywords": "Class BeginSectionParams Inheritance System.Object BeginSectionParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class BeginSectionParams Properties | Improve this Doc View Source Heading Declaration public IHtmlContent Heading { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source HtmlAttributes Declaration public HtmlAttributes HtmlAttributes { get; set; } Property Value Type Description HtmlAttributes | Improve this Doc View Source LeadingHtml Declaration public IHtmlContent LeadingHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldConfigurationParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldConfigurationParams.html",
    "title": "Class FieldConfigurationParams | ChameleonForms",
    "keywords": "Class FieldConfigurationParams Inheritance System.Object FieldConfigurationParams FieldParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class FieldConfigurationParams Properties | Improve this Doc View Source FieldConfiguration Declaration public IReadonlyFieldConfiguration FieldConfiguration { get; set; } Property Value Type Description IReadonlyFieldConfiguration | Improve this Doc View Source IsInputGroup Declaration public bool IsInputGroup { get; set; } Property Value Type Description System.Boolean Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldParams.html",
    "title": "Class FieldParams | ChameleonForms",
    "keywords": "Class FieldParams Inheritance System.Object FieldConfigurationParams FieldParams Inherited Members FieldConfigurationParams.FieldConfiguration FieldConfigurationParams.IsInputGroup System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class FieldParams : FieldConfigurationParams Properties | Improve this Doc View Source ElementHtml Declaration public IHtmlContent ElementHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source FieldMetadata Declaration public ModelMetadata FieldMetadata { get; set; } Property Value Type Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata | Improve this Doc View Source IsValid Declaration public bool IsValid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LabelHtml Declaration public IHtmlContent LabelHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source RenderMode Declaration public FieldRenderMode RenderMode { get; set; } Property Value Type Description FieldRenderMode | Improve this Doc View Source RequiredDesignator Declaration public IHtmlContent RequiredDesignator { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source ValidationHtml Declaration public IHtmlContent ValidationHtml { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldRenderMode.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.FieldRenderMode.html",
    "title": "Enum FieldRenderMode | ChameleonForms",
    "keywords": "Enum FieldRenderMode Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public enum FieldRenderMode Fields Name Description BeginField Field Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.html",
    "title": "Namespace ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Classes BeginSectionParams FieldConfigurationParams FieldParams LabelParams ListParams MessageParagraphParams MessageParams Enums FieldRenderMode"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.LabelParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.LabelParams.html",
    "title": "Class LabelParams | ChameleonForms",
    "keywords": "Class LabelParams Inheritance System.Object LabelParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class LabelParams Properties | Improve this Doc View Source DisplayDesignator Declaration public bool DisplayDesignator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HasLabel Declaration public bool HasLabel { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCheckboxControl Declaration public bool IsCheckboxControl { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRequired Declaration public bool IsRequired { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Label Declaration public IHtmlContent Label { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source RequiredDesignator Declaration public IHtmlContent RequiredDesignator { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.ListParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.ListParams.html",
    "title": "Class ListParams | ChameleonForms",
    "keywords": "Class ListParams Inheritance System.Object ListParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class ListParams Properties | Improve this Doc View Source IsCheckbox Declaration public bool IsCheckbox { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Items Declaration public IEnumerable<IHtmlContent> Items { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.MessageParagraphParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.MessageParagraphParams.html",
    "title": "Class MessageParagraphParams | ChameleonForms",
    "keywords": "Class MessageParagraphParams Inheritance System.Object MessageParagraphParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class MessageParagraphParams Properties | Improve this Doc View Source Paragraph Declaration public IHtmlContent Paragraph { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.MessageParams.html": {
    "href": "apidocs/ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params.MessageParams.html",
    "title": "Class MessageParams | ChameleonForms",
    "keywords": "Class MessageParams Inheritance System.Object MessageParams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.ChameleonFormsTwitterBootstrap3Template.Params Assembly : ChameleonForms.Templates.dll Syntax public class MessageParams Properties | Improve this Doc View Source Heading Declaration public IHtmlContent Heading { get; set; } Property Value Type Description Microsoft.AspNetCore.Html.IHtmlContent | Improve this Doc View Source MessageType Declaration public EmphasisStyle MessageType { get; set; } Property Value Type Description EmphasisStyle Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.Default.DefaultFormTemplate.html": {
    "href": "apidocs/ChameleonForms.Templates.Default.DefaultFormTemplate.html",
    "title": "Class DefaultFormTemplate | ChameleonForms",
    "keywords": "Class DefaultFormTemplate The default Chameleon Forms form template renderer. Inheritance System.Object DefaultFormTemplate TwitterBootstrap3FormTemplate Implements IFormTemplate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.Default Assembly : ChameleonForms.Templates.dll Syntax public class DefaultFormTemplate : IFormTemplate Methods | Improve this Doc View Source BeginField(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the beginning HTML for a single form field that contains other fields nested within it. Declaration public virtual IHtmlContent BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the parent field | Improve this Doc View Source BeginForm(String, FormMethod, HtmlAttributes, Nullable<EncType>) Creates the starting HTML for a form. Declaration public virtual IHtmlContent BeginForm(string action, FormMethod method, HtmlAttributes htmlAttributes, EncType? enctype) Parameters Type Name Description System.String action The form action Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The form method HtmlAttributes htmlAttributes Any HTML attributes the form should use; specified as an anonymous object System.Nullable < EncType > enctype The encoding type for the form Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The starting HTML for a form | Improve this Doc View Source BeginMessage(MessageType, IHtmlContent) Creates the beginning HTML for a message. Declaration public virtual IHtmlContent BeginMessage(MessageType messageType, IHtmlContent heading) Parameters Type Name Description MessageType messageType The type of message being displayed Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the message Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the message | Improve this Doc View Source BeginNavigation() Creates the beginning HTML for a navigation section. Declaration public virtual IHtmlContent BeginNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a navigation section | Improve this Doc View Source BeginNestedSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section that is nested within another section. Declaration public virtual IHtmlContent BeginNestedSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the nested section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the nested section HtmlAttributes htmlAttributes Any HTML attributes the nested section container should use; specified as an anaonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a nested section | Improve this Doc View Source BeginSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section. Declaration public virtual IHtmlContent BeginSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes the section container should use; specified as an anonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a section | Improve this Doc View Source Button(IHtmlContent, String, String, String, HtmlAttributes) Creates the HTML for a button. Declaration public virtual IHtmlContent Button(IHtmlContent content, string type, string id, string value, HtmlAttributes htmlAttributes) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content for the user to see or null if the value should be used instead System.String type The type of button or null if a generic button should be used System.String id The name/id of the button or null if one shouldn't be set System.String value The value to submit if the button is clicked or null if one shouldn't be set HtmlAttributes htmlAttributes Any HTML attributes to add to the button or null if there are none Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the button Remarks Uses an <input> by default so the submitted value works in IE7. See http://rommelsantor.com/clog/2012/03/12/fixing-the-ie7-submit-value/ | Improve this Doc View Source EndField() Creates the ending HTML for a single form field that contains other fields nested within it. Declaration public virtual IHtmlContent EndField() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the parent field | Improve this Doc View Source EndForm() Creates the ending HTML for a form. Declaration public virtual IHtmlContent EndForm() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a form | Improve this Doc View Source EndMessage() Creates the ending HTML for a message. Declaration public virtual IHtmlContent EndMessage() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the message | Improve this Doc View Source EndNavigation() Creates the ending HTML for a navigation section. Declaration public virtual IHtmlContent EndNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a navigation section | Improve this Doc View Source EndNestedSection() Creates the ending HTML for a section that is nested within another section. Declaration public virtual IHtmlContent EndNestedSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a nested section | Improve this Doc View Source EndSection() Creates the ending HTML for a section. Declaration public virtual IHtmlContent EndSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a section | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the HTML for a single form field. Declaration public virtual IHtmlContent Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field | Improve this Doc View Source MessageParagraph(IHtmlContent) Creates the HTML for a paragraph in a message. Declaration public virtual IHtmlContent MessageParagraph(IHtmlContent paragraph) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent paragraph The paragraph HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the message paragraph | Improve this Doc View Source PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T>, IFieldGeneratorHandler<TModel, T>, IFieldConfiguration, FieldParent) Allows the template the modify the field configuration for a particular field. Declaration public virtual void PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T> fieldGenerator, IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, IFieldConfiguration fieldConfiguration, FieldParent fieldParent) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The instance of the field generator that will be used to generate the field IFieldGeneratorHandler <TModel, T> fieldGeneratorHandler The instance of the field generator handler that will be used to generate the field element IFieldConfiguration fieldConfiguration The field configuration that is being used to configure the field FieldParent fieldParent The parent component of the field Type Parameters Name Description TModel The type of model the form is being displayed for T The type of the property the field is being generated against | Improve this Doc View Source RadioOrCheckboxList(IEnumerable<IHtmlContent>, Boolean) Creates the HTML for a list of radio buttons or checkboxes. Declaration public virtual IHtmlContent RadioOrCheckboxList(IEnumerable<IHtmlContent> list, bool isCheckbox) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > list The list of HTML items (one per radio/checkbox) System.Boolean isCheckbox Whether the list is for checkboxes rather than radio buttons Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the radio list | Improve this Doc View Source RequiredDesignator(ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the HTML for a required designator for a single form field (will only be output if the field is required). Declaration protected virtual IHtmlContent RequiredDesignator(ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the required designator of field with the given information Implements IFormTemplate Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.Default.html": {
    "href": "apidocs/ChameleonForms.Templates.Default.html",
    "title": "Namespace ChameleonForms.Templates.Default | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Templates.Default Classes DefaultFormTemplate The default Chameleon Forms form template renderer."
  },
  "apidocs/ChameleonForms.Templates.html": {
    "href": "apidocs/ChameleonForms.Templates.html",
    "title": "Namespace ChameleonForms.Templates | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Templates Classes HtmlCreator Helper class that creates HTML for a view. Interfaces IFormTemplate A Chameleon Forms form template renderer."
  },
  "apidocs/ChameleonForms.Templates.HtmlCreator.html": {
    "href": "apidocs/ChameleonForms.Templates.HtmlCreator.html",
    "title": "Class HtmlCreator | ChameleonForms",
    "keywords": "Class HtmlCreator Helper class that creates HTML for a view. Inheritance System.Object HtmlCreator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates Assembly : ChameleonForms.Core.dll Syntax public static class HtmlCreator Methods | Improve this Doc View Source BuildButton(IHtmlContent, String, String, String, HtmlAttributes) Creates the HTML for a submit <button>. Declaration public static IHtmlContent BuildButton(IHtmlContent content, string type = null, string id = null, string value = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content to display for the button System.String type The type of submit button; submit (default) or reset System.String id The id/name to use for the button System.String value The value to submit with the button HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the button Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the submit button | Improve this Doc View Source BuildButton(String, String, String, String, HtmlAttributes) Creates the HTML for a submit <button>. Declaration public static IHtmlContent BuildButton(string text, string type = null, string id = null, string value = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description System.String text The text to display for the button System.String type The type of submit button; submit (default) or reset System.String id The id/name to use for the button System.String value The value to submit with the button HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the button Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the submit button | Improve this Doc View Source BuildFormTag(String, FormMethod, HtmlAttributes, Nullable<EncType>) Creates the HTML for a form tag. Declaration public static IHtmlContent BuildFormTag(string action, FormMethod method, HtmlAttributes htmlAttributes = null, EncType? encType = default(EncType? )) Parameters Type Name Description System.String action The URL the form submits to Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The HTTP method the form submits with HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the form; specified as an anonymous object System.Nullable < EncType > encType The encoding type the form uses Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the form | Improve this Doc View Source BuildInput(String, String, String, HtmlAttributes) Creates the HTML for an input. Declaration public static IHtmlContent BuildInput(string name, string value, string type, HtmlAttributes htmlAttributes) Parameters Type Name Description System.String name The name/id of the input System.String value The value of the input System.String type The type of the input HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the button Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the input | Improve this Doc View Source BuildLabel(String, IHtmlContent, HtmlAttributes) Creates the HTML for a label. Declaration public static IHtmlContent BuildLabel(string for, IHtmlContent labelText, HtmlAttributes htmlAttributes) Parameters Type Name Description System.String for The name/id for the checkbox Microsoft.AspNetCore.Html.IHtmlContent labelText The text inside the label HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the checkbox Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the checkbox | Improve this Doc View Source BuildSelect(String, IEnumerable<SelectListItem>, Boolean, HtmlAttributes) Creates the HTML for a select. Declaration public static IHtmlContent BuildSelect(string name, IEnumerable<SelectListItem> selectListItems, bool multiple, HtmlAttributes htmlAttributes) Parameters Type Name Description System.String name The name/id of the select System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Mvc.Rendering.SelectListItem > selectListItems The items for the select list System.Boolean multiple Whether or not multiple items can be selected HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the select Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the select | Improve this Doc View Source BuildSingleCheckbox(String, Boolean, HtmlAttributes, String) Creates the HTML for a single checkbox. Declaration public static IHtmlContent BuildSingleCheckbox(string name, bool isChecked, HtmlAttributes htmlAttributes, string value = \"true\") Parameters Type Name Description System.String name The name/id for the checkbox System.Boolean isChecked Whether or not the checkbox is currently checked HtmlAttributes htmlAttributes Any HTML attributes that should be applied to the checkbox System.String value The value to submit when the checkbox is ticked Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the checkbox"
  },
  "apidocs/ChameleonForms.Templates.IFormTemplate.html": {
    "href": "apidocs/ChameleonForms.Templates.IFormTemplate.html",
    "title": "Interface IFormTemplate | ChameleonForms",
    "keywords": "Interface IFormTemplate A Chameleon Forms form template renderer. Namespace : ChameleonForms.Templates Assembly : ChameleonForms.Core.dll Syntax public interface IFormTemplate Methods | Improve this Doc View Source BeginField(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the beginning HTML for a single form field that contains other fields nested within it. Declaration IHtmlContent BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the parent field | Improve this Doc View Source BeginForm(String, FormMethod, HtmlAttributes, Nullable<EncType>) Creates the starting HTML for a form. Declaration IHtmlContent BeginForm(string action, FormMethod method, HtmlAttributes htmlAttributes, EncType? enctype) Parameters Type Name Description System.String action The form action Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The form method HtmlAttributes htmlAttributes Any HTML attributes the form should use; specified as an anonymous object System.Nullable < EncType > enctype The encoding type for the form Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The starting HTML for a form | Improve this Doc View Source BeginMessage(MessageType, IHtmlContent) Creates the beginning HTML for a message. Declaration IHtmlContent BeginMessage(MessageType messageType, IHtmlContent heading) Parameters Type Name Description MessageType messageType The type of message being displayed Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the message Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the message | Improve this Doc View Source BeginNavigation() Creates the beginning HTML for a navigation section. Declaration IHtmlContent BeginNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a navigation section | Improve this Doc View Source BeginNestedSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section that is nested within another section. Declaration IHtmlContent BeginNestedSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the nested section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the nested section HtmlAttributes htmlAttributes Any HTML attributes the nested section container should use; specified as an anaonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a nested section | Improve this Doc View Source BeginSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section. Declaration IHtmlContent BeginSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes the section container should use; specified as an anonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a section | Improve this Doc View Source Button(IHtmlContent, String, String, String, HtmlAttributes) Creates the HTML for a button. Declaration IHtmlContent Button(IHtmlContent content, string type, string id, string value, HtmlAttributes htmlAttributes) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content for the user to see or null if the value should be used instead System.String type The type of button or null if a generic button should be used System.String id The name/id of the button or null if one shouldn't be set System.String value The value to submit if the button is clicked or null if one shouldn't be set HtmlAttributes htmlAttributes Any HTML attributes to add to the button or null if there are none Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the button | Improve this Doc View Source EndField() Creates the ending HTML for a single form field that contains other fields nested within it. Declaration IHtmlContent EndField() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the parent field | Improve this Doc View Source EndForm() Creates the ending HTML for a form. Declaration IHtmlContent EndForm() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a form | Improve this Doc View Source EndMessage() Creates the ending HTML for a message. Declaration IHtmlContent EndMessage() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the message | Improve this Doc View Source EndNavigation() Creates the ending HTML for a navigation section. Declaration IHtmlContent EndNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a navigation section | Improve this Doc View Source EndNestedSection() Creates the ending HTML for a section that is nested within another section. Declaration IHtmlContent EndNestedSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a nested section | Improve this Doc View Source EndSection() Creates the ending HTML for a section. Declaration IHtmlContent EndSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a section | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the HTML for a single form field. Declaration IHtmlContent Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field | Improve this Doc View Source MessageParagraph(IHtmlContent) Creates the HTML for a paragraph in a message. Declaration IHtmlContent MessageParagraph(IHtmlContent paragraph) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent paragraph The paragraph HTML Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the message paragraph | Improve this Doc View Source PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T>, IFieldGeneratorHandler<TModel, T>, IFieldConfiguration, FieldParent) Allows the template the modify the field configuration for a particular field. Declaration void PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T> fieldGenerator, IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, IFieldConfiguration fieldConfiguration, FieldParent fieldParent) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The instance of the field generator that will be used to generate the field IFieldGeneratorHandler <TModel, T> fieldGeneratorHandler The instance of the field generator handler that will be used to generate the field element IFieldConfiguration fieldConfiguration The field configuration that is being used to configure the field FieldParent fieldParent The parent component of the field Type Parameters Name Description TModel The type of model the form is being displayed for T The type of the property the field is being generated against | Improve this Doc View Source RadioOrCheckboxList(IEnumerable<IHtmlContent>, Boolean) Creates the HTML for a list of radio buttons or checkboxes. Declaration IHtmlContent RadioOrCheckboxList(IEnumerable<IHtmlContent> list, bool isCheckbox) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > list The list of HTML items (one per radio/checkbox) System.Boolean isCheckbox Whether the list is for checkboxes rather than radio buttons Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the radio list Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.ButtonHtmlAttributesExtensions.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.ButtonHtmlAttributesExtensions.html",
    "title": "Class ButtonHtmlAttributesExtensions | ChameleonForms",
    "keywords": "Class ButtonHtmlAttributesExtensions Extension methods on HtmlAttributes for the Twitter Bootstrap 3 template. Inheritance System.Object ButtonHtmlAttributesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.Templates.dll Syntax public static class ButtonHtmlAttributesExtensions Methods | Improve this Doc View Source WithIcon(ButtonHtmlAttributes, String) Adds the given icon to the start of a navigation button. Declaration public static ButtonHtmlAttributes WithIcon(this ButtonHtmlAttributes attrs, string icon) Parameters Type Name Description ButtonHtmlAttributes attrs The Html Attributes from a navigation button System.String icon The icon to use; see https://getbootstrap.com/docs/3.3/components/#glyphicons Returns Type Description ButtonHtmlAttributes The Html Attribute object so other methods can be chained off of it Examples @n.Submit(&quot;Submit&quot;).WithIcon(&quot;arrow-right&quot;) // Output: <button type=\"submit\"><span class=\"glyphicon glyphicon-arrow-right\"></span> Submit</button> | Improve this Doc View Source WithSize(ButtonHtmlAttributes, ButtonSize) Changes the button to use the given size. Declaration public static ButtonHtmlAttributes WithSize(this ButtonHtmlAttributes attrs, ButtonSize size) Parameters Type Name Description ButtonHtmlAttributes attrs The Html Attributes from a navigation button ButtonSize size The size of button Returns Type Description ButtonHtmlAttributes The Html Attribute object so other methods can be chained off of it Examples @n.Submit(&quot;Submit&quot;).WithSize(ButtonSize.Large) | Improve this Doc View Source WithStyle(ButtonHtmlAttributes, EmphasisStyle) Adds the given emphasis to the button. Declaration public static ButtonHtmlAttributes WithStyle(this ButtonHtmlAttributes attrs, EmphasisStyle style) Parameters Type Name Description ButtonHtmlAttributes attrs The Html Attributes from a navigation button EmphasisStyle style The style of button Returns Type Description ButtonHtmlAttributes The Html Attribute object so other methods can be chained off of it Examples @n.Submit(&quot;Submit&quot;).WithStyle(EmphasisStyle.Warning)"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.ButtonSize.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.ButtonSize.html",
    "title": "Enum ButtonSize | ChameleonForms",
    "keywords": "Enum ButtonSize Twitter Bootstrap button sizes: https://getbootstrap.com/docs/3.4/css/#buttons-sizes Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.Templates.dll Syntax public enum ButtonSize Fields Name Description Default Default button size. ExtraSmall Extra small button size. Large Large button size. NoneSpecified None specified. Small Small button size. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.EmphasisStyle.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.EmphasisStyle.html",
    "title": "Enum EmphasisStyle | ChameleonForms",
    "keywords": "Enum EmphasisStyle Twitter Bootstrap alert/emphasis colors: https://getbootstrap.com/docs/3.4/components/#panels-alternatives Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.Templates.dll Syntax public enum EmphasisStyle Fields Name Description Danger Danger styling. Default Default styling. Info Information styling. Primary Primary action styling. Success Success styling. Warning Warning styling. Extension Methods HtmlAttributesExtensions.ToHtmlAttributes()"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.FieldConfigurationExtensions.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.FieldConfigurationExtensions.html",
    "title": "Class FieldConfigurationExtensions | ChameleonForms",
    "keywords": "Class FieldConfigurationExtensions Extension methods on IFieldConfiguration for the Twitter Bootstrap 3 template. Inheritance System.Object FieldConfigurationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.Templates.dll Syntax public static class FieldConfigurationExtensions Methods | Improve this Doc View Source AsInputGroup(IFieldConfiguration) Outputs the field in an input group using prepended and appended HTML. Declaration public static IFieldConfiguration AsInputGroup(this IFieldConfiguration fc) Parameters Type Name Description IFieldConfiguration fc The configuration for a field Returns Type Description IFieldConfiguration The field configuration object to allow for method chaining Examples @n.Field(labelHtml, elementHtml, validationHtml, metadata, new FieldConfiguration().Prepend(beforeHtml).Append(afterHtml).AsInputGroup(), false)"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.html",
    "title": "Namespace ChameleonForms.Templates.TwitterBootstrap3 | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Templates.TwitterBootstrap3 Classes ButtonHtmlAttributesExtensions Extension methods on HtmlAttributes for the Twitter Bootstrap 3 template. FieldConfigurationExtensions Extension methods on IFieldConfiguration for the Twitter Bootstrap 3 template. TwitterBootstrap3FormTemplate The default Chameleon Forms form template renderer. TwitterBootstrap3SubmitButtonTagHelper Adds Boostrap 3 properties to ChameleonForms form buttons. Enums ButtonSize Twitter Bootstrap button sizes: https://getbootstrap.com/docs/3.4/css/#buttons-sizes EmphasisStyle Twitter Bootstrap alert/emphasis colors: https://getbootstrap.com/docs/3.4/components/#panels-alternatives"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.TwitterBootstrap3FormTemplate.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.TwitterBootstrap3FormTemplate.html",
    "title": "Class TwitterBootstrap3FormTemplate | ChameleonForms",
    "keywords": "Class TwitterBootstrap3FormTemplate The default Chameleon Forms form template renderer. Inheritance System.Object DefaultFormTemplate TwitterBootstrap3FormTemplate Implements IFormTemplate Inherited Members DefaultFormTemplate.MessageParagraph(IHtmlContent) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.Templates.dll Syntax public class TwitterBootstrap3FormTemplate : DefaultFormTemplate, IFormTemplate Fields | Improve this Doc View Source IconAttrKey The attribute name to use for adding an icon class to a Html Attributes object. Declaration public const string IconAttrKey = \"data-chameleonforms-twbs-icon\" Field Value Type Description System.String Methods | Improve this Doc View Source BeginField(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the beginning HTML for a single form field that contains other fields nested within it. Declaration public override IHtmlContent BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the parent field Overrides DefaultFormTemplate.BeginField(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) | Improve this Doc View Source BeginForm(String, FormMethod, HtmlAttributes, Nullable<EncType>) Creates the starting HTML for a form. Declaration public override IHtmlContent BeginForm(string action, FormMethod method, HtmlAttributes htmlAttributes, EncType? enctype) Parameters Type Name Description System.String action The form action Microsoft.AspNetCore.Mvc.Rendering.FormMethod method The form method HtmlAttributes htmlAttributes Any HTML attributes the form should use; specified as an anonymous object System.Nullable < EncType > enctype The encoding type for the form Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The starting HTML for a form Overrides DefaultFormTemplate.BeginForm(String, FormMethod, HtmlAttributes, Nullable<EncType>) | Improve this Doc View Source BeginMessage(MessageType, IHtmlContent) Creates the beginning HTML for a message. Declaration public override IHtmlContent BeginMessage(MessageType messageType, IHtmlContent heading) Parameters Type Name Description MessageType messageType The type of message being displayed Microsoft.AspNetCore.Html.IHtmlContent heading The heading for the message Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for the message Overrides DefaultFormTemplate.BeginMessage(MessageType, IHtmlContent) | Improve this Doc View Source BeginNavigation() Creates the beginning HTML for a navigation section. Declaration public override IHtmlContent BeginNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a navigation section Overrides DefaultFormTemplate.BeginNavigation() | Improve this Doc View Source BeginNestedSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section that is nested within another section. Declaration public override IHtmlContent BeginNestedSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the nested section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the nested section HtmlAttributes htmlAttributes Any HTML attributes the nested section container should use; specified as an anaonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a nested section Overrides DefaultFormTemplate.BeginNestedSection(IHtmlContent, IHtmlContent, HtmlAttributes) | Improve this Doc View Source BeginSection(IHtmlContent, IHtmlContent, HtmlAttributes) Creates the beginning HTML for a section. Declaration public override IHtmlContent BeginSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent heading The heading of the section Microsoft.AspNetCore.Html.IHtmlContent leadingHtml Any HTML to output at the start of the section HtmlAttributes htmlAttributes Any HTML attributes the section container should use; specified as an anonymous object Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The beginning HTML for a section Overrides DefaultFormTemplate.BeginSection(IHtmlContent, IHtmlContent, HtmlAttributes) | Improve this Doc View Source Button(IHtmlContent, String, String, String, HtmlAttributes) Creates the HTML for a button. Declaration public override IHtmlContent Button(IHtmlContent content, string type, string id, string value, HtmlAttributes htmlAttributes) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent content The content for the user to see or null if the value should be used instead System.String type The type of button or null if a generic button should be used System.String id The name/id of the button or null if one shouldn't be set System.String value The value to submit if the button is clicked or null if one shouldn't be set HtmlAttributes htmlAttributes Any HTML attributes to add to the button or null if there are none Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the button Overrides DefaultFormTemplate.Button(IHtmlContent, String, String, String, HtmlAttributes) Remarks Uses an <input> by default so the submitted value works in IE7. See http://rommelsantor.com/clog/2012/03/12/fixing-the-ie7-submit-value/ | Improve this Doc View Source EndField() Creates the ending HTML for a single form field that contains other fields nested within it. Declaration public override IHtmlContent EndField() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the parent field Overrides DefaultFormTemplate.EndField() | Improve this Doc View Source EndForm() Creates the ending HTML for a form. Declaration public override IHtmlContent EndForm() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a form Overrides DefaultFormTemplate.EndForm() | Improve this Doc View Source EndMessage() Creates the ending HTML for a message. Declaration public override IHtmlContent EndMessage() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for the message Overrides DefaultFormTemplate.EndMessage() | Improve this Doc View Source EndNavigation() Creates the ending HTML for a navigation section. Declaration public override IHtmlContent EndNavigation() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a navigation section Overrides DefaultFormTemplate.EndNavigation() | Improve this Doc View Source EndNestedSection() Creates the ending HTML for a section that is nested within another section. Declaration public override IHtmlContent EndNestedSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a nested section Overrides DefaultFormTemplate.EndNestedSection() | Improve this Doc View Source EndSection() Creates the ending HTML for a section. Declaration public override IHtmlContent EndSection() Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The ending HTML for a section Overrides DefaultFormTemplate.EndSection() | Improve this Doc View Source Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the HTML for a single form field. Declaration public override IHtmlContent Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent labelHtml The HTML that comprises the form label Microsoft.AspNetCore.Html.IHtmlContent elementHtml The HTML that comprieses the field itself Microsoft.AspNetCore.Html.IHtmlContent validationHtml The HTML that comprises the field's validation messages Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the field Overrides DefaultFormTemplate.Field(IHtmlContent, IHtmlContent, IHtmlContent, ModelMetadata, IReadonlyFieldConfiguration, Boolean) | Improve this Doc View Source PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T>, IFieldGeneratorHandler<TModel, T>, IFieldConfiguration, FieldParent) Allows the template the modify the field configuration for a particular field. Declaration public override void PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T> fieldGenerator, IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, IFieldConfiguration fieldConfiguration, FieldParent fieldParent) Parameters Type Name Description IFieldGenerator <TModel, T> fieldGenerator The instance of the field generator that will be used to generate the field IFieldGeneratorHandler <TModel, T> fieldGeneratorHandler The instance of the field generator handler that will be used to generate the field element IFieldConfiguration fieldConfiguration The field configuration that is being used to configure the field FieldParent fieldParent The parent component of the field Type Parameters Name Description TModel The type of model the form is being displayed for T The type of the property the field is being generated against Overrides ChameleonForms.Templates.Default.DefaultFormTemplate.PrepareFieldConfiguration<TModel, T>(ChameleonForms.FieldGenerators.IFieldGenerator<TModel, T>, ChameleonForms.FieldGenerators.Handlers.IFieldGeneratorHandler<TModel, T>, ChameleonForms.Component.Config.IFieldConfiguration, ChameleonForms.Component.FieldParent) | Improve this Doc View Source RadioOrCheckboxList(IEnumerable<IHtmlContent>, Boolean) Creates the HTML for a list of radio buttons or checkboxes. Declaration public override IHtmlContent RadioOrCheckboxList(IEnumerable<IHtmlContent> list, bool isCheckbox) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Html.IHtmlContent > list The list of HTML items (one per radio/checkbox) System.Boolean isCheckbox Whether the list is for checkboxes rather than radio buttons Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the radio list Overrides DefaultFormTemplate.RadioOrCheckboxList(IEnumerable<IHtmlContent>, Boolean) | Improve this Doc View Source RequiredDesignator(ModelMetadata, IReadonlyFieldConfiguration, Boolean) Creates the HTML for a required designator for a single form field (will only be output if the field is required). Declaration protected override IHtmlContent RequiredDesignator(ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata fieldMetadata The metadata for the field being created IReadonlyFieldConfiguration fieldConfiguration Configuration for the field System.Boolean isValid Whether or not the field is valid Returns Type Description Microsoft.AspNetCore.Html.IHtmlContent The HTML for the required designator of field with the given information Overrides DefaultFormTemplate.RequiredDesignator(ModelMetadata, IReadonlyFieldConfiguration, Boolean) Implements IFormTemplate Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Templates.TwitterBootstrap3.TwitterBootstrap3SubmitButtonTagHelper.html": {
    "href": "apidocs/ChameleonForms.Templates.TwitterBootstrap3.TwitterBootstrap3SubmitButtonTagHelper.html",
    "title": "Class TwitterBootstrap3SubmitButtonTagHelper | ChameleonForms",
    "keywords": "Class TwitterBootstrap3SubmitButtonTagHelper Adds Boostrap 3 properties to ChameleonForms form buttons. Inheritance System.Object Microsoft.AspNetCore.Razor.TagHelpers.TagHelper TwitterBootstrap3SubmitButtonTagHelper Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Inherited Members Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Order System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Templates.TwitterBootstrap3 Assembly : ChameleonForms.dll Syntax [HtmlTargetElement(\"submit-button\")] [HtmlTargetElement(\"form-button\")] [HtmlTargetElement(\"reset-button\")] public class TwitterBootstrap3SubmitButtonTagHelper : TagHelper, ITagHelper, ITagHelperComponent Properties | Improve this Doc View Source EmphasisStyle Emphasis style for Bootstrap 3 form button. Declaration public EmphasisStyle EmphasisStyle { get; set; } Property Value Type Description EmphasisStyle | Improve this Doc View Source Icon Glyphicon icon for Bootstrap 3 form button. Declaration public string Icon { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Button size for Bootstrap 3 form button. Declaration public ButtonSize Size { get; set; } Property Value Type Description ButtonSize Methods | Improve this Doc View Source ProcessAsync(TagHelperContext, TagHelperOutput) Called when the tag helper is being processed. Declaration public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters Type Name Description Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context The context within which the tag helper is processed Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput output The output from the tag helper Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) Implements Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Utils.DisposableHtmlHelper-1.html": {
    "href": "apidocs/ChameleonForms.Utils.DisposableHtmlHelper-1.html",
    "title": "Class DisposableHtmlHelper<TModel> | ChameleonForms",
    "keywords": "Class DisposableHtmlHelper<TModel> HTML helper that can be created in a using block. Inheritance System.Object Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper <TModel> DisposableHtmlHelper<TModel> Implements Microsoft.AspNetCore.Mvc.ViewFeatures.IViewContextAware Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper System.IDisposable Inherited Members Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.CheckBoxFor(System.Linq.Expressions.Expression<System.Func<TModel, System.Boolean>>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.DisplayFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.DisplayNameForInnerType<TModelItem, TResult>(System.Linq.Expressions.Expression<System.Func<TModelItem, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.DisplayNameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.DisplayTextFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.DropDownListFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.EditorFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.GetExpressionName<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.GetModelExplorer<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.HiddenFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.IdFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.LabelFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.ListBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.NameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.PasswordFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.RadioButtonFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.TextAreaFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.Int32, System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.TextBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.ValidationMessageFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.ValueFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel, TResult>>, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper<TModel>.ViewData Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationInputCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationInputValidCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationMessageCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationMessageValidCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationSummaryCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationSummaryValidCssClassName Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ActionLink(System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.AntiForgeryToken() Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.BeginForm(System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.BeginRouteForm(System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.CheckBox(System.String, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.CreateForm() Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Display(System.String, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DisplayName(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DisplayText(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DropDownList(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Editor(System.String, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Encode(System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Encode(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.EndForm() Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.FormatValue(System.Object, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateCheckBox(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateDisplay(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateDisplayName(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateDropDown(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateEditor(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateForm(System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateHidden(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Boolean, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateId(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateIdFromName(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateLabel(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateListBox(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateName(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GeneratePassword(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateRadioButton(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateRouteForm(System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateTextArea(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Int32, System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateTextBox(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateValidationMessage(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateValidationSummary(System.Boolean, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateValue(System.String, System.Object, System.String, System.Boolean) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetEnumSelectList(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetEnumSelectList(System.Type) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetEnumSelectList<TEnum>() Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetFormMethodString(Microsoft.AspNetCore.Mvc.Rendering.FormMethod) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Hidden(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Id(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Label(System.String, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ListBox(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Name(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ObjectToDictionary(System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.PartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Password(System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RadioButton(System.String, System.Object, System.Nullable<System.Boolean>, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Raw(System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Raw(System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RenderPartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RenderPartialCoreAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.IO.TextWriter) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RouteLink(System.String, System.String, System.String, System.String, System.String, System.Object, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.TextArea(System.String, System.String, System.Int32, System.Int32, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.TextBox(System.String, System.Object, System.String, System.Object) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationMessage(System.String, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationSummary(System.Boolean, System.String, System.Object, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Value(System.String, System.String) Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Html5DateRenderingMode Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.IdAttributeDotReplacement Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.MetadataProvider Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.TempData Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.UrlEncoder Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ViewBag Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ViewContext System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Utils Assembly : ChameleonForms.dll Syntax public class DisposableHtmlHelper<TModel> : HtmlHelper<TModel>, IViewContextAware, IHtmlHelper<TModel>, IHtmlHelper, IDisposable Type Parameters Name Description TModel The model type of the HTML helper Constructors | Improve this Doc View Source DisposableHtmlHelper(IHtmlGenerator, ICompositeViewEngine, IModelMetadataProvider, IViewBufferScope, HtmlEncoder, UrlEncoder, ModelExpressionProvider, ViewContext) Creates a DisposableHtmlHelper<TModel> to wrap a scope around a new HtmlHelper instance. Declaration public DisposableHtmlHelper(IHtmlGenerator htmlGenerator, ICompositeViewEngine viewEngine, IModelMetadataProvider metadataProvider, IViewBufferScope bufferScope, HtmlEncoder htmlEncoder, UrlEncoder urlEncoder, ModelExpressionProvider modelExpressionProvider, ViewContext viewContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator htmlGenerator The HTML generator to use Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine viewEngine The view engine to use Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider metadataProvider The metadata provider to use Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope bufferScope The buffer scope to use System.Text.Encodings.Web.HtmlEncoder htmlEncoder The HTML encoder to use System.Text.Encodings.Web.UrlEncoder urlEncoder The URL encoder to use Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider modelExpressionProvider The model expression provider Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext The new view context to wrap Methods | Improve this Doc View Source Dispose() Dispose of the scope. Declaration public void Dispose() Implements Microsoft.AspNetCore.Mvc.ViewFeatures.IViewContextAware Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper System.IDisposable Extension Methods Extensions.Attrs(IHtmlHelper, Func<Object, Object>[]) HtmlAttributesExtensions.ToHtmlAttributes(Object) ChameleonFormExtensions.BeginChameleonForm<TModel>(IHtmlHelper<TModel>, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) ChameleonFormExtensions.BeginChameleonFormFor<TParentModel, TChildModel>(IHtmlHelper<TParentModel>, Expression<Func<TParentModel, TChildModel>>, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) ChameleonFormExtensions.BeginChameleonFormFor<TOriginalModel, TNewModel>(IHtmlHelper<TOriginalModel>, TNewModel, String, FormMethod, HtmlAttributes, Nullable<EncType>, Nullable<Boolean>) HtmlHelperExtensions.For<TParentModel, TChildModel>(IHtmlHelper<TParentModel>, Expression<Func<TParentModel, TChildModel>>, Boolean) HtmlHelperExtensions.For<TModel>(IHtmlHelper, TModel, String) HtmlHelperExtensions.GetDefaultFormTemplate(IHtmlHelper) HtmlHelperExtensions.GetFullHtmlFieldName<TModel, TResult>(IHtmlHelper<TModel>, Expression<Func<TModel, TResult>>) HtmlHelperExtensions.GetFieldName<TModel, TResult>(IHtmlHelper<TModel>, Expression<Func<TModel, TResult>>) HtmlHelperExtensions.IsInChameleonForm(IHtmlHelper) HtmlHelperExtensions.GetChameleonForm<TModel>(IHtmlHelper<TModel>) HtmlHelperExtensions.IsInChameleonFormsSection(IHtmlHelper) HtmlHelperExtensions.GetChameleonFormsSection<TModel>(IHtmlHelper<TModel>) HtmlHelperExtensions.IsInChameleonFormsField(IHtmlHelper) HtmlHelperExtensions.GetChameleonFormsField<TModel>(IHtmlHelper<TModel>) HtmlHelperExtensions.IsInChameleonFormsNavigation(IHtmlHelper) HtmlHelperExtensions.GetChameleonFormsNavigation<TModel>(IHtmlHelper<TModel>) HtmlHelperExtensions.IsInChameleonFormsMessage(IHtmlHelper) HtmlHelperExtensions.GetChameleonFormsMessage<TModel>(IHtmlHelper<TModel>)"
  },
  "apidocs/ChameleonForms.Utils.ExpressionBuilder.html": {
    "href": "apidocs/ChameleonForms.Utils.ExpressionBuilder.html",
    "title": "Class ExpressionBuilder | ChameleonForms",
    "keywords": "Class ExpressionBuilder Provides static methods to create System.Linq.Expressions.Expression<TDelegate> instances. Inheritance System.Object ExpressionBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Utils Assembly : ChameleonForms.dll Syntax public static class ExpressionBuilder Methods | Improve this Doc View Source CreateAccessor<T, TResult>(String) Creates a lambda expression that represents an accessor to a property from an object of type T . Declaration public static Expression<Func<T, TResult>> CreateAccessor<T, TResult>(string propertyNameOrPath) Parameters Type Name Description System.String propertyNameOrPath The name or the path to the property to be accessed composed of simple dot-separated property access expressions. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, TResult>> The built System.Linq.Expressions.Expression<TDelegate> instance representing the property accessor. Type Parameters Name Description T The type that contains the property to be accessed. TResult The type of the accessed property used as the delegate return type."
  },
  "apidocs/ChameleonForms.Utils.html": {
    "href": "apidocs/ChameleonForms.Utils.html",
    "title": "Namespace ChameleonForms.Utils | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Utils Classes DisposableHtmlHelper<TModel> HTML helper that can be created in a using block. ExpressionBuilder Provides static methods to create System.Linq.Expressions.Expression<TDelegate> instances. ViewContextExtensions Extension methods on Microsoft.AspNetCore.Mvc.Rendering.ViewContext ."
  },
  "apidocs/ChameleonForms.Utils.ViewContextExtensions.html": {
    "href": "apidocs/ChameleonForms.Utils.ViewContextExtensions.html",
    "title": "Class ViewContextExtensions | ChameleonForms",
    "keywords": "Class ViewContextExtensions Extension methods on Microsoft.AspNetCore.Mvc.Rendering.ViewContext . Inheritance System.Object ViewContextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Utils Assembly : ChameleonForms.dll Syntax public static class ViewContextExtensions Methods | Improve this Doc View Source GetHtmlHelper<TModel>(ViewContext) Returns an Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel> which has been resolved from request services and contextualised to the given Microsoft.AspNetCore.Mvc.Rendering.ViewContext . Declaration public static IHtmlHelper<TModel> GetHtmlHelper<TModel>(this ViewContext viewContext) Parameters Type Name Description Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext The view context to contextualise against Returns Type Description Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper <TModel> The contextualised HTML helper Type Parameters Name Description TModel The model type to return a HTML Helper instance for"
  },
  "apidocs/ChameleonForms.Validators.DateTimeClientModelValidatorProvider.html": {
    "href": "apidocs/ChameleonForms.Validators.DateTimeClientModelValidatorProvider.html",
    "title": "Class DateTimeClientModelValidatorProvider | ChameleonForms",
    "keywords": "Class DateTimeClientModelValidatorProvider An implementation of Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider which provides client validators for System.DateTime fields. Inheritance System.Object DateTimeClientModelValidatorProvider Implements Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Validators Assembly : ChameleonForms.dll Syntax public class DateTimeClientModelValidatorProvider : IClientModelValidatorProvider Methods | Improve this Doc View Source CreateValidators(ClientValidatorProviderContext) Called when validators need to be created from this validator provider. Declaration public void CreateValidators(ClientValidatorProviderContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext context The context within which validators need to be provided Implements Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/ChameleonForms.Validators.html": {
    "href": "apidocs/ChameleonForms.Validators.html",
    "title": "Namespace ChameleonForms.Validators | ChameleonForms",
    "keywords": "Namespace ChameleonForms.Validators Classes DateTimeClientModelValidatorProvider An implementation of Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider which provides client validators for System.DateTime fields. IntegralNumericClientModelValidatorProvider An implementation of Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider which provides client validators for integral numeric types."
  },
  "apidocs/ChameleonForms.Validators.IntegralNumericClientModelValidatorProvider.html": {
    "href": "apidocs/ChameleonForms.Validators.IntegralNumericClientModelValidatorProvider.html",
    "title": "Class IntegralNumericClientModelValidatorProvider | ChameleonForms",
    "keywords": "Class IntegralNumericClientModelValidatorProvider An implementation of Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider which provides client validators for integral numeric types. Inheritance System.Object IntegralNumericClientModelValidatorProvider Implements Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ChameleonForms.Validators Assembly : ChameleonForms.dll Syntax public class IntegralNumericClientModelValidatorProvider : IClientModelValidatorProvider Methods | Improve this Doc View Source CreateValidators(ClientValidatorProviderContext) Called when validators need to be created from this validator provider. Declaration public void CreateValidators(ClientValidatorProviderContext context) Parameters Type Name Description Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext context The context within which validators need to be provided Implements Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider Extension Methods HtmlAttributesExtensions.ToHtmlAttributes(Object)"
  },
  "apidocs/Microsoft.AspNetCore.Html.html": {
    "href": "apidocs/Microsoft.AspNetCore.Html.html",
    "title": "Namespace Microsoft.AspNetCore.Html | ChameleonForms",
    "keywords": "Namespace Microsoft.AspNetCore.Html Classes HtmlContentExtensions Extensions to Microsoft.AspNetCore.Html.IHtmlContent ."
  },
  "apidocs/Microsoft.AspNetCore.Html.HtmlContentExtensions.html": {
    "href": "apidocs/Microsoft.AspNetCore.Html.HtmlContentExtensions.html",
    "title": "Class HtmlContentExtensions | ChameleonForms",
    "keywords": "Class HtmlContentExtensions Extensions to Microsoft.AspNetCore.Html.IHtmlContent . Inheritance System.Object HtmlContentExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Html Assembly : ChameleonForms.Core.dll Syntax public static class HtmlContentExtensions Methods | Improve this Doc View Source ToHtmlString(IHtmlContent) Returns the encoded HTML string for the Microsoft.AspNetCore.Html.IHtmlContent . Declaration public static string ToHtmlString(this IHtmlContent htmlContent) Parameters Type Name Description Microsoft.AspNetCore.Html.IHtmlContent htmlContent The Microsoft.AspNetCore.Html.IHtmlContent to extract the string for Returns Type Description System.String The encoded HTML in string form"
  },
  "docs/boolean.html": {
    "href": "docs/boolean.html",
    "title": "Boolean Fields | ChameleonForms",
    "keywords": "Boolean Fields If you need to collect Boolean data you can use a bool or bool? model property, e.g.: public bool BooleanField { get; set; } public bool? NullableBooleanField { get; set; } Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: Non-nullable Boolean (checkbox) This field will always be Required since it's not nullable. <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"checkbox\" value=\"true\" /> <label for=\"%propertyName%\">%inlineLabel%</label> Nullable Boolean (drop-down with empty option) If the field is Required then the empty option will still show and it will be selected if the value of the property in the model is null, but it will trigger a validation error if the user selects it. <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\"></option> <option value=\"true\">Yes</option> <option value=\"false\">No</option> </select> Configurability Inline label If you are outputting a non-nullable Boolean then a label will show next to the field as part of the Field Element in addition to the Field Label that shows up as part of outputting the full field. If you want to override just the label text for this label (and not the Field Label as well) then you can do so using the InlineLabel methods in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant @{ var htmlContent = new HtmlString(\"<strong>override</strong>\"); Func<dynamic, IHtmlContent> templatedRazorDelegate = @<strong>override</strong>; } <field for=\"BooleanField\" inline-label=\"override\" /> <field for=\"BooleanField\" inline-label-html=\"templatedRazorDelegate\" /> <field for=\"BooleanField\" inline-label-html-content=\"htmlContent\" /> @s.FieldFor(m => m.BooleanField).InlineLabel(\"override\") @s.FieldFor(m => m.BooleanField).InlineLabel(new HtmlString(\"<strong>override</strong>\")) @s.FieldFor(m => m.BooleanField).InlineLabel(@<strong>overriden label</strong>) Display as drop-down You can force a Boolean field to display as a drop-down box rather than a checkbox using the AsDropDown method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsDropDown method is mapped to as=\"Dropdown\" . <field for=\"BooleanField\" as=\"Dropdown\" /> @s.FieldFor(m => m.BooleanField).AsDropDown() This will change the default HTML for the non-nullable Boolean field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> <option value=\"true\">Yes</option> <option value=\"false\">No</option> </select> Display as list of radio buttons You can force a Boolean field to display as a list of radio buttons rather than a checkbox using the AsRadioList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsRadioList method is mapped to as=\"RadioList\" . <field for=\"BooleanField\" as=\"RadioList\" /> <field for=\"NullableBooleanField\" as=\"RadioList\" /> @s.FieldFor(m => m.BooleanField).AsRadioList() @s.FieldFor(m => m.NullableBooleanField).AsRadioList() And it will change the default HTML for the non-nullable Boolean field and the Required nullable Boolean field as shown above to: <ul> <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_1\" name=\"%propertyName\" required=\"required\" type=\"radio\" value=\"true\" /> <label for=\"%propertyName%_1\">%trueDescription%</label></li> <li><input %htmlAttributes% checked=\"checked\" id=\"%propertyName%_2\" name=\"%propertyName%\" required=\"required\" type=\"radio\" value=\"false\" /> <label for=\"%propertyName%_2\">%falseDescription%</label></li> </ul> And it will change the default HTML for the non-Required nullable Boolean field as shown above to: <ul> <li><input %validationAttrs% %htmlAttributes% checked=\"checked\" id=\"%propertyName%_1\" name=\"%propertyName\" type=\"radio\" value=\"\" /> <label for=\"%propertyName%_1\">%noneDescription%</label></li> <li><input %htmlAttributes% id=\"%propertyName%_2\" name=\"%propertyName%\" type=\"radio\" value=\"true\" /> <label for=\"%propertyName%_2\">%trueDescription%</label></li> <li><input %htmlAttributes% id=\"%propertyName%_3\" name=\"%propertyName%\" type=\"radio\" value=\"false\" /> <label for=\"%propertyName%_3\">%falseDescription%</label></li> </ul> Change the text descriptions of true, false and none When you display a Boolean field as a drop-down or a list of radio buttons you can change the text that is used to display the true , false and none values to the user. By default the text used is Yes , No and None (except for drop-downs, which have an empty string instead of None ) respectively. To change the text simply use the WithTrueAs , WithFalseAs and WithNoneAs methods respectively, e.g.: Tag Helpers variant HTML Helpers variant The WithTrueAs / WithFalseAs / WithNoneAs methods are mapped to true-label=\"{label}\" / false-label=\"{label}\" / none-label=\"{label}\" . <field for=\"NullableBooleanField\" true-label=\"OK\" false-label=\"Not OK\" none-label=\"No comment\" /> @s.FieldFor(m => m.NullableBooleanField).WithTrueAs(\"OK\").WithFalseAs(\"Not OK\").WithNoneAs(\"No comment\") This will change the default HTML for the nullable Boolean field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No comment</option> <option value=\"true\">OK</option> <option value=\"false\">Not OK</option> </select> Hide empty item If you have a nullable Boolean field then it will show the empty item and this item will be selected by default if the field value is null. If for some reason you want a nullable boolean, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant <field for=\"NullableBooleanField\" hide-empty-item=\"true\" /> @s.FieldFor(m => m.NullableBooleanField).HideEmptyItem() This will change the default HTML for the nullable Boolean field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option value=\"true\">Yes</option> <option value=\"false\">No</option> </select> Hide inline label If you would like to output just a checkbox for a non-nullable boolean field without an inline label next to it you can do so with the WithoutInlineLabel method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant <field for=\"BooleanField\" without-inline-label=\"true\" /> @s.FieldFor(m => m.BooleanField).WithoutInlineLabel() This will change the default HTML for the non-nullable Boolean field as shown above to: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"checkbox\" value=\"true\" /> Wrap input with label If you would like to wrap the checkbox with the inline label you can do so with the InlineLabelWrapsElement method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant <field for=\"BooleanField\" inline-label-wraps-element=\"true\" /> @s.FieldFor(m => m.BooleanField).InlineLabelWrapsElement() This will change the default HTML for the field as shown above to: <label><input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"checkbox\" value=\"true\" /> %inlineLabel%</label>"
  },
  "docs/bootstrap-template.html": {
    "href": "docs/bootstrap-template.html",
    "title": "Twitter Bootstrap 3 Template | ChameleonForms",
    "keywords": "Twitter Bootstrap 3 Template ChameleonForms has a built-in Twitter Bootstrap 3 template that you can switch to as part of global configuration or on a per-form basis . This will allow you to rapidly develop forms for your Twitter Bootstrap 3 powered site (useful for quick prototyping), but give you the flexibility to easily change the template in the future if your quick prototype makes it big and warrants a custom redesign. Support for Bootstrap 4 and other commonly used templates like Material will be added in the future. If you'd like to add support feel free to issue a pull request . Getting started The easiest way to get up and running with Twitter Bootstrap is to specify it as part of the global config: In Startup.cs simply change your AddChameleonForms call to reference the TwitterBootstrap3FormTemplate : public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms<TwitterBootstrap3FormTemplate>(...); } If you already have Twitter Bootstrap referenced in your layout then add the extra CSS and JavaScript files to get validation highlighting looking great Create a ChameleonForm using the BeginChameleonForm extension method and you are good to go ChameleonForms custom CSS and JavaScript to complement Bootstrap There are two files that ChameleonForms provides in the wwwroot/lib/chameleonforms folder that you can optionally include in your Chameleon-powered Twitter Bootstrap form pages (or your layout if you want to include them across the site): chameleonforms-twitterbootstrap.css Makes form hints a light grey even when the field is invalid (otherwise it would turn red making it look like an error) Makes the required designator that ChameleonForms puts in looks better Makes field labels for fields that don't have a <label> look the same as ones that do (bold) otherwise it looks weird unobtrusive-twitterbootstrap3-validation.chameleonforms.js Adds the has-error class to the field container when there is an unobtrusive validation error Removes the has-error class from the field container when an invalid field (either from client-side or server-side validation) becomes valid when the user interacts with the field Only supports jQuery validate unobtrusive validation, doesn't yet support aspnet-validation HTML Generation You can find documentation about the HTML that is generated by the Twitter Bootstrap template across the ChameleonForms documentation: Form HTML Message HTML - including the documentation about how the ChameleonForms MessageType maps to the Twitter Bootstrap Emphasis Styles Section HTML - including top-level and nested sections Navigation HTML - including how to add icons to submit buttons, control their size and control their emphasis style (and a great example of the options ) Field HTML - including: The HTML template it uses for inputs, textareas, select boxes, single checkboxes, radio/checkbox lists, file upload controls and other controls The default required designator HTML ( which can be overriden ) How to create input groups with the input-group-addon class automatically added to appended and prepended content The HTML for nested fields Horizontal and inline forms The template doesn't currently support horizontal or inline forms. If you create such templates then please send them to us in a pull request so we can include them in the main library. Modifications If you think that the changes you want to make to the template are specific to your needs then you can easily extend the template to change the bits you want (just extend the TwitterBootstrap3FormTemplate class), while still using the work we have done (and subscribing to updates when you update the ChameleonForms NuGet package)."
  },
  "docs/comparison.html": {
    "href": "docs/comparison.html",
    "title": "Compare ChameleonForms to out-of-the-box ASP.NET MVC | ChameleonForms",
    "keywords": "Compare ChameleonForms to out-of-the-box ASP.NET MVC One of the easiest ways to understand ChameleonForms is to see an equivalent sample of something you are already familiar with (e.g. out-of-the-box ASP.NET MVC) alongside the equivalent with ChameleonForms. With this in mind we have created an example comparison in the Example project that you can run and inspect to illustrate how to implement an example form using: Built-in Tag helpers Built-in HTML helpers Abstracted and templated Editor Templates ChameleonForms - Tag Helpers ChameleonForms - HTML Helpers Example Form The example in question is an arbitrary signup form against the SignupViewModel in the ComparisonController : public class SignupViewModel { [Required] public string FirstName { get; set; } [Required] public string LastName { get; set; } [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] [Required] public DateTime DateOfBirth { get; set; } [Required] [EmailAddress] public string EmailAddress { get; set; } [Required] [DataType(DataType.Password)] public string Password { get; set; } [Required] public MembershipType MembershipType { get; set; } [Url] public Uri Homepage { get; set; } [DataType(DataType.MultilineText)] public string Bio { get; set; } [Required] public bool TermsAndConditions { get; set; } } public enum MembershipType { Standard, Bonze, Silver, Gold, Platinum } Example Form Structure The sample implementation of the form has been split up as follows: Form Message (Information) Instructions to fill in the form to sign up for an account Section to enter details Fields for first name, last name and date of birth Section to enter account details Fields for email address, password, and drop down for membership type Section to enter additional details Field for homepage and text area for bio Message (Action) Link to terms and conditions and checkbox for user to confirm Navigation Submit button In-depth comparison Here is a comparison of the different implementations of the same form: Tag Helpers HTML Helpers Editor Templates ChameleonForms Tag Helpers ChameleonForms HTML Helpers <form asp-action=\"TagHelpers\" asp-controller=\"Comparison\" method=\"post\" id=\"signup-form\" novalidate=\"novalidate\"> <div class=\"information_message\"> <h3>Signup for an account</h3> <div class=\"message\"> <p>Please fill in your information below to signup for an account.</p> </div> </div> <fieldset> <legend>Your details</legend> <dl> <dt><label asp-for=\"FirstName\"></label> <em class=\"required\">*</em></dt> <dd><input asp-for=\"FirstName\" required=\"required\" /> <span asp-validation-for=\"FirstName\"></span></dd> <dt><label asp-for=\"LastName\"></label> <em class=\"required\">*</em></dt> <dd><input asp-for=\"LastName\" required=\"required\" /> <span asp-validation-for=\"LastName\"></span></dd> <dt><label asp-for=\"DateOfBirth\"></label> <em class=\"required\">*</em></dt> <dd><input asp-for=\"DateOfBirth\" required=\"required\" type=\"text\" data-val-format=\"d/M/yyyy\" aria-describedby=\"DateOfBirth--Hint\" /><div class=\"hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> <span asp-validation-for=\"DateOfBirth\"></span></dd> </dl> </fieldset> <fieldset> <legend>Account details</legend> <dl> <dt><label asp-for=\"EmailAddress\"></label> <em class=\"required\">*</em></dt> <dd><input asp-for=\"EmailAddress\" required=\"required\" aria-describedby=\"EmailAddress--Hint\" /><div class=\"hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> <span asp-validation-for=\"EmailAddress\"></span></dd> <dt><label asp-for=\"Password\"></label> <em class=\"required\">*</em></dt> <dd><input asp-for=\"Password\" required=\"required\" /> <span asp-validation-for=\"Password\"></span></dd> <dt><label asp-for=\"MembershipType\"></label> <em class=\"required\">*</em></dt> <dd><select asp-for=\"MembershipType\" required=\"required\" asp-items=\"Html.GetEnumSelectList<ComparisonController.MembershipType>()\"></select> <span asp-validation-for=\"MembershipType\"></span></dd> </dl> </fieldset> <fieldset> <legend>Additional details</legend> <dl> <dt><label asp-for=\"Bio\"></label></dt> <dd><textarea asp-for=\"Bio\" cols=\"20\" rows=\"2\"></textarea> <span asp-validation-for=\"Bio\"></span></dd> <dt><label asp-for=\"Homepage\"></label></dt> <dd><input asp-for=\"Homepage\" placeholder=\"https://\" /> <span asp-validation-for=\"Homepage\"></span></dd> </dl> </fieldset> <div class=\"action_message\"> <h3>Confirm the Terms &amp; Conditions</h3> <div class=\"message\"> <p>Please <a href=\"#\">read the terms and conditions</a>.</p> <input asp-for=\"TermsAndConditions\" /> <label asp-for=\"TermsAndConditions\">I agree to the terms and conditions</label> </div> </div> <div class=\"form_navigation\"> <button type=\"submit\" class=\"btn btn-primary\">Signup</button> </div> </form> @using (Html.BeginForm(\"HtmlHelpers\", \"Comparison\", FormMethod.Post, new {id = \"signup-form\", novalidate = \"novalidate\"})) { <div class=\"information_message\"> <h3>Signup for an account</h3> <div class=\"message\"> <p>Please fill in your information below to signup for an account.</p> </div> </div> <fieldset> <legend>Your details</legend> <dl> <dt>@Html.LabelFor(m => m.FirstName) <em class=\"required\">*</em></dt> <dd>@Html.TextBoxFor(m => m.FirstName, new { required = \"required\" }) @Html.ValidationMessageFor(m => m.FirstName)</dd> <dt>@Html.LabelFor(m => m.LastName) <em class=\"required\">*</em></dt> <dd>@Html.TextBoxFor(m => m.LastName, new { required = \"required\" }) @Html.ValidationMessageFor(m => m.LastName)</dd> <dt>@Html.LabelFor(m => m.DateOfBirth) <em class=\"required\">*</em></dt> <dd>@Html.TextBoxFor(m => m.DateOfBirth, new{data_val_format = \"d/M/yyyy\", aria_describedby = \"DateOfBirth--Hint\", required = \"required\"})<div class=\"hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> @Html.ValidationMessageFor(m => m.DateOfBirth)</dd> </dl> </fieldset> <fieldset> <legend>Account details</legend> <dl> <dt>@Html.LabelFor(m => m.EmailAddress) <em class=\"required\">*</em></dt> <dd>@Html.TextBoxFor(m => m.EmailAddress, new{aria_describedby = \"EmailAddress--Hint\", required = \"required\"})<div class=\"hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> @Html.ValidationMessageFor(m => m.EmailAddress)</dd> <dt>@Html.LabelFor(m => m.Password) <em class=\"required\">*</em></dt> <dd>@Html.PasswordFor(m => m.Password, new { required = \"required\" }) @Html.ValidationMessageFor(m => m.Password)</dd> <dt>@Html.LabelFor(m => m.MembershipType) <em class=\"required\">*</em></dt> <dd>@Html.DropDownListFor(m => m.MembershipType, Enum.GetValues(typeof(ComparisonController.MembershipType)) .Cast<ComparisonController.MembershipType>() .Select(m => new SelectListItem{Text = m.Humanize(), Value = m.ToString()}), new { required = \"required\" } ) @Html.ValidationMessageFor(m => m.MembershipType) </dd> </dl> </fieldset> <fieldset> <legend>Additional details</legend> <dl> <dt>@Html.LabelFor(m => m.Bio)</dt> <dd>@Html.TextAreaFor(m => m.Bio) @Html.ValidationMessageFor(m => m.Bio)</dd> <dt>@Html.LabelFor(m => m.Homepage)</dt> <dd>@Html.TextBoxFor(m => m.Homepage, new{placeholder = \"https://\", type = \"url\"}) @Html.ValidationMessageFor(m => m.Homepage)</dd> </dl> </fieldset> <div class=\"action_message\"> <h3>Confirm the Terms &amp; Conditions</h3> <div class=\"message\"> <p>Please <a href=\"#\">read the terms and conditions</a>.</p> @Html.CheckBoxFor(m => m.TermsAndConditions) @Html.LabelFor(m => m.TermsAndConditions, \"I agree to the terms and conditions\") </div> </div> <div class=\"form_navigation\"> <button type=\"submit\" class=\"btn btn-primary\">Signup</button> </div> } Note: for this to work there are a lot of extra files you need to implement . @using (Html.BeginForm(\"EditorTemplates\", \"Comparison\", FormMethod.Post, new {id = \"signup-form\", novalidate = \"novalidate\"})) { <div class=\"information_message\"> <h3>Signup for an account</h3> <div class=\"message\"> <p>Please fill in your information below to signup for an account.</p> </div> </div> using (Html.BeginSection(\"Your details\")) { @Html.EditorFor(m => m.FirstName) @Html.EditorFor(m => m.LastName) @Html.EditorFor(m => m.DateOfBirth, new {hint = \"DD/MM/YYYY\"}) } using (Html.BeginSection(\"Account details\")) { @Html.EditorFor(m => m.EmailAddress, new {hint = \"An email will be sent to this address to confirm you own it\"}) @Html.EditorFor(m => m.Password) @Html.EditorFor(m => m.MembershipType) } using (Html.BeginSection(\"Additional details\")) { @Html.EditorFor(m => m.Bio) @Html.EditorFor(m => m.Homepage, new {placeholder = \"https://\"}) } <div class=\"action_message\"> <h3>Confirm the Terms &amp; Conditions</h3> <div class=\"message\"> <p>Please <a href=\"#\">read the terms and conditions</a>.</p> @Html.CheckBoxFor(m => m.TermsAndConditions) @Html.LabelFor(m => m.TermsAndConditions, \"I agree to the terms and conditions\") </div> </div> <div class=\"form_navigation\"> <button type=\"submit\" class=\"btn btn-primary\">Signup</button> </div> } <chameleon-form attr-id=\"signup-form\"> <form-message type=\"Information\" heading=\"Signup for an account\"> <message-paragraph>Please fill in your information below to signup for an account.</message-paragraph> </form-message> <form-section heading=\"Your details\"> <field for=\"FirstName\" /> <field for=\"LastName\" /> <field for=\"DateOfBirth\" hint=\"DD/MM/YYYY\" /> </form-section> <form-section heading=\"Account details\"> <field for=\"EmailAddress\" hint=\"An email will be sent to this address to confirm you own it\" /> <field for=\"Password\" /> <field for=\"MembershipType\" /> </form-section> <form-section heading=\"Additional details\"> <field for=\"Bio\" /> <field for=\"Homepage\" placeholder=\"http://\" /> </form-section> <form-message type=\"Action\" heading=\"Confirm the Terms & Conditions\"> <message-paragraph>Please <a href=\"#\">read the terms and conditions</a></message-paragraph> <field-element for=\"TermsAndConditions\" inline-label=\"I agree to the terms and conditions\" /> </form-message> <form-navigation> <submit-button label=\"Signup\" emphasis-style=\"Primary\" /> </form-navigation> </chameleon-form> @using (var f = Html.BeginChameleonForm(htmlAttributes: Html.Attrs().Id(\"signup-form\"))) { using (var m = f.BeginMessage(MessageType.Information, \"Signup for an account\")) { @m.Paragraph(\"Please fill in your information below to signup for an account.\") } using (var s = f.BeginSection(\"Your details\")) { @s.FieldFor(m => m.FirstName) @s.FieldFor(m => m.LastName) @s.FieldFor(m => m.DateOfBirth).WithHint(\"DD/MM/YYYY\") } using (var s = f.BeginSection(\"Account details\")) { @s.FieldFor(m => m.EmailAddress).WithHint(\"An email will be sent to this address to confirm you own it\") @s.FieldFor(m => m.Password) @s.FieldFor(m => m.MembershipType) } using (var s = f.BeginSection(\"Additional details\")) { @s.FieldFor(m => m.Bio) @s.FieldFor(m => m.Homepage).Placeholder(\"http://\") } using (var m = f.BeginMessage(MessageType.Action, \"Confirm the Terms & Conditions\")) { @m.Paragraph(@<text>Please <a href=\"#\">read the terms and conditions</a></text>) @f.FieldElementFor(mm => mm.TermsAndConditions).InlineLabel(\"I agree to the terms and conditions\") } using (var n = f.BeginNavigation()) { @n.Submit(\"Signup\") } } HTML output All of the above items will have HTML output that is similar to this. There will be a few small differences between each of the implementations based on the functionality they support e.g. built-in tag helpers outputs enum <option> 's as integer values rather than strings and attribute order will render differently etc. This specific HTML output was taken from the ChameleonForms - tag helpers implementation. <form action=\"\" enctype=\"application/x-www-form-urlencoded\" id=\"signup-form\" method=\"post\" novalidate=\"novalidate\"> <div class=\"information_message\"> <h3>Signup for an account</h3> <div class=\"message\"> <p> Please fill in your information below to signup for an account. </p> </div> </div> <fieldset> <legend>Your details</legend> <dl> <dt><label for=\"FirstName\">First name</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The First name field is required.\" id=\"FirstName\" name=\"FirstName\" required=\"required\" type=\"text\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"FirstName\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"LastName\">Last name</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The Last name field is required.\" id=\"LastName\" name=\"LastName\" required=\"required\" type=\"text\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"LastName\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"DateOfBirth\">Date of birth</label> <em class=\"required\">*</em></dt> <dd> <input aria-describedby=\"DateOfBirth--Hint\" data-val=\"true\" data-val-date=\"The field Date of birth must be a date with format d/M/yyyy.\" data-val-format=\"d/M/yyyy\" data-val-required=\"The Date of birth field is required.\" id=\"DateOfBirth\" name=\"DateOfBirth\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> <span class=\"field-validation-valid\" data-valmsg-for=\"DateOfBirth\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <fieldset> <legend>Account details</legend> <dl> <dt><label for=\"EmailAddress\">Email address</label> <em class=\"required\">*</em></dt> <dd> <input aria-describedby=\"EmailAddress--Hint\" data-val=\"true\" data-val-email=\"The Email address field is not a valid e-mail address.\" data-val-required=\"The Email address field is required.\" id=\"EmailAddress\" name=\"EmailAddress\" required=\"required\" type=\"email\" value=\"\" /> <div class=\"hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> <span class=\"field-validation-valid\" data-valmsg-for=\"EmailAddress\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"Password\">Password</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The Password field is required.\" id=\"Password\" name=\"Password\" required=\"required\" type=\"password\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"Password\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"MembershipType\">Membership type</label> <em class=\"required\">*</em></dt> <dd> <select data-val=\"true\" data-val-required=\"The Membership type field is required.\" id=\"MembershipType\" name=\"MembershipType\" required=\"required\"> <option selected=\"selected\" value=\"Standard\">Standard</option> <option value=\"Bonze\">Bonze</option> <option value=\"Silver\">Silver</option> <option value=\"Gold\">Gold</option> <option value=\"Platinum\">Platinum</option> </select> <span class=\"field-validation-valid\" data-valmsg-for=\"MembershipType\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <fieldset> <legend>Additional details</legend> <dl> <dt><label for=\"Bio\">Bio</label></dt> <dd> <textarea cols=\"20\" id=\"Bio\" name=\"Bio\" rows=\"2\"> </textarea> <span class=\"field-validation-valid\" data-valmsg-for=\"Bio\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"Homepage\">Homepage</label></dt> <dd> <input id=\"Homepage\" name=\"Homepage\" placeholder=\"https://\" type=\"url\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"Homepage\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <div class=\"action_message\"> <h3>Confirm the Terms &amp; Conditions</h3> <div class=\"message\"> <p> Please <a href=\"#\">read the terms and conditions</a> </p> <input data-val=\"true\" data-val-required=\"The Terms and conditions field is required.\" id=\"TermsAndConditions\" name=\"TermsAndConditions\" required=\"required\" type=\"checkbox\" value=\"true\" /> <label for=\"TermsAndConditions\">I agree to the terms and conditions</label> </div> </div> <div class=\"form_navigation\"> <button class=\"btn-primary\" type=\"submit\">Signup</button> </div> </form> Commentary There is an immediately discernible difference between the Tag Helpers and Html Helpers examples as compared to Editor Templates and the ChameleonForms examples, as well as some more subtle differences between the Editor Templates and ChameleonForms. Html Helpers When you are writing forms with this approach you need to think about the HTML output of the form since you have to write so much of it; in contrast to ChameleonForms and Editor Templates where you are instead concentrating on the structure of the form. If you have consistent HTML for the forms in your site then we think this shift in mindset is an advantage and will lead to better designed forms that are easier to change. This also means that when you need to change the HTML structure of your forms you have a big job ahead of you rewriting large portions of your application (and testing every page thoroughly since it's so easy to make a mistake). In addition to the above, you can't easily add conventions across your forms based on the type of field or data: You have to explicitly specify the type of field you want (e.g. Html.TextBoxFor vs Html.PasswordFor vs Html.TextAreaFor etc.). You have to manually add the required indicator and aria attributes. You have to manually specify the select list items for each drop-down. You have to also specify the label, field and validation HTML separately and in the right order. It's easy to make copy/paste errors and not remember to update one of the lambda expressions. Overall, the form is harder to read / more cluttered, harder to maintain, slower to develop and easier to get wrong. Editor Templates On first glance the syntax of the Editor Templates example and the ChameleonForms example are very similar. There are a number of differences, however: The additional ad-hoc per-field configurations (e.g. adding a hint, adding a placeholder, etc.) are added via magic strings (adding them to an anonymous object is still a magic string in our books), which isn't type-safe and you don't get intellisense. e.g. @Html.EditorFor(m => m.SomeField, new { hint = \"hint...\" }) vs <field for=\"SomeField\" hint=\"hint...\" /> or @s.FieldFor(m => m.SomeField).Hint(\"hint...\") . Furthermore, the additional configurations aren't able to be chained fluently / intellisensed, which we feel makes them much quicker / easier to write and discover. e.g. <field for=\"SomeField\" hint=\"A hint...\" placeholder=\"http://\" add-class=\"urlfield\" /> or @s.FieldFor(m => m.SomeField).Hint(\"A hint...\").Placeholder(\"http://\").AddClass(\"urlfield\") . If you want an enum to show up as a drop-down you have to create an editor template for every enum in your application. ChameleonForms automatically outputs an enum field as a dropdown. If you want to change from a drop-down to a list of radio buttons for a particular field then you will need to do it inline every time or add extra code to every editor template that you want to do it for (or provide some sort of parent editor template that all of them use). You can use .AsRadioList() to specify that the field should be a list of radio buttons instead, e.g. @s.FieldFor(m => m.EnumField).AsRadioList() . In order to get it working with similar functionality to ChameleonForms for the elements required in this form we had to add 27 files with a total of 252 lines of code (big thanks to Dan Malcolm for converting the standard Editor Templates to Razor , which formed the basis of the code we implemented) - if you wanted to provide test coverage of the form output then you would have even more files and lines of code. With ChameleonForms you simply Install-Package ChameleonForms using NuGet Package Manager Console and you are good to go with much more functionality. Tag Helpers The tag helper syntax is immensely more clean and less cluttered than the HTML Helpers syntax and it's nice that you have familiar HTML for the whole form - it's very clear what the output will be at a glance. However, it has it's own issues compared to ChameleonForms: You have to specify the different control elements (e.g. <input> vs <select> vs <textarea> ) and you need to know if each of them is self-closing or not. You have the same problem as HTML Helpers where you have to manually add the required indicator and hint and the required and aria attributes etc. and make sure to use the same asp-for value across multiple controls (label vs control vs validation), which is easy to get wrong while copy/pasting. You have to override the type field on the DateTime to stop the built-in browser behaviour from the datetime-local default type that tag the in-built tag helpers add, which doesn't really work . You have to also specify the label, field and validation HTML separately and in the right order. It's easy to make copy/paste errors. You have to specify the boilerplate template structure around each of your form fields, which means you are baking in yourthe current template structure and it's a big job to make a wholesale change in your app."
  },
  "docs/configuration.html": {
    "href": "docs/configuration.html",
    "title": "Configuration | ChameleonForms",
    "keywords": "Configuration There are a number of different configuration options to tweak the out-of-the-box functionality in ChameleonForms. AddServices overloads ChameleonForms gets registered in Startup.cs within the AddServices method, e.g.: public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms(); } There are actually 3 different overloads of the AddChameleonForms method that you can use: /// <summary> /// Adds ChameleonForms configuration with the <see cref=\"DefaultFormTemplate\"/>. /// </summary> /// <param name=\"services\">The service collection</param> /// <param name=\"configModifier\">Lambda expression to alter configuration</param> public static void AddChameleonForms(this IServiceCollection services, Func<ChameleonFormsConfigBuilder<DefaultFormTemplate>, ChameleonFormsConfigBuilder<DefaultFormTemplate>> configModifier = null ) {...} /// <summary> /// Adds ChameleonForms configuration with a specified form template and a builder modification delegate. /// </summary> /// <param name=\"services\">The service collection</param> /// <param name=\"configModifier\">Lambda expression to alter configuration</param> public static void AddChameleonForms<TFormTemplate>(this IServiceCollection services, Func<ChameleonFormsConfigBuilder<TFormTemplate>, ChameleonFormsConfigBuilder<TFormTemplate>> configModifier = null ) where TFormTemplate : class, IFormTemplate {...} /// <summary> /// Adds ChameleonForms configuration with a specified form template and a builder instance. /// </summary> /// <typeparam name=\"TFormTemplate\">The form template type to register as the default template</typeparam> /// <param name=\"services\">The service collection</param> /// <param name=\"configBuilder\">The configuration builder to use to specify the Chameleon Forms configuration</param> public static void AddChameleonForms<TFormTemplate>(this IServiceCollection services, ChameleonFormsConfigBuilder<TFormTemplate> configBuilder ) where TFormTemplate : class, IFormTemplate {...} The first one (which is used in the above example) adds ChameleonForms with the DefaultFormTemplate as the default template and has an optional property to allow you to tweak the global configuration of ChameleonForms using the configuration builder class. For example that might look like: services.AddChameleonForms(b => b.WithoutHumanizedLabels()); The other overloads of AddChameleonForms allow you to specify the form template type, which allows you to specify a different default template to use. For example that might look like one of these: // Just specify the default template type services.AddChameleonForms<TwitterBootstrap3FormTemplate>(); // services.AddChameleonForms<TwitterBootstrap3FormTemplate>(b => b.WithoutHumanizedLabels()); // var configBuilder = new ChameleonFormsConfigBuilder<TwitterBootstrap3FormTemplate>(); // Do stuff with configBuilder services.AddChameleonForms<TwitterBootstrap3FormTemplate>(configBuilder); For more information on form templates see: Using different form templates Creating custom form templates Default global config By default, the global config will set up the following for you: Humanized labels : The label text for fields will automatically be \" humanized \" from the property name using sentence case (e.g. public string FirstName { get; set; } will automatically have a label of First name ). See Controlling labels for more information. If any of the following have been applied to a field then the humanization will be skipped: [DisplayName(Name = \"Label text)] , [Display(Name = \"Label text\")] or you have an IDisplayMetadataProvider registered that either sets context.DisplayMetadata.SimpleDisplayProperty to a non-empty/non-null string or sets context.DisplayMetadata.DisplayName to a lambda that returns a non-empty/non-null string. For examples see the relevant test . Default form template type : The given IFormTemplate type will be registered as a Singleton with the service collection and will be resolved by default when creating a ChameleonForm. See Form Templates for more information. Flags enum support : Correctly handle model binding and server-side validation of [Flags] enums (including implicit [Required] for non-nullable, which is broken in out-of-the-box MVC). It's expected that they will be posted as multiple values and rendered as a multiple select input ( <select multiple> or <input type=\"checkbox\"> list). See Flags Enum Fields for more information. Format-aware DateTime support : Correctly handle model binding and server-side validation of DateTime values with a [DisplayFormat(DataFormatString = \"{0:SOME_FORMAT}\", ApplyFormatInEditMode = true)] attribute. See DateTime Fields for more information. Enum list support : Correctly handle binding and server-side validation of enum lists (e.g. IEnumerable<EnumType> , EnumType[] etc.). This patches up a range of problems with the out-of-the-box MVC support for enum lists, including poor support for [Required] and erroneous binding of null values in the lists. See Multiple-Select Enum Fields for more information. Uri support : Correctly handle model binding and server-side validation of Uri 's. See Uri Fields for more information. Integral number client validation support : Support unobtrusive client-side validation of integral types ( byte , sbyte , short , ushort , int , uint , long , ulong ). This existed in ASP.NET MVC, but no longer exists in ASP.NET Core MVC because HTML5 type=\"number\" has been added. This is a problem if you don't want to rely on HTML5 validation (which has a sub-par user experience in most cases). Format-aware DateTime client validation support : Support unobtrusive client-side validation of DateTime 's that is format string aware. See Client-side DateTime Validation for more information. Configuration builder The configuration builder allows you to tweak the default global config using the following self-explanatory fluent methods: /// <summary> /// Turn off humanized labels. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutHumanizedLabels(); /// <summary> /// Humanize labels with the given transformer. Use <see cref=\"To\"/> to access the default Humanizer ones. /// </summary> /// <example> /// builder.WithHumanizedLabelTransformer(To.TitleCase) /// </example> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithHumanizedLabelTransformer(IStringTransformer transformer); /// <summary> /// Don't register the template type with the <see cref=\"ServiceCollection\"/>. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutTemplateTypeRegistration(); /// <summary> /// Turn off model binding of flag enums. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutFlagsEnumBinding(); /// <summary> /// Turn off model binding of <see cref=\"System.DateTime\"/>s. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeBinding(); /// <summary> /// Turn off model binding of enum lists. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutEnumListBinding(); /// <summary> /// Turn off model binding of <see cref=\"System.Uri\"/>s. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutUriBinding(); /// <summary> /// Turn off client model validation of integral numerics. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutIntegralClientModelValidation(); /// <summary> /// Turn off client model validation of <see cref=\"System.DateTime\"/>s. /// </summary> /// <returns>The builder to allow fluent method chaining</returns> public ChameleonFormsConfigBuilder<TFormTemplate> WithoutDateTimeClientModelValidation(); MSBuild configuration When you install ChameleonForms it will automatically include an MSBuild .targets file into your project. This file provides the following functionality: Copy ChameleonForms client-side files into wwwroot/lib/chameleonforms/ on build unless they haven't changed. If you want to disable this simply set the following property in your .csproj file: <PropertyGroup> <ChameleonFormsCopyContentFiles>false</ChameleonFormsCopyContentFiles> </PropertyGroup> Advanced configuration Using different form templates Creating custom form templates Extending the field configuration Extending the form components Creating and using a custom field generator Creating and using custom field generator handlers"
  },
  "docs/custom-field-generator.html": {
    "href": "docs/custom-field-generator.html",
    "title": "Custom Field Generator | ChameleonForms",
    "keywords": "Custom Field Generator Part of the core of ChameleonForms is the concept of a Field Generator. A Field Generator is responsible for generating the HTML for the various parts of a Field . A Field Generator will implement the IFieldGenerator<TModel, T> interface, the definition for which is shown below: /// <summary> /// Generates the HTML for a single form field. /// </summary> public interface IFieldGenerator<TModel, T> : IFieldGenerator { /// <summary> /// A HTML helper for the model. /// </summary> IHtmlHelper<TModel> HtmlHelper { get; } /// <summary> /// The expression that identifies the property in the model being output. /// </summary> Expression<Func<TModel, T>> FieldProperty { get; } /// <summary> /// Returns the current value of the field. /// </summary> /// <returns>The current field value</returns> T GetValue(); /// <summary> /// Returns a model with the current values for the form. /// </summary> /// <returns>The current model</returns> TModel GetModel(); /// <summary> /// Returns the displayable name of the field being generated. /// </summary> /// <returns>The id</returns> string GetFieldDisplayName(); /// <summary> /// Returns any custom attributes against the field being generated. /// </summary> /// <returns>The attributes</returns> IEnumerable<Attribute> GetCustomAttributes(); } /// <summary> /// Generates the HTML for a single form field. /// </summary> public interface IFieldGenerator { /// <summary> /// The metadata for the form field. /// </summary> ModelMetadata Metadata { get; } /// <summary> /// The form template that will be used to render the form. /// </summary> IFormTemplate Template { get; } /// <summary> /// Turns the given <see cref=\"IFieldConfiguration\"/> into a <see cref=\"FieldConfiguration\"/> ready to use for generating the form field. /// </summary> /// <param name=\"fieldConfiguration\">The field configuration to modify</param> /// <param name=\"fieldParent\">The parent component of the field</param> /// <returns>The readonly field configuration; ready for generating the form field</returns> IReadonlyFieldConfiguration PrepareFieldConfiguration(IFieldConfiguration fieldConfiguration, FieldParent fieldParent); /// <summary> /// Creates the HTML for the field control. /// </summary> /// <returns>The HTML for the field control</returns> IHtmlContent GetFieldHtml(IReadonlyFieldConfiguration fieldConfiguration); /// <summary> /// Creates the HTML for the field label. /// </summary> /// <returns>The HTML for the field label</returns> IHtmlContent GetLabelHtml(IReadonlyFieldConfiguration fieldConfiguration); /// <summary> /// Creates the HTML for the field's validation messages /// </summary> /// <returns>The HTML for the field's validation messages</returns> IHtmlContent GetValidationHtml(IReadonlyFieldConfiguration fieldConfiguration); /// <summary> /// Creates the HTML for the field control after preparing the given field configuration. /// </summary> /// <returns>The HTML for the field control</returns> IHtmlContent GetFieldHtml(IFieldConfiguration fieldConfiguration); /// <summary> /// Creates the HTML for the field label after preparing the given field configuration. /// </summary> /// <returns>The HTML for the field label</returns> IHtmlContent GetLabelHtml(IFieldConfiguration fieldConfiguration); /// <summary> /// Creates the HTML for the field's validation messages after preparing the given field configuration. /// </summary> /// <returns>The HTML for the field's validation messages</returns> IHtmlContent GetValidationHtml(IFieldConfiguration fieldConfiguration); /// <summary> /// Returns the id of the field being generated. /// </summary> /// <returns>The id</returns> string GetFieldId(); } This is implemented by the Default Field Generator by default. This includesstandard rules for preparing a field configuration such as setting up format strings, setting readonly fields, setting aria-describedby attribute for hints, etc. as well as determining the HTML to display for the field parts such as the label and field element. If the Default Field Generator doesn't cut it for you then feel free to create your own field generator and use it instead by creating your own Form class and overriding the GetFieldGenerator method. You will need to create your own extension method in place of BeginChameleonForm and/or your own tag helper in place of <chameleon-form> to new up your custom Form class."
  },
  "docs/custom-field-generator-handlers.html": {
    "href": "docs/custom-field-generator-handlers.html",
    "title": "Custom Field Generator Handlers | ChameleonForms",
    "keywords": "Custom Field Generator Handlers If you want to use your own custom field generator handlers combined or in-place with the built-in handlers then you will need to firstly create a custom Field Generator , then inside of that delegate to a different FieldGeneratorHandlersRouter that has a different set of handlers."
  },
  "docs/custom-template.html": {
    "href": "docs/custom-template.html",
    "title": "Creating custom form templates | ChameleonForms",
    "keywords": "Creating custom form templates To create a custom form template you need to have a class that derives from the IFormTemplate interface: /// <summary> /// Allows the template the modify the field configuration for a particular field. /// </summary> /// <typeparam name=\"TModel\">The type of model the form is being displayed for</typeparam> /// <typeparam name=\"T\">The type of the property the field is being generated against</typeparam> /// <param name=\"fieldGenerator\">The instance of the field generator that will be used to generate the field</param> /// <param name=\"fieldGeneratorHandler\">The instance of the field generator handler that will be used to generate the field element</param> /// <param name=\"fieldConfiguration\">The field configuration that is being used to configure the field</param> /// <param name=\"fieldParent\">The parent component of the field</param> void PrepareFieldConfiguration<TModel, T>(IFieldGenerator<TModel, T> fieldGenerator, IFieldGeneratorHandler<TModel, T> fieldGeneratorHandler, IFieldConfiguration fieldConfiguration, FieldParent fieldParent); /// <summary> /// Creates the starting HTML for a form. /// </summary> /// <param name=\"action\">The form action</param> /// <param name=\"method\">The form method</param> /// <param name=\"htmlAttributes\">Any HTML attributes the form should use; specified as an anonymous object</param> /// <param name=\"enctype\">The encoding type for the form</param> /// <returns>The starting HTML for a form</returns> IHtmlContent BeginForm(string action, FormMethod method, HtmlAttributes htmlAttributes, EncType? enctype); /// <summary> /// Creates the ending HTML for a form. /// </summary> /// <returns>The ending HTML for a form</returns> IHtmlContent EndForm(); /// <summary> /// Creates the beginning HTML for a section. /// </summary> /// <param name=\"heading\">The heading of the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes the section container should use; specified as an anonymous object</param> /// <returns>The beginning HTML for a section</returns> IHtmlContent BeginSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null); /// <summary> /// Creates the ending HTML for a section. /// </summary> /// <returns>The ending HTML for a section</returns> IHtmlContent EndSection(); /// <summary> /// Creates the beginning HTML for a section that is nested within another section. /// </summary> /// <param name=\"heading\">The heading of the nested section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the nested section</param> /// <param name=\"htmlAttributes\">Any HTML attributes the nested section container should use; specified as an anaonymous object</param> /// <returns>The beginning HTML for a nested section</returns> IHtmlContent BeginNestedSection(IHtmlContent heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null); /// <summary> /// Creates the ending HTML for a section that is nested within another section. /// </summary> /// <returns>The ending HTML for a nested section</returns> IHtmlContent EndNestedSection(); /// <summary> /// Creates the HTML for a single form field. /// </summary> /// <param name=\"labelHtml\">The HTML that comprises the form label</param> /// <param name=\"elementHtml\">The HTML that comprieses the field itself</param> /// <param name=\"validationHtml\">The HTML that comprises the field's validation messages</param> /// <param name=\"fieldMetadata\">The metadata for the field being created</param> /// <param name=\"fieldConfiguration\">Configuration for the field</param> /// <param name=\"isValid\">Whether or not the field is valid</param> /// <returns>The HTML for the field</returns> IHtmlContent Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid); /// <summary> /// Creates the beginning HTML for a single form field that contains other fields nested within it. /// </summary> /// <param name=\"labelHtml\">The HTML that comprises the form label</param> /// <param name=\"elementHtml\">The HTML that comprieses the field itself</param> /// <param name=\"validationHtml\">The HTML that comprises the field's validation messages</param> /// <param name=\"fieldMetadata\">The metadata for the field being created</param> /// <param name=\"fieldConfiguration\">Configuration for the field</param> /// <param name=\"isValid\">Whether or not the field is valid</param> /// <returns>The beginning HTML for the parent field</returns> IHtmlContent BeginField(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid); /// <summary> /// Creates the ending HTML for a single form field that contains other fields nested within it. /// </summary> /// <returns>The ending HTML for the parent field</returns> IHtmlContent EndField(); /// <summary> /// Creates the beginning HTML for a navigation section. /// </summary> /// <returns>The beginning HTML for a navigation section</returns> IHtmlContent BeginNavigation(); /// <summary> /// Creates the ending HTML for a navigation section. /// </summary> /// <returns>The ending HTML for a navigation section</returns> IHtmlContent EndNavigation(); /// <summary> /// Creates the beginning HTML for a message. /// </summary> /// <param name=\"messageType\">The type of message being displayed</param> /// <param name=\"heading\">The heading for the message</param> /// <returns>The beginning HTML for the message</returns> IHtmlContent BeginMessage(MessageType messageType, IHtmlContent heading); /// <summary> /// Creates the ending HTML for a message. /// </summary> /// <returns>The ending HTML for the message</returns> IHtmlContent EndMessage(); /// <summary> /// Creates the HTML for a paragraph in a message. /// </summary> /// <param name=\"paragraph\">The paragraph HTML</param> /// <returns>The HTML for the message paragraph</returns> IHtmlContent MessageParagraph(IHtmlContent paragraph); /// <summary> /// Creates the HTML for a button. /// </summary> /// <param name=\"content\">The content for the user to see or null if the value should be used instead</param> /// <param name=\"type\">The type of button or null if a generic button should be used</param> /// <param name=\"id\">The name/id of the button or null if one shouldn't be set</param> /// <param name=\"value\">The value to submit if the button is clicked or null if one shouldn't be set</param> /// <param name=\"htmlAttributes\">Any HTML attributes to add to the button or null if there are none</param> /// <returns>The HTML for the button</returns> IHtmlContent Button(IHtmlContent content, string type, string id, string value, HtmlAttributes htmlAttributes); /// <summary> /// Creates the HTML for a list of radio buttons or checkboxes. /// </summary> /// <param name=\"list\">The list of HTML items (one per radio/checkbox)</param> /// <param name=\"isCheckbox\">Whether the list is for checkboxes rather than radio buttons</param> /// <returns>The HTML for the radio list</returns> IHtmlContent RadioOrCheckboxList(IEnumerable<IHtmlContent> list, bool isCheckbox); } Recommendation To make it easy for yourself we recommend that you start by extending the DefaultFormTemplate class and override each method in turn that you want to change the HTML for. For an example of this approach see the Twitter Bootstrap 3 Form Template , which extends most, but not all methods. MSBuildRazorCompiler Rather than expressing all of the complex template HTML as a string we recommend that you instead use the MSBuildRazorCompiler library so that you can specify the HTML using Razor syntax in a .cshtml file and have it statically compiled into .cs files that you can reference. See the ChameleonForms.Template library to see how it works and use as a base to get started. PrepareFieldConfiguration The PrepareFieldConfiguration method allows you to make arbitrary changes to the Field Configuration of a field before it is rendered by the other template methods. For an example of the type of changes you can make, see the Twitter Bootstrap 3 form template . This technique allows you to take advantage of the expressiveness and flexibility afforded by the Field Configuration to: Make easily unit testable changes Keep your templates terse and reduce the potential noise of lots of control statements Apply global configuration changes that are template specific without requiring users to specify those changes for each form/field BeginSection / BeginNestedSection The heading is not required and we recommend having logic like the following to conditionally display the heading: @if (Model.Heading != null && !string.IsNullOrWhiteSpace(Model.Heading.ToString())) { @* heading html here *@ } Similarly, the leading HTML is optional and you might want to use similar conditional logic for that field (unless you don't wrap it in any HTML in which case you can simply output it e.g. @Model.LeadingHtml ). You should always have a container element for your section which has the HtmlAttributes object from that section applied to it . Field There are a lot of parameters passed to the field method - only use the ones that you need for your template (e.g. if you don't specify different HTML when a field is invalid just ignore the isValid variable). If you want the ability to specify the required designator separately within the template then make sure to call the RequiredDesignator method from within the Field method to get the HTML for the required designator. The templates we provide out-of-the-box do this and thus you can override just the required designator by extending the form template classes we provide and override the GetRequiredDesignator method. Given you will likely need to split up your HTML into multiple files with mismatching start and end tags it's recommended you make use of the @: operator e.g.: @{ @: <div> } If you want a fully-fledged Field HTML implementation then you need to account for: Outputting the Field Label HTML, Field Element HTML and Field Validation Message HTML Outputting the Field Container Classes from field configuration onto whatever the containing element is (e.g. <div class=\"@Model.FieldConfiguration.FieldContainerClasses\"> ) Outputting the required designator if the field is required (e.g. @(new HtmlString(Model.FieldMetadata != null && Model.FieldMetadata.IsRequired ? requiredDesignator.ToHtmlString() : \"\")) ) Outputting the prepended HTML before the field (e.g. foreach (var html in Model.FieldConfiguration.PrependedHtml) {@html} ) Outputting the appended HTML after the field (e.g. foreach (var html in Model.FieldConfiguration.AppendedHtml) {@html} ) Outputting the hint, including its ID (e.g. if (Model.FieldConfigurationModel.FieldConfiguration.Hint != null) {<div class=\"hint\" id=\"@Model.FieldConfiguration.HintId\">@Model.FieldConfiguration.Hint</div>} ) Obviously, if you never plan on using some of those then you can exclude them, but if you are creating a template that you want other people to use we recommend you include all of those points so people aren't surprised when they try to use the template and it doesn't behave how they expect. Nested fields If you don't want to support nested fields then we recommend you throw a NotSupportedException from the BeginField and EndField methods (which are only used for supporting nested fields). If you do want to support them then it's likely that you will reuse a lot of the same HTML for a normal field and a parent field. The Twitter Bootstrap 3 form template and the Default form template both use a single Field.cshtml file, but passing in a FieldRenderMode enum into the template model to switch the relevant output: public enum FieldRenderMode { Field, BeginField } Automated Testing If you would like to have confidence in the HTML that your template generates then we recommend that you provide HTML Approval Test coverage of the HTML output of your template. For an example of this see the tests for the built-in form templates . Applying a global template change You can often encounter the situation where the DefaultFormTemplate is mostly sufficient for your needs, but you want to make slight tweaks for example adding classes to all buttons, or changing the required designator. In those instances you can easily create a custom form template to use in your application that simply extends the DefaultFormTemplate class and overrides the relevant methods - in the above example, you would override the Button or RequiredDesignator methods respectively. Even further to that, we can change the HtmlAttributes object that is passed into the Button method and then call base.Button(...) to keep the original button generation code. For an example of this in action see the Button method in the Twitter Bootstrap 3 template . Using a custom form template See the Using different form templates page. Contributions If you create a form template that you believe will be useful to other people then please feel free to send us a pull request and we will consider it for inclusion in the core package."
  },
  "docs/datetime.html": {
    "href": "docs/datetime.html",
    "title": "Datetime Fields | ChameleonForms",
    "keywords": "Datetime Fields If you need to collect DateTime data you can use a DateTime or DateTime? model property, e.g.: public DateTime DateTimeField { get; set; } public DateTime? NullableDateTimeField { get; set; } [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] public DateTime DateTimeFieldWithFormat { get; set; There only difference between a DateTime and DateTime? is that a DateTime? will not be required (unless it's annotated with [Required] ). Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"text\" value=\"%value%\" /> If you specify a DateTime? without a [Required] attribute then it will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"text\" value=\"%value%\" /> If you specify a [DisplayFormat] with ApplyFormatInEditMode = true then it will change the HTML to: <input %validationAttrs% data-val-format=\"%formatString%\" %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"text\" value=\"%value%\" /> To find out why see the Client-side validation section below. Why we use type=\"text\" We deliberately don't make use of the various date-related HTML5 types, and instead opt for use of type=\"text\" , because browser support for controlling formatting is limited. If you want to opt into a different type then you can by chaining the .Attr(\"type\", \"adifferenttype\") on your field definition. Server-side validation and binding By default MVC will attempt to parse a DateTime with whatever culture the thread is running as. This has a number of implications: If you want just a time, or just a date then you can't enforce that If you have a different culture on a particular server then you will get different results It's not very clear to a developer that doesn't know about that MVC behaviour what will happen You don't have much control over the format that you want your users to enter the date in MVC provides the [DisplayFormat] attribute above, but that doesn't actually do anything apart from formatting the date nicely when the field is outputted (when using Editor Templates or Tag Helpers). In order to provide a nice server-side validation experience, ChameleonForms provides first class support for [DisplayFormat(ApplyFormatInEditMode = true)] : It will output the date using the format string so a pre-populated model will automatically show the correct string to the user It provides a model binder that will perform server-side binding and validation using that format string as a guide when parsing the text the user entered This model binder is registered by default , but you can turn it off If you'd like to register the model binder yourself rather than using the global config you can do that like so: public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms(b => b.WithoutDateTimeBinding()); services.Configure<MvcOptions>(x => { x.ModelBinderProviders.Insert(0, new DateTimeModelBinderProvider()); ... }); } g format There is support in ChameleonForms for a g format that uses the current thread's culture to determine the format string. That format string will then be passed to client validation so the end user has a consistent experience against what the server is expecting. For instance, here are a couple of examples of what format will be used if you set your display format string to {0:g} : en-GB : dd/MM/yyyy HH:mm uk-UA : dd.MM.yyyy H:mm Client-side validation Please see the client-side validation of DateTime fields documentation."
  },
  "docs/datetime-client-side-validation.html": {
    "href": "docs/datetime-client-side-validation.html",
    "title": "Client-side validation of DateTime fields in ASP.NET MVC using DisplayFormat | ChameleonForms",
    "keywords": "Client-side validation of DateTime fields in ASP.NET MVC using DisplayFormat ChameleonForms provides a way for you to hook into either the jQuery validation unobtrusive library that ASP.NET Core MVC ships with or the aspnet-validation library that provides equivalent functionality without requiring jQuery to validate that the date format the user specifies is OK on the client-side based on the format string you provided. If you want support added for other validation libraries then please raise an issue to discuss . Using the validation In order for this to work you need to: Ensure the client validation provider is registered, this is on by default Ensure you have either jQuery validation unobtrusive or aspnet-validation working Reference the unobtrusive-date-validation.chameleonforms.js file By default, when you install ChameleonForms by NuGet this file will be placed into wwwroot/lib/chameleonforms/unobtrusive-date-validation.chameleonforms.js for you when you build. If you don't want that to happen check out configuration . Place the [DisplayFormat(DataFormatString = \"{0:%format%}\", ApplyInEditMode = true)] attribute on the model property Output the field using ChameleonForms If you aren't using ChameleonForms to output the field then replace step 2 and 3 with: Include the data-val=\"true\" attribute to turn on unobtrusive validation for that field Include the data-val-date=\"%errorMessageIfDateIsIncorrect%\" attribute to indicate the field is a date and what message should display if the user enters an invalid date Include the data-val-format=\"%formatString%\" attribute to indicate the format string that should be validated against Client validation provider The client validation provider that ensures the validation attributes are added is added by the default global config . If you want to register it yourself then you can: public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms(b => b.WithoutDateTimeClientModelValidation()); services.Configure<MvcViewOptions>(x => { x.ClientModelValidatorProviders.Add(new DateTimeClientModelValidatorProvider()); ... }); } Supported formats Only the following date format strings are supported (want more added? feel free to send a pull request ): d/M/yyyy d-M-yyyy d.M.yyyy d/M/yy d-M-yy d.M.yy dd/MM/yyyy dd-MM-yyyy dd.MM.yyyy dd/MM/yy dd-MM-yy dd.MM.yy M/d/yyyy M-d-yyyy M.d.yyyy M/d/yy M-d-yy M.d.yy MM/dd/yyyy MM-dd-yyyy MM.dd.yyyy MM/dd/yy MM-dd-yy MM.dd.yy yyyy/MM/dd yyyy-MM-dd yyyy.MM.dd yyyy/M/d yyyy-M-d yyyy.M.d Only the following time format strings are supported: h:mmtt h:mm:sstt hh:mmtt hh:mm:sstt H:mm H:mm:ss HH:mm HH:mm:ss You can also combine one of the supported date formats with one of the supported time formats if the date format is first, followed by whitespace and then the time format (want to support more scenarios? feel free to send a pull request ). To see what each of the format identifiers means, please consult the relevant Microsoft documentation . Want another format? If you want support for another format string, please lodge an issue or send a pull request ."
  },
  "docs/default-fields.html": {
    "href": "docs/default-fields.html",
    "title": "Default (Text) Fields | ChameleonForms",
    "keywords": "Default (Text) Fields The default field will output a field when no other field type worked. It allows the user to enter a simple string input for the value of that field. public string StringField { get; set; } A non-nullable type will always be Required and a nullable type can be made to be Required by annotating with the [Required] attribute (but allows you to start off with a blank value when using null so you don't bias the user's input). Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"text\" value=\"%value%\" /> If the field is required then the default HTML will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"text\" value=\"%value%\" />"
  },
  "docs/different-form-models.html": {
    "href": "docs/different-form-models.html",
    "title": "Create a form against a model type different from the page model | ChameleonForms",
    "keywords": "Create a form against a model type different from the page model Similar to the examples and reasoning discussed in the documentation for changing HTML helper model types it's useful to be able to create forms against an arbitrary model unrelated to the page model or create a form against a subproperty of the parent model. Tag Helpers Tag Helpers don't allow you to change a model within a page, instead you need to use <partial model=\"model\" name=\"_PartialName\" /> or <partial for=\"ChildProperty\" name=\"_PartialName\" /> to change the model type in a view. See Partials for more information or below for examples. HTML Helpers This can be achieved using the default form template by using these overloads to the BeginChameleonForms extension method : /// <summary> /// Constructs a <see cref=\"Form{TModel}\"/> object with the default ChameleonForms template renderer using a sub-property of the current model as the model. /// Values will bind back to the model type of the sub-property as if that was the model all along. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonFormFor(m => m.Subproperty, ...)) { /// ... /// } /// </example> /// <typeparam name=\"TParentModel\">The model type of the view</typeparam> /// <typeparam name=\"TChildModel\">The model type of the sub-property to construct the form for</typeparam> /// <param name=\"helper\">The HTML Helper for the current view</param> /// <param name=\"formFor\">A lambda expression identifying the sub-property to construct the form for</param> /// <param name=\"action\">The action the form should submit to</param> /// <param name=\"method\">The HTTP method the form submission should use</param> /// <param name=\"htmlAttributes\">Any HTML attributes the form should use</param> /// <param name=\"enctype\">The encoding type the form submission should use</param> /// <param name=\"outputAntiforgeryToken\">Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET</param> /// <returns>A <see cref=\"Form{TModel}\"/> object with an instance of the default form template renderer.</returns> public static IForm<TChildModel> BeginChameleonFormFor<TParentModel, TChildModel>(this IHtmlHelper<TParentModel> helper, Expression<Func<TParentModel, TChildModel>> formFor, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = null, bool? outputAntiforgeryToken = null) /// <summary> /// Constructs a <see cref=\"Form{TModel}\"/> object with the default ChameleonForms template renderer using the given model type and instance. /// Values will bind back to the model type specified as if that was the model all along. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonFormFor(new AnotherModelType(), ...)) { /// ... /// } /// @using (var f = Html.BeginChameleonFormFor(default(AnotherModelType), ...)) { /// ... /// } /// </example> /// <remarks> /// This can also be done using the For() HTML helper extension method and just a type: /// @using (var f = Html.For&lt;AnotherModelType&gt;().BeginChameleonForm(...)) { /// ... /// } /// </remarks> /// <typeparam name=\"TOriginalModel\">The model type of the view</typeparam> /// <typeparam name=\"TNewModel\">The model type of the sub-property to construct the form for</typeparam> /// <param name=\"helper\">The HTML Helper for the current view</param> /// <param name=\"model\">The model to use for the form</param> /// <param name=\"action\">The action the form should submit to</param> /// <param name=\"method\">The HTTP method the form submission should use</param> /// <param name=\"htmlAttributes\">Any HTML attributes the form should use</param> /// <param name=\"enctype\">The encoding type the form submission should use</param> /// <param name=\"outputAntiforgeryToken\">Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET</param> /// <returns>A <see cref=\"Form{TModel}\"/> object with an instance of the default form template renderer.</returns> public static IForm<TNewModel> BeginChameleonFormFor<TOriginalModel, TNewModel>(this IHtmlHelper<TOriginalModel> helper, TNewModel model, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = null, bool? outputAntiforgeryToken = null) Examples The examples on the documentation for changing HTML helper model types are restated below, but using ChameleonForms instead of using Html to output the form. Using a different view model Tag Helpers variant HTML Helpers variant Tag Helpers are explicitly tied to the model of the page so it's not possible to have the different model inline. However, you can include another form with a different model by using a partial. @model LoginViewModel <h1>Login</h1> <chameleon-form> <form-section> <field for=\"Username\" /> <field for=\"Password\" /> </form-section> <form-navigation> <submit-button label=\"Login\" /> </form-navigation> </chameleon-form> <h2>Don't have an account?</h2> <p>You can easily create a new account in seconds - just start by selecting a username below.</p> <partial name=\"_SignupForm\" model=\"new SignupStep1ViewModel()\" /> _SignupForm.cshtml @model SignupStep1ViewModel <chameleon-form action='@Url.Action(\"Step1\", \"Signup\")'> <form-section> <field for=\"Username\" placeholder=\"Enter your preferred username\"> </form-section> <form-navigation> <submit-button>Begin signup - check if my username is available &raquo;</submit-button> </form-navigation> </chameleon-form> @model LoginViewModel <h1>Login</h1> @using (var f = Html.BeginChameleonForm()) { using (var s = f.BeginSection()) { @s.FieldFor(m => m.Username) @s.FieldFor(m => m.Password) } using (var n = f.BeginNavigation()) { @n.Submit(\"Login\") } } <h2>Don't have an account?</h2> <p>You can easily create a new account in seconds - just start by selecting a username below.</p> @using (var f = Html.BeginChameleonFor(default(SignupStep1ViewModel), Url.Action(\"Step1\", \"Signup\"))) { using (var s = f.BeginSection) { @s.FieldFor(m => m.Username).Placeholder(\"Enter your preferred username\") } using (var n = f.BeginNavigation()) { @n.Submit(\"Begin signup - check if my username is available &raquo;\".ToHtml()) } } Binding against a child property This is useful when you want to have readonly properties that always get set in the controller before showing a view, but you want a clean view model to bind against in the postback controller action. This technique can make your controller action cleaner and make it less likely that you will forget to set the readonly properties for the view or forget to add [ReadOnly(true)] to those properties if they were on the view model being bound to the controller. As an example of this technique in action, let's say you have this view model and controller: public class SomeViewModel { public SomeViewModel(string readonlyProperty, SomeViewModelInput input) { ReadonlyProperty = readonlyProperty; InputModel = input; } public string ReadonlyProperty { get; set; } public SomeViewModelInput InputModel { get; set; } } public class SomeViewModelInput { public string Property1 { get; set; } public string Property2 { get; set; } public string Property3 { get; set; } public string Property4 { get; set; } public string Property5 { get; set; } } public class SomeController : Controller { public ActionResult Index() { return new View(new SomeViewModel(\"Value from database or whatever\", new SomeViewModelInput())); } [HttpPost] public ActionResult Index(SomeViewModelInput model) { if (!ModelState.IsValid) return new View(new SomeViewModel(\"Value from database or whatever\", model)); // Do stuff with model... } } Tag Helpers variant HTML Helpers variant Tag Helpers are explicitly tied to the model of the page so it's not possible to have the different model inline. However, you can include another form with a different model by using a partial. @model SomeViewModel <h1>Creating new xyz against @Model.ReadonlyProperty</h1> <partial name=\"_SomeViewModelInputForm\" model=\"Model?.InputModel\" /> _SomeViewModelInputForm.cshtml <chameleon-form> <form-section> <field for=\"Property1\" /> <field for=\"Property2\" /> <field for=\"Property3\" /> <field for=\"Property4\" /> <field for=\"Property5\" /> </form-section> <form-navigation> <submit-button label=\"Submit\" /> </form-navigation> </chameleon-form> @model SomeViewModel <h1>Creating new xyz against @Model.ReadonlyProperty</h1> @using (var f = Html.BeginChameleonFormFor(m => m.InputModel)) { using (var s = f.BeginSection()) { @s.FieldFor(m => m.Property1) @s.FieldFor(m => m.Property2) @s.FieldFor(m => m.Property3) @s.FieldFor(m => m.Property4) @s.FieldFor(m => m.Property5) } using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\") } } Creating a form for a child property that binds back to the parent view model Tag Helpers variant HTML Helpers variant Tag Helpers are explicitly tied to the model of the page so it's not possible to have the different model inline. However, you can include a subset of the form with a different model by using the <form-partial /> Tag Helper. See Partials for more information about the other ways you can use partials within forms. <chameleon-form action='@Url.Action(\"PostParentViewModel\")'> <form-partial name=\"_FormPartialAgainstChildProperty\" for=\"Child\" /> <form-navigation> <submit-button label=\"Submit\" add-class=\"parent-model\" /> </form-navigation> </chameleon-form> _FormPartialAgainstChildProperty.cshtml @model ChildViewModel <form-section> <field for=\"ChildField\" /> <field for=\"SomeEnum\" /> </form-section> This is still easily possible, but it's just a little more verbose since it's likely to be a less common use case: @using (var f = Html.For(m => m.Child, bindFieldsToParent: true).BeginChameleonForm(...)) { ... } Try working examples See also the working examples in the source code , which can be run so you can see how it works."
  },
  "docs/email.html": {
    "href": "docs/email.html",
    "title": "Email Fields | ChameleonForms",
    "keywords": "Email Fields If you need to collect emails then that will automatically be handled for you with a HTML5 <input type=\"email\"> field if you annotate your model field correctly: [DataType(DataType.EmailAddress)] public string Email { get; set; } [EmailAddress] public string Email { get; set; } Validation If you just apply the [DataType] attribute it won't perform any server-side validation, but it will apply client-side validation attributes. If you apply the [EmailAddress] attribute it will also perform basic server-side validation . Fun-fact: the server-side validation used to be more comprehensive , but was simplified due to a security vulnerability . At the end of the day, the best way to verify an email address (if you really need to) is to send an email to it . Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"email\" value=\"%value%\" /> If the field is required then the default HTML will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" type=\"email\" value=\"%value%\" />"
  },
  "docs/enum.html": {
    "href": "docs/enum.html",
    "title": "Enum Fields | ChameleonForms",
    "keywords": "Enum Fields If you want the user to specify a value from an enum you can use that enum type (or a nullable instance of it) against a model property, e.g.: public enum MyEnum { ... } ... public MyEnum EnumField { get; set; } // automatically required since it's non-nullable [Required] public MyEnum? RequiredNullableEnumField { get; set; } // Required, but can start off as an empty value public MyEnum? NullableEnumField { get; set; } // Not required If you want the user to select multiple enum values you can either use a flags enum or a list of enums . Default HTML Non-nullable enum (drop-down with no empty option) When using the Default Field Generator then the default HTML of the Field Element for a non-nullable enum will be: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> Note: See below to understand what the effect of .ToString() and .Humanize() are. Nullable enum (drop-down with empty option) <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">%noneDescription%</option> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> If the field is marked [Required] there will also be a required=\"required\" added. Explanation and example x.ToString means the string representation of the enum value and x.Humanize() means converting the enum value to a human-readable string using the awesome Humanizer library. This will automatically convert camel-cased enum values to sentence case and pick up any usage of [Description] , [Display] , etc.. Read the Humanizer documentation for more information including how to perform localisation. As an example, if you had the following enum: public enum AnEnum { Singleword, MultipleWords, [Description(\"Custom-description!\")] CustomDescription } And you had a property on your model like: public AnEnum EnumValue { get; set; } Then by default the Field Element HTML would be (if labels are automatically sentence cased and you don't specify any extra HTML attributes ): <select data-val=\"true\" data-val-required=\"The Enum value field is required.\" id=\"EnumValue\" name=\"EnumValue\" required=\"required\"> <option value=\"Singleword\">Singleword</option> <option value=\"MultipleWords\">Multiple words</option> <option value=\"CustomDescription\">Custom-description!</option> </select> Configurability Display as list of radio buttons You can force an enum field to display as a list of radio buttons rather than a drop-down using the AsRadioList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsRadioList method is mapped to as=\"RadioList\" . <field for=\"EnumField\" as=\"RadioList\" /> <field for=\"NullableEnumField\" as=\"RadioList\" /> @s.FieldFor(m => m.EnumField).AsRadioList() @s.FieldFor(m => m.NullableEnumField).AsRadioList() This will change the default HTML for the non-nullable enum field and the Required nullable enum field as shown above to: <ul> %foreach enum value x with increment i % <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_%i%\" name=\"%propertyName%\" required=\"required\" type=\"radio\" value=\"%x.ToString()%\" /> <label for=\"%propertyName%_%i%\">%x.Humanize()%</label></li> %endforeach% </ul> And it will change the default HTML for the non-Required nullable enum field as shown above to: <ul> <li><input checked=\"checked\" %validationAttrs% %htmlAttributes% id=\"%propertyName%_1\" name=\"%propertyName%\" type=\"radio\" value=\"\" /> <label for=\"%propertyName%_1\">%noneDescription%</label></li> %foreach enum value x with increment i% <li><input %htmlAttributes% id=\"%propertyName%_%i+1%\" name=\"%propertyName%\" type=\"radio\" value=\"%x.ToString()%\" /> <label for=\"%propertyName%_%i+1%\">%x.Humanize()%</label></li> %endforeach% </ul> Change the text description of none When you display a nullable enum field as a drop-down or a non-Required nullable enum field as a list of radio buttons you can change the text that is used to display the none value to the user. By default the text used is an empty string for the drop-down and None for the radio button. To change the text simply use the WithNoneAs method, e.g.: Tag Helpers variant HTML Helpers variant The WithNoneAs method is mapped to none-label=\"{label}\" . <field for=\"NullableEnumField\" none-label=\"No value\" /> @s.FieldFor(m => m.NullableEnumField).WithNoneAs(\"No value\") This will change the default HTML for the nullable enum field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No value</option> @* Enum values as <options>... *@ </select> Hide empty item If you have a nullable enum field then it will show the empty item and this item will be selected by default if the field value is null. If for some reason you want a nullable enum, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant <field for=\"NullableEnumField\" hide-empty-item=\"true\" /> @s.FieldFor(m => m.NullableEnumField).HideEmptyItem() This will change the default HTML for the nullable enum field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> @* Enum values as <options>... *@ </select> Exclude specific enum values If there are some enum values you want to exclude from showing up as options then you can do so with the Exclude method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant Unfortunately, you can't have generic typing in the tag helper, so you need to cast the array of enums to Enum[] . <field for=\"EnumField\" exclude=\"new Enum[]{MyEnum.Value1, MyEnum.Value3}\" /> @s.FieldFor(m => m.EnumField).Exclude(MyEnum.Value1, MyEnum.Value3)"
  },
  "docs/extending-field-configuration.html": {
    "href": "docs/extending-field-configuration.html",
    "title": "Extending Field Configuration | ChameleonForms",
    "keywords": "Extending Field Configuration The Bag property, which is dynamic provides a way to store arbitrary data. The FieldConfiguration class, which is the default implementation of IFieldConfiguration , instantiates this property as an ExpandoObject . To extend the Field Configuration you can create an extension method against IFieldConfiguration , which adds data to the Bag property (or alternatively, you can modify the Attributes property if you want your extension method to simply add HTML attributes). If you are using the Bag property then you will likely need to create your own custom template to then pull that data out of the Bag property on the IReadonlyFieldConfiguration (which will be copied from the IFieldConfiguration when .ToReadonly() is called before passing it to the form template for rendering). Example For an example of this in action see the extension we added to the Twitter Bootstrap 3 template to allow you to specify an input group . Firstly, the definition of the extension method is: /// <summary> /// Outputs the field in an input group using prepended and appended HTML. /// </summary> /// <example> /// @n.Field(labelHtml, elementHtml, validationHtml, metadata, new FieldConfiguration().Prepend(beforeHtml).Append(afterHtml).AsInputGroup(), false) /// </example> /// <param name=\"fc\">The configuration for a field</param> /// <returns>The field configuration object to allow for method chaining</returns> public static IFieldConfiguration AsInputGroup(this IFieldConfiguration fc) { fc.Bag.DisplayAsInputGroup = true; return fc; } Then the corresponding code in the template that gets the value as a local variable to switch on is: var isInputGroup = canBeInputGroup && (isRequired || Model.FieldConfiguration.GetBagData<bool>(\"DisplayAsInputGroup\")); Note in particular the Model.FieldConfiguration.GetBagData<bool>(\"DisplayAsInputGroup\") . Namespaces In order to be able to swap out the extension method usage across your application easily if you change your form template we recommend that rather than adding a using statement to the namespace that contains your extension method for each view that you instead add the namespace to your _ViewImports.cshtml file."
  },
  "docs/extending-form-components.html": {
    "href": "docs/extending-form-components.html",
    "title": "Extending Form Components | ChameleonForms",
    "keywords": "Extending Form Components If you would like to extend form components you can easily create extension methods on the relevant classes. The FieldFor extension methods on the Section class are a great example . There is nothing stopping you creating similar methods, or even creating your own form components by extending the IFormComponent interface or the FormComponent class. If you have a specific DSL you would like to achieve using ChameleonForms and need some assistance feel free to communicate with us via Twitter @robdmoore / @mdaviesnet or alternatively send a pull request / issue to the GitHub project ."
  },
  "docs/field.html": {
    "href": "docs/field.html",
    "title": "Field | ChameleonForms",
    "keywords": "Field The Field is a single data collection unit; you create a Field by using the <field> tag helper, calling the Field method on a Section or otherwise instantiating and outputting to the page a Field<TModel> . You can also create a parent field that can have child fields nested within it by instantiating nesting things within a non-self-closing <field> tag helper or creating a Field<TModel> within a using block (the start and end of the using block will output the start and end HTML for the Field and the contents of the using block will output the child Fields). The Field<TModel> class is defined as follows in the ChameleonForms.Component namespace: /// <summary> /// Wraps the output of a single form field. /// </summary> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> public class Field<TModel> : FormComponent<TModel> { /// <summary> /// Creates a form field. /// </summary> /// <param name=\"form\">The form the field is being created in</param> /// <param name=\"isParent\">Whether or not the field has other fields nested within it</param> /// <param name=\"fieldGenerator\">A field HTML generator class</param> /// <param name=\"config\">The configuration values for the field</param> public Field(IForm<TModel> form, bool isParent, IFieldGenerator fieldGenerator, IFieldConfiguration config) : base(form, !isParent) {...} ... } The HTML for a Field is generated via the Field method in the form template (or BeginField and EndField for the start and end HTML for a parent field). A Field consists of 8 sub-components: Field Element - The HTML that makes up the control(s) to accept data from the user Field Label - Text that describes a Field Element to a user (and is linked to that Field Element) Field Validation HTML - Markup that acts as a placeholder to display any validation messages for a particular Field Element Field Configuration - The configuration for a particular Field, Field Element and/or Field Label Hint - Any hint text that is specified against the field Required designator - A visual designator to indicate that the field is required Prepended and appended HTML - Any prepended or appended HTML specified against the field to be added before / after the Field Element Field container - The containing element surrounding the Field Element and other relevant parts of the field The form template determines how to lay out these sub-components. Default usage Manually specify HTML Tag Helpers variant HTML Helpers variant If you want to define your own HTML for the Field Element, Field Label and Field Validation HTML then you can do so by using the manual attribute on the <field> tag helper and nest <manual-element> , <manual-label> and <manual-validation> elements to specify the Field Element, Field Label and Field Validation HTML, e.g.: <form-section heading=\"Title\"> <field manual> <manual-element><strong>Element</strong></manual-element> <manual-label><strong>Label</strong></manual-label> <manual-validation><strong>validation</strong></manual-validation> </field> Or, if you want to specify the optional model metadata, valid state and field configuration: @inject ICompositeMetadataDetailsProvider MetadataDetailsProvider ... <form-section heading=\"Title\"> <field manual model-metadata=\"new DefaultModelMetadataProvider(MetadataDetailsProvider).GetMetadataForType(typeof(int))\" is-valid=\"true\" append=\"After Element\" prepend=\"Before Element\"> <manual-element><strong>Element</strong></manual-element> <manual-label><strong>Label</strong></manual-label> <manual-validation><strong>validation</strong></manual-validation> </field> </form-section> Note: the way that the manual field is implemented allows for quite a bit of extensibility by defining custom tag helpers that define the various parts of your field. See the implementations for <manual-element> etc. for an idea of how to do that. If you want to define your own HTML for the Field Element, Field Label and Field Validation HTML then you can do so by using the Field method on the Section, e.g.: @using (var s = f.BeginSection(\"Title\")) { @s.Field(new HtmlString(\"label\"), new HtmlString(\"element\")).ChainFieldConfigurationMethodsHere() @* Or, if you want to specify all the possible values: *@ @s.Field(new HtmlString(\"label\"), new HtmlString(\"element\"), new HtmlString(\"validation\"), new ModelMetadata(...), isValid: false).ChainFieldConfigurationMethodsHere() } The Field method on the Section looks like this: /// <summary> /// Outputs a field with passed in HTML. /// </summary> /// <param name=\"labelHtml\">The HTML for the label part of the field</param> /// <param name=\"elementHtml\">The HTML for the field element part of the field</param> /// <param name=\"validationHtml\">The HTML for the validation markup part of the field</param> /// <param name=\"metadata\">Any field metadata</param> /// <param name=\"isValid\">Whether or not the field is valid</param> /// <param name=\"fieldConfiguration\">Optional field configuration</param> /// <returns>A field configuration that can be used to output the field as well as configure it fluently</returns> IFieldConfiguration Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml = null, ModelMetadata metadata = null, bool isValid = true, IFieldConfiguration fieldConfiguration = null); Use a Field Generator to output a single field in a Section Tag Helpers variant HTML Helpers variant If you would like ChameleonForms to use a Field Generator to generate the HTML for the Field Element, Field Label and Field Validation HTML from a field on the model then you can use the <field> tag helper, e.g.: <form-section heading=\"Title\"> <field for=\"FieldOnTheModel\" /> @* and you can add field configuration: *@ <field for=\"FieldOnTheModel\" placeholder=\"Placeholder text\" ... /> <field for=\"FieldOnTheModel\" fluent-config='c => c.ChainFieldConfigurationMethodsHere()' /> </form-section> If you would like ChameleonForms to use a Field Generator to generate the HTML for the Field Element, Field Label and Field Validation HTML from a field on the model then you can use the FieldFor extension method on the Section, e.g.: @using (var s = f.BeginSection(\"Title\")) { @s.FieldFor(m => m.FieldOnTheModel).ChainFieldConfigurationMethodsHere() } The FieldFor extension method looks like this: /// <summary> /// Creates a single form field as a child of a form section. /// </summary> /// <example> /// @s.FieldFor(m => m.FirstName) /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"section\">The section the field is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the field for</param> /// <returns>A field configuration object that allows you to configure the field</returns> public static IFieldConfiguration FieldFor<TModel, T>(this ISection<TModel> section, Expression<Func<TModel, T>> property) { var fc = new FieldConfiguration(); new Field<TModel>(section.Form, false, section.Form.GetFieldGenerator(property), fc); return fc; } Use a Field Generator to output a parent field in a Section Tag Helpers variant HTML Helpers variant If you want to use a Field Generator and want to nest child Fields under a Field then you can use a non self-closing <field> tag helper, e.g.: <form-section heading=\"Title\"> <field for=\"FieldOnTheModel\"> @* Child Fields *@ </field> </form-section> If you want to use a Field Generator and want to nest child Fields under a Field then you can use the BeginFieldFor extension method on the Section (optionally with a Field Configuration), e.g.: @using (var s = f.BeginSection(\"Title\")) { using (var ff = s.BeginFieldFor(m => m.FieldOnTheModel, Field.Configure().ChainFieldConfigurationMethodsHere())) { @* Child Fields *@ } } The BeginFieldFor extension method looks like this: /// <summary> /// Creates a single form field as a child of a form section that can have other form fields nested within it. /// </summary> /// <example> /// @using (var f = s.BeginFieldFor(m => m.Company)) { /// @f.FieldFor(m => m.PositionTitle) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"section\">The section the field is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the field for</param> /// <param name=\"config\">Any configuration information for the field</param> /// <returns>The form field</returns> public static Field<TModel> BeginFieldFor<TModel, T>(this ISection<TModel> section, Expression<Func<TModel, T>> property, IFieldConfiguration config = null) { return new Field<TModel>(section.Form, true, section.Form.GetFieldGenerator(property), config); } Use a Field Generator to output a single field in a parent Field Tag Helpers variant HTML Helpers variant If you want to use a Field Generator to create nested Fields under a parent Field then you can nest <field> tag helpers within the parent <field> , e.g.: <field for=\"FieldOnTheModel\"> <field for=\"ChildField\" /> </field> If you want to use a Field Generator to create nested Fields under a parent Field then you can use the BeginFieldFor extension method on the Field (with an optional Field Configuration), e.g.: @using (var ff = s.BeginFieldFor(m => m.FieldOnTheModel)) { @ff.FieldFor(m => m.ChildField).ChainFieldConfigurationMethodsHere() } The FieldFor extension method looks like this: /// <summary> /// Creates a single form field as a child of another form field. /// </summary> /// <example> /// @using (var f = s.BeginFieldFor(m => m.Company)) { /// @f.FieldFor(m => m.PositionTitle) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"field\">The parent field the field is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the field for</param> /// <returns>A field configuration object that allows you to configure the field</returns> public static IFieldConfiguration FieldFor<TModel, T>(this Field<TModel> field, Expression<Func<TModel, T>> property) { var config = new FieldConfiguration(); new Field<TModel>(field.Form, false, field.Form.GetFieldGenerator(property), config); return config; } Default HTML Field <dt>%labelHtml% %requiredDesignator%</dt> <dd class=\"%fieldContainerClasses%\"> %prependedHtml% %fieldElement% %appendedHtml% %hint% %validationHtml% </dd> Required designator The %requiredDesignator% is shown if the field is required: <em class=\"required\">*</em> If you want to override the required designator look at Creating custom form templates > Field . Hint The %hint% is shown if a hint is specified in the Field Configuration : <div class=\"hint\" id=\"%fieldId%--Hint\">%hint%</div> If a hint is added then an aria-describedby=\"%fieldId%--Hint\" attribute value will automatically be added to the field element to improve accessibility . Begin HTML (parent) <dt>%labelHtml% %requiredDesignator%</dt> <dd class=\"%fieldContainerClasses%\"> %prependedHtml% %fieldElement% %appendedHtml% %hint% %validationHtml% <dl> End HTML (parent) </dl> </dd> Twitter Bootstrap 3 HTML Field: Input (except checkbox and file upload), textarea or select control <div class=\"form-group%if !isValid% has-error%endif%%fieldContainerClasses%\"> %if withoutLabel%<span class=\"control-label\">%endif% %labelHtml class=\"control-label\"% %if withoutLabel%</span>%endif% %if isInputGroup or isRequired% <div class=\"input-group\"> %endif% %prependedHtml% %fieldElement class=\"form-control\"% %appendedHtml% %if isRequired% <div class=\"input-group-addon required\">%requiredDesignator%</div> %endif% %if isInputGroup or isRequired% </div> %endif% %hint% %validationHtml class=\"help-block\"% </div> Field: Single checkbox <div class=\"checkbox%if !isValid% has-error%endif%%fieldContainerClasses%\"> %prependedHtml% %fieldElement% %requiredDesignator% %appendedHtml% %hint% %validationHtml class=\"help-block\"% </div> Field: Radio/Checkbox list <div class=\"form-group%if !isValid% has-error%endif%%fieldContainerClasses%\"> <span class=\"control-label\"> %labelHtml% %requiredDesignator% </span> %prependedHtml% %fieldElement% %appendedHtml% %hint% %validationHtml class=\"help-block\"% </div> Field: Other (e.g. file upload) <div class=\"form-group%if !isValid% has-error%endif%%fieldContainerClasses%\"> %if withoutLabel%<span class=\"control-label\">%endif% %labelHtml% %requiredDesignator% %if withoutLabel%</span>%endif% %prependedHtml% %fieldElement% %appendedHtml% %hint% %validationHtml class=\"help-block\"% </div> Common elements The %requiredDesignator% is shown if the field is required: <em class=\"required\" title=\"Required\">&lowast;</em> The %hint% is shown if a hint is specified in the Field Configuration: <div class=\"help-block form-hint\" id=\"%fieldId%--Hint\">%hint</div> Input Groups If the Field Element is within an input group then the prepended and appended HTML will be wrapped in the following: <div class=\"input-group-addon\">%html%</div> A field is in an input group if: The field is an input (except checkbox and file upload), textarea or select control and: The field is required (since the Form Template appends the required designator as an input group add-on); or You use the AsInputGroup extension method from the ChameleonForms.Templates.TwitterBootstrap3 namespace on the IFieldConfiguration In all other situations you will manually need to add wrapping HTML with the relevant classes (e.g. using Append and Prepend on the Field Configuration ). As an example of what you can do with the input group consider the following: Tag Helpers variant HTML Helpers variant <field for=\"Dollars\" fluent-config='c => c.AsInputGroup()' prepend=\"$\" append=\".00\" /> @s.FieldFor(m => m.Dollars).AsInputGroup().Prepend(\"$\").Append(\".00\") This will render like this: In order to be able to swap out the extension method usage across your application easily if you change your form template we recommend that rather than adding a using statement to ChameleonForms.Templates.TwitterBootstrap3 for each view that has a form using the extension method you instead add the namespace to your _ViewImports.cshtml file. Parent field Begin HTML The HTML is the same as the Field HTML specified above, but the last </div> is replaced with: <div class=\"row nested-fields\"> <div class=\"col-xs-1\"></div> <div class=\"col-xs-11\"> End HTML </div> </div> </div>"
  },
  "docs/field-configuration.html": {
    "href": "docs/field-configuration.html",
    "title": "Field Configuration | ChameleonForms",
    "keywords": "Field Configuration Field Configuration provides the ability to configure a Field (and its sub-components) on both an ad-hoc basis within a particular form and a convention basis across all forms. Specifying a Field Configuration is done by chaining calls to the methods on the IFieldConfiguration interface and/or calling the mapped field configuration attributes when using tag helpers. The IFieldConfiguration interface is translated to an IReadonlyFieldConfiguration just before it's passed to the template to make sure that modifications can't be made to it after it's processed by the template. The IFieldConfiguration interface looks like this and is in the ChameleonForms.Component.Config namespace: /// <summary> /// Holds configuration data for a form field. /// </summary> public interface IFieldConfiguration : IHtmlContent, IReadonlyFieldConfiguration { /// <summary> /// Attributes to add to the form element's HTML. /// </summary> HtmlAttributes Attributes { get; } /// <summary> /// Override the default id for the field. /// </summary> /// <param name=\"id\">The text to use for the id</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Id(string id); /// <summary> /// Adds a CSS class (or a number of CSS classes) to the attributes. /// </summary> /// <param name=\"class\">The CSS class(es) to add</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration AddClass(string @class); /// <summary> /// Adds or updates a HTML attribute with a given value. /// </summary> /// <param name=\"key\">The name of the HTML attribute to add/update</param> /// <param name=\"value\">The value of the HTML attribute to add/update</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Attr(string key, object value); /// <summary> /// Adds or updates a HTML attribute with using a lambda method to express the attribute. /// </summary> /// <example> /// h.Attr(style => \"width: 100%;\") /// </example> /// <param name=\"attribute\">A lambda expression representing the attribute to set and its value</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Attr(Func<object, object> attribute); /// <summary> /// Adds or updates a set of HTML attributes using lambda methods to express the attributes. /// </summary> /// <param name=\"attributes\">A list of lambas where the lambda variable name is the name of the attribute and the value is the value</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Attrs(params Func<object, object>[] attributes); /// <summary> /// Adds or updates a set of HTML attributes using a dictionary to express the attributes. /// </summary> /// <param name=\"attributes\">A dictionary of attributes</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Attrs(IDictionary<string, object> attributes); /// <summary> /// Adds or updates a set of HTML attributes using anonymous objects to express the attributes. /// </summary> /// <param name=\"attributes\">An anonymous object of attributes</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Attrs(object attributes); /// <summary> /// Sets the number of rows for a textarea to use. /// </summary> /// <param name=\"numRows\">The number of rows for the textarea</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Rows(int numRows); /// <summary> /// Sets the number of cols for a textarea to use. /// </summary> /// <param name=\"numCols\">The number of cols for the textarea</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Cols(int numCols); /// <summary> /// Sets the minimum value to accept for numeric text controls. /// </summary> /// <param name=\"min\">The minimum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Min(long min); /// <summary> /// Sets the maximum value to accept for numeric text controls. /// </summary> /// <param name=\"max\">The maximum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Max(long max); /// <summary> /// Sets the minimum value to accept for numeric text controls. /// </summary> /// <param name=\"min\">The minimum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Min(decimal min); /// <summary> /// Sets the maximum value to accept for numeric text controls. /// </summary> /// <param name=\"max\">The maximum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Max(decimal max); /// <summary> /// Sets the minimum value to accept for numeric text controls. /// </summary> /// <param name=\"min\">The minimum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Min(string min); /// <summary> /// Sets the maximum value to accept for numeric text controls. /// </summary> /// <param name=\"max\">The maximum value to accept</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Max(string max); /// <summary> /// Sets the stepping interval to use for numeric text controls. /// </summary> /// <param name=\"step\">The stepping interval</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Step(decimal step); /// <summary> /// Sets the stepping interval to use for numeric text controls. /// </summary> /// <param name=\"step\">The stepping interval</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Step(long step); /// <summary> /// Sets the field to be disabled (value not submitted, can not click). /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Disabled(bool disabled = true); /// <summary> /// Sets the field to be readonly (value can not be modified). /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Readonly(bool @readonly = true); /// <summary> /// Sets the field to be required. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Required(bool required = true); /// <summary> /// Sets a hint to the user of what can be entered in the field. /// </summary> /// <param name=\"placeholderText\">The text to use for the placeholder</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Placeholder(string placeholderText); /// <summary> /// Sets an inline label for a checkbox. /// </summary> /// <param name=\"labelText\">The text to use for the label</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration InlineLabel(string labelText); /// <summary> /// Sets an inline label for a checkbox. /// </summary> /// <param name=\"labelHtml\">The html to use for the label</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration InlineLabel(IHtmlContent labelHtml); /// <summary> /// Sets an inline label for a checkbox. /// </summary> /// <param name=\"labelHtml\">The html to use for the label as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration InlineLabel(Func<dynamic, IHtmlContent> labelHtml); /// <summary> /// Override the default label for the field. /// </summary> /// <param name=\"labelText\">The text to use for the label</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Label(string labelText); /// <summary> /// Override the default label for the field. /// </summary> /// <param name=\"labelHtml\">The text to use for the label</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Label(IHtmlContent labelHtml); /// <summary> /// Override the default label for the field. /// </summary> /// <param name=\"labelHtml\">The text to use for the label as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Label(Func<dynamic, IHtmlContent> labelHtml); /// <summary> /// Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. /// Use for a list or boolean value. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> /// <seealso cref=\"AsCheckboxList\"/> IFieldConfiguration AsRadioList(); /// <summary> /// Renders the field as a list of radio options for selecting single values or checkbox items for selecting multiple values. /// Use for a list or boolean value. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> /// <seealso cref=\"AsRadioList\"/> IFieldConfiguration AsCheckboxList(); /// <summary> /// Renders the field as a drop-down control. /// Use for a list or boolean value. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration AsDropDown(); /// <summary> /// Change the label that represents true. /// </summary> /// <param name=\"trueString\">The label to use as true</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithTrueAs(string trueString); /// <summary> /// Change the label that represents none. /// </summary> /// <param name=\"noneString\">The label to use as none</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithNoneAs(string noneString); /// <summary> /// Change the label that represents false. /// </summary> /// <param name=\"falseString\">The label to use as false</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithFalseAs(string falseString); /// <summary> /// Sets a lambda expression to get the field that the field configuration is wrapping so that /// a call to ToHtmlString() will output the given field. /// </summary> /// <param name=\"field\">A lambda returning the HTML to output</param> void SetField(Func<IHtmlContent> field); /// <summary> /// Sets the field that the field configuration is wrapping so that /// a call to ToHtmlString() will output the given field. /// </summary> /// <param name=\"field\">The field being configured</param> void SetField(IHtmlContent field); /// <summary> /// Sets the field that the field configuration is wrapping so that /// a call to ToHtmlString() will output the given field. /// </summary> /// <param name=\"field\">The field being configured as a templated razor delegate</param> void SetField(Func<dynamic, IHtmlContent> field); /// <summary> /// Supply a string hint to display along with the field. /// </summary> /// <param name=\"hint\">The hint string</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithHint(string hint); /// <summary> /// Supply a HTML hint to display along with the field. /// </summary> /// <param name=\"hint\">The hint markup</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithHint(IHtmlContent hint); /// <summary> /// Supply a HTML hint to display along with the field. /// </summary> /// <param name=\"hint\">The hint markup as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithHint(Func<dynamic, IHtmlContent> hint); /// <summary> /// Prepends the given HTML to the form field. /// </summary> /// <param name=\"html\">The HTML to prepend</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Prepend(IHtmlContent html); /// <summary> /// Prepends the given HTML to the form field. /// </summary> /// <param name=\"html\">The HTML to prepend as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Prepend(Func<dynamic, IHtmlContent> html); /// <summary> /// Prepends the given string to the form field. /// </summary> /// <param name=\"str\">The string to prepend</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Prepend(string str); /// <summary> /// Appends the given HTML to the form field. /// </summary> /// <param name=\"html\">The HTML to append</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Append(IHtmlContent html); /// <summary> /// Appends the given HTML to the form field. /// </summary> /// <param name=\"html\">The HTML to append as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Append(Func<dynamic, IHtmlContent> html); /// <summary> /// Appends the given string to the form field. /// </summary> /// <param name=\"str\">The string to prepend</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration Append(string str); /// <summary> /// Override the HTML of the form field. /// /// This gives you ultimate flexibility with your field HTML when it's /// not quite what you want, but you still want the form template /// (e.g. label, surrounding html and validation message). /// </summary> /// <param name=\"html\">The HTML for the field</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration OverrideFieldHtml(IHtmlContent html); /// <summary> /// Override the HTML of the form field. /// /// This gives you ultimate flexibility with your field HTML when it's /// not quite what you want, but you still want the form template /// (e.g. label, surrounding html and validation message). /// </summary> /// <param name=\"html\">The HTML for the field as a templated razor delegate</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration OverrideFieldHtml(Func<dynamic, IHtmlContent> html); /// <summary> /// Uses the given format string when outputting the field value. /// </summary> /// <param name=\"formatString\">The format string to use</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithFormatString(string formatString); /// <summary> /// Hide the empty item that would normally display for the field. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration HideEmptyItem(); /// <summary> /// Don't use a &lt;label&gt;, but still include the label text for the field. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithoutLabelElement(); /// <summary> /// Specify one or more CSS classes to use for the field label. /// </summary> /// <param name=\"class\">Any CSS class(es) to use for the field label</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration AddLabelClass(string @class); /// <summary> /// Specify one or more CSS classes to use for the field container element. /// </summary> /// <param name=\"class\">Any CSS class(es) to use for the field container element</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration AddFieldContainerClass(string @class); /// <summary> /// Specify one or more CSS classes to use for the field validation message. /// </summary> /// <param name=\"class\">Any CSS class(es) to use for the field validation message</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration AddValidationClass(string @class); /// <summary> /// Excludes one or more Enum values from the generated field. /// </summary> /// <param name=\"enumValues\">The value of Enum(s) to exclude from the generated field.</param> /// <returns></returns> IFieldConfiguration Exclude(params Enum[] enumValues); /// <summary> /// Specify that no inline label should be generated. /// </summary> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithoutInlineLabel(); /// <summary> /// Specify that inline labels should wrap their input element. Important for bootstrap. /// </summary> /// <param name=\"wrapElement\">True if the input element should be wrapped.</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration InlineLabelWrapsElement(bool wrapElement = true); /// <summary> /// Specify an ID to use for a field hint. /// </summary> /// <param name=\"hintId\">The ID to use</param> /// <returns>The <see cref=\"IFieldConfiguration\"/> to allow for method chaining</returns> IFieldConfiguration WithHintId(string hintId); } The IReadonlyFieldConfiguration interface can be created by calling the ToReadonly() method on the IFieldConfiguration ; it is in the ChameleonForms.Component.Config namespace and looks like this: /// <summary> /// Immutable field configuration for use when generating a field's HTML. /// </summary> public interface IReadonlyFieldConfiguration { /// <summary> /// A dynamic bag to allow for custom extensions using the field configuration. /// </summary> dynamic Bag { get; } /// <summary> /// Returns data from the Bag stored in the given property or default(TData) if there is none present. /// </summary> /// <typeparam name=\"TData\">The type of the expected data to return</typeparam> /// <param name=\"propertyName\">The name of the property to retrieve the data for</param> /// <returns>The data from the Bag or default(TData) if there was no data against that property in the bag</returns> TData GetBagData<TData>(string propertyName); /// <summary> /// Attributes to add to the form element's HTML. /// </summary> IDictionary<string, object> HtmlAttributes { get; } /// <summary> /// Gets any text that has been set for an inline label. /// </summary> IHtmlContent InlineLabelText { get; } /// <summary> /// Gets any text that has been set for the label. /// </summary> IHtmlContent LabelText { get; } /// <summary> /// Returns the display type for the field. /// </summary> FieldDisplayType DisplayType { get; } /// <summary> /// The label that represents true. /// </summary> string TrueString { get; } /// <summary> /// The label that represents false. /// </summary> string FalseString { get; } /// <summary> /// The label that represents none. /// </summary> string NoneString { get; } /// <summary> /// Get the hint to display with the field. /// </summary> IHtmlContent Hint { get; } /// <summary> /// A list of HTML to be prepended to the form field in ltr order. /// </summary> IEnumerable<IHtmlContent> PrependedHtml { get; } /// <summary> /// A list of HTML to be appended to the form field in ltr order. /// </summary> IEnumerable<IHtmlContent> AppendedHtml { get; } /// <summary> /// The HTML to be used as the field html. /// </summary> IHtmlContent FieldHtml { get; } /// <summary> /// The format string to use for the field. /// </summary> string FormatString { get; } /// <summary> /// Whether or not the empty item is hidden. /// </summary> bool EmptyItemHidden { get; } /// <summary> /// Whether or not to use a &lt;label&gt;. /// </summary> bool HasLabelElement { get; } /// <summary> /// Any CSS class(es) to use for the field label. /// </summary> string LabelClasses { get; } /// <summary> /// Any CSS class(es) to use for the field container element. /// </summary> string FieldContainerClasses { get; } /// <summary> /// Any CSS class(es) to use for the field validation message. /// </summary> string ValidationClasses { get; } /// <summary> /// Enum value(s) to exclude from the generated field. /// </summary> Enum[] ExcludedEnums { get; } /// <summary> /// Whether or not to use an inline &lt;label&gt;. /// </summary> bool HasInlineLabel { get; } /// <summary> /// Whether or not inline &lt;label&gt; should wrap their &lt;input&gt; element. /// </summary> bool ShouldInlineLabelWrapElement { get; } /// <summary> /// The ID to use for a field hint. /// </summary> string HintId { get; } } The xmldoc comments above should give a pretty good indication of how each of those methods are meant to be used. There is further documentation about the effect of the different methods in the following documentation: Field Field Label Field Types Tag Helper mappings When using tag helpers there are two ways of specifying field configuration: Use the fluent-config attribute and chain the field configuration method calls Use individual attributes that are mapped to individual field configuration methods Fluent configuration Note: We recommend that you make use of single quotes ( ' ) rather than double quotes ( \" ) so that you can use the double quotes in any field configuration methods that need a string. Alternatively, you can keep double quotes and wrap the whole thing in @() e.g. fluent-config=\"@(c => c.AddClass(\"a-class\"))\" . <field for=\"...\" fluent-config='c => c.AddClass(\"a-class\").Append(\"after\")...' /> <field-element for=\"...\" fluent-config='c => c.AddClass(\"a-class\").Min(2)...' /> <field-label for=\"...\" fluent-config='c => c.Label(\"a-class\").WithoutLabelElement()...' /> <field-validation for=\"...\" fluent-config='c => c.AddValidationClass(\"a-class\")...' /> Mapped attributes Any attributes that take string values can have a variable or other C# expression added by prepending with a @ per usual Razor syntax. Most field configuration methods map to a tag helper attribute by convention - UpperCamelCase to upper-camel-case (i.e. kebab case), but a few are slightly different for clarity or terseness. Field Configuration Method Equivalent Tag Helper attribute Available On AddClass(string @class) add-class=\"{class}\" <field> and <field-element> AddFieldContainerClass(string @class) add-container-class=\"{class}\" <field> AddLabelClass(string @class) add-label-class=\"{class}\" <field> and <field-label> AddValidationClass(string @class) add-validation-class=\"{class}\" <field> and <field-validation> AsRadioList() as=\"RadioList\" <field> and <field-element> AsCheckboxList() as=\"CheckboxList\" <field> and <field-element> AsDropDown() as=\"DropDown\" <field> and <field-element> Append(IHtmlContent html) append-html-content=\"{html}\" <field> Append(Func<dynamic, IHtmlContent> html) append-html=\"{html}\" <field> Append(string str) append=\"{str}\" <field> Attr(string key, object value) attr-{key}=\"{value}\" <field> and <field-element> Attr(Func<object, object> attribute) No equivalent N/A Attrs(params Func<object, object>[] attributes) No equivalent N/A Attrs(IDictionary<string, object> attributes) attrs=\"{attributes}\" <field> and <field-element> Attrs(object attributes) No equivalent N/A Cols(int numCols) cols=\"{numCols}\" <field> and <field-element> Disabled(bool disabled = true) disabled=\"{disabled}\" <field> and <field-element> Exclude(params Enum[] enumValues) exclude=\"new Enum[] {enumValues...}\" <field> and <field-element> Id(string id) id=\"{id}\" <field> and <field-element> InlineLabel(string labelText) inline-label=\"{labelText}\" <field> and <field-element> InlineLabel(IHtmlContent labelHtml) inline-label-html-content=\"{labelHtml}\" <field> and <field-element> InlineLabel(Func<dynamic, IHtmlContent> labelHtml) inline-label-html=\"{labelHtml}\" <field> and <field-element> InlineLabelWrapsElement(bool wrapElement = true) inline-label-wraps-element=\"{wrapElement}\" <field> and <field-element> Label(string labelText) label=\"{labelText}\" <field> and <field-label> Label(IHtmlContent labelHtml) label-html-content=\"{labelHtml}\" <field> and <field-label> Label(Func<dynamic, IHtmlContent> labelHtml) label-html=\"{labelHtml}\" <field> and <field-label> Min(decimal min) min=\"@min.ToString()\" <field> and <field-element> Min(long min) min=\"@min.ToString()\" <field> and <field-element> Min(string min) min=\"{min}\" <field> and <field-element> Max(decimal max) max=\"@max.ToString()\" <field> and <field-element> Max(long max) max=\"@max.ToString()\" <field> and <field-element> Max(string max) max=\"{max}\" <field> and <field-element> OverrideFieldHtml(IHtmlContent html) override-field-html-content=\"{html}\" <field> OverrideFieldHtml(Func<dynamic, IHtmlContent> html) override-field-html=\"{html}\" <field> Placeholder(string placeholderText) placeholder=\"{placeholderText}\" <field> and <field-element> Prepend(IHtmlContent html) prepend-html-content=\"{html}\" <field> Prepend(Func<dynamic, IHtmlContent> html) prepend-html=\"{html}\" <field> Prepend(string str) prepend=\"{str}\" <field> Readonly(bool @readonly = true) readonly=\"{readonly}\" <field> and <field-element> Required(bool required = true) required=\"{required}\" <field> and <field-element> Rows(int numRows) rows=\"{numRows}\" <field> and <field-element> Step(decimal step) step=\"{step}\" (inline) or step=\"@step.ToString()\" <field> and <field-element> Step(long step) step=\"{step}\" (inline) or step=\"@step.ToString()\" <field> and <field-element> HideEmptyItem() hide-empty-item=\"true\" <field> and <field-element> WithFalseAs(string falseString) false-label=\"{falseString}\" <field> and <field-element> WithFormatString(string formatString) format-string=\"{formatString}\" <field> and <field-element> WithHint(string hint) hint=\"{hint}\" <field> WithHint(IHtmlContent hint) hint-html-content=\"{hint}\" <field> WithHint(Func<dynamic, IHtmlContent> hint) hint-html=\"{hint}\" <field> WithHintId(string hintId) hint-id=\"{hintId}\" <field> WithNoneAs(string noneString) none-label=\"{noneString}\" <field> and <field-element> WithoutInlineLabel() without-inline-label=\"true\" <field> and <field-element> WithoutLabelElement() without-label-element=\"true\" <field> and <field-label> WithTrueAs(string trueString) true-label=\"{trueString}\" <field> and <field-element> How does the IFieldConfiguration output the Field HTML for HTML Helper extension methods? The astute viewer will notice that the various FieldFor , FieldElementFor , LabelFor and ValidationMessageFor HTML Helper extension methods all return an IFieldConfiguration as opposed to a string or IHtmlContent , yet when prefixed with @ in a razor view (with or without chaining any Field Configuration methods) will always output the correct HTML. This works because: The IFieldConfiguration interface extends IHtmlContent , which forces it to implement the .WriteTo(TextWriter writer, HtmlEncoder encoder) method (which will be called by razor via the @ operator) All the methods on IFieldConfiguration return the same instance of the IFieldConfiguration object so the @ operator will apply to that Field Configuration regardless of what methods the user calls The SetField(IHtmlContent) method, SetField(Func<dynamic, IHtmlContent>) method (for templated razor delegates ) or the SetField(Func<IHtmlContent>) method will be called before returning the IFieldConfiguration to indicate what HTML should be output by the Field Configuration if the .ToHtmlString() method is called The SetField method approach allows for lazy evaluation of the HTML to output, meaning the HTML generation can occur after all of the IFieldConfiguration methods have been called (allowing the Field Configuration to be mutated before eventually being used) Passing HTML to field configuration methods For all the field configuration methods that take an IHtmlContent you have a few options available to you: Pass the HTML as a string e.g. .Label(new HtmlString(\"<strong>My label</strong>\")) Pass the HTML by calling any method that returns an IHtmlContent Use the override that takes a templated razor delegate , e.g.: Tag Helpers variant HTML Helpers variant Unfortunately, tag helpers don't support inline templated razor delegates so you have to pass it in via a variable. @{ Func<dynamic, IHtmlContent> myLabel = @<strong>My label</strong>; } ... <field for=\"MyField\" label=\"myLabel\" /> ... @{ Func<dynamic, IHtmlContent> myLabel = @<strong>My label</strong>; } ... @s.FieldFor(m => m.MyField).Label(myLabel) @s.FieldFor(m => m.MyOtherField).Label(@<strong>Inline templated razor delegate with single parent element</strong>) @s.FieldFor(m => m.MyOtherField).Label(@<text><strong>Inline</strong> templated razor delegate with no single parent element</text>) ... The Tag Helper attributes have a convention where the version that takes a IHtmlContent will be appended with -html-content and the version that takes a templated razor delegate will be appended with -html ."
  },
  "docs/field-element.html": {
    "href": "docs/field-element.html",
    "title": "Field Element | ChameleonForms",
    "keywords": "Field Element The Field Element is the HTML that makes up the control(s) to accept data from the user for a single Field. The Field Element can be: Specified manually Created by a Field Generator based on the metadata of the model property being displayed and the Field Configuration specified when it's: Displayed as part of a Field Output directly from the Form Outputting directly from the Form Tag Helpers variant HTML Helpers variant To use a Field Generator to output the HTML for a standalone Field Element you can use the <field-element /> tag, e.g.: <field-element for=\"SomeField\" /> <field-element for=\"SomeField\" fluent-config='c => c.ChainFieldConfigurationMethodsHere()' /> <field-element for=\"SomeField\" placeholder=\"Placeholder text...\" /> To see the different configuration options check out field configuration . To use a Field Generator to output the HTML for a standalone Field Element you can use the FieldElementFor extension method on the Form (with optional Field Configuration), e.g.: @f.FieldElementFor(m => m.SomeField).ChainFieldConfigurationMethodsHere() The FieldElementFor extension method looks like this: /// <summary> /// Creates a standalone form field to be output in a form. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonForm()) { /// @f.FieldElementFor(m => m.PositionTitle) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"form\">The form the field is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the field for</param> /// <returns>A field configuration object that allows you to configure the field</returns> public static IFieldConfiguration FieldElementFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property) { var config = new FieldConfiguration(); config.SetField(() => form.GetFieldGenerator(property).GetFieldHtml(config)); return config; } Default HTML The HTML for the Field Element will be determined depending on the metadata of the model property being specified and the options in the Field Configuration . The HTML of the Field Element will by default simply be: %fieldElement%"
  },
  "docs/field-label.html": {
    "href": "docs/field-label.html",
    "title": "Field Label | ChameleonForms",
    "keywords": "Field Label The Field Label is the HTML that makes up a label for a single Field. This Field Label can be: Specified manually Created by a Field Generator based on the metadata of the model property being displayed and the Field Configuration specified when it's: Displayed as part of a Field Output directly from the Form Outputting directly from the Form Tag Helpers variant HTML Helpers variant To use a Field Generator to output the HTML for a standalone Field Label you can use the <field-label /> tag, e.g.: <field-label for=\"SomeField\" /> <field-label for=\"SomeField\" fluent-config='c => c.ChainFieldConfigurationMethodsHere()' /> <field-label for=\"SomeField\" label=\"Label text...\" /> To see the different configuration options check out field configuration . To use a Field Generator to output the HTML for a standalone Field Label you can use the LabelFor extension method on the Form, e.g.: @f.LabelFor(m => m.SomeField).ChainFieldConfigurationMethodsHere() The LabelFor extension method looks like this: /// <summary> /// Creates a standalone label to be output in a form for a field. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonForm()) { /// @f.LabelFor(m => m.PositionTitle) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"form\">The form the label is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the label for</param> /// <returns>The HTML for the label</returns> public static IFieldConfiguration LabelFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property) { var config = new FieldConfiguration(); config.SetField(() => form.GetFieldGenerator(property).GetLabelHtml(config)); return config; } Default HTML The HTML for the Field Label will be determined depending on the metadata of the model property being specified and the options in the Field Configuration . The HTML of the Field Label will by default be: <label for=\"%field-element-id%\" (class=\"%labelClasses%\")>%labelText%</label> The %id% will be determined by using the built-in ASP.NET Core MVC methods for generating field ids, unless the .Id(\"overriddenId\") method is called on the Field Configuration to override the id. To add classes to the label then use the AddLabelClass method on the Field Configuration . If the WithoutLabelElement() method is called on the Field Configuration then the HTML of the Field Label will be: %labelText% The %labelText% will be determined by using the following (in order of preference from most to least if specified (not-null)): The text specified by calling the .Label(...) method on the Field Configuration ( note: if you use this then any validation messages will use the resulting label from the other points in this list and not what you specify in the .Label(...) method, it will just impact the display of the label in this one place) The DisplayName property in the ModelMetadata for the model property being displayed The Name property in the ModelMetadata for the model property being displayed The name of the model property being displayed (all lower-case except for the first character) By default, ChameleonForms will set sensible defaults in the DisplayName property in ModelMetadata by humanizing the property name; consult the relevant documentation to find out more ."
  },
  "docs/field-validation-html.html": {
    "href": "docs/field-validation-html.html",
    "title": "Field Validation HTML | ChameleonForms",
    "keywords": "Field Validation HTML The Field Validation HTML is markup that acts as both a placeholder to display any client-side validation messages for a particular Field as well as displaying any server-side validation messages for that Field. The Field Validation HTML can be: Specified manually Created by a Field Generator based on the metadata of the model property being displayed and the Field Configuration specified when it's: Displayed as part of a Field Output directly from the Form Outputting directly from the Form Tag Helpers variant HTML Helpers variant To use a Field Generator to output the HTML for a standalone Field Validation HTML you can use the <field-validation /> tag, e.g.: <field-validation for=\"SomeField\" /> <field-validation for=\"SomeField\" fluent-config='c => c.ChainFieldConfigurationMethodsHere()' /> <field-validation for=\"SomeField\" add-validation-class=\"validation\" /> To see the different configuration options check out field configuration . To use a Field Generator to output the HTML for a standalone Field Validation HTML you can use the ValidationMessageFor extension method on the Form, e.g.: @f.ValidationMessageFor(m => m.SomeField).ChainedFieldConfigurationMethodsHereAreIgnored() The ValidationMessageFor extension method looks like this: /// <summary> /// Creates a standalone validation message to be output in a form for a field. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonForm()) { /// @f.ValidationMessageFor(m => m.PositionTitle) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <typeparam name=\"T\">The type of the field being generated</typeparam> /// <param name=\"form\">The form the label is being created in</param> /// <param name=\"property\">A lamdba expression to identify the field to render the validation message for</param> /// <returns>The HTML for the validation message</returns> public static IFieldConfiguration ValidationMessageFor<TModel, T>(this IForm<TModel> form, Expression<Func<TModel, T>> property) { var config = new FieldConfiguration(); config.SetField(() => form.GetFieldGenerator(property).GetValidationHtml(config)); return config; } Default HTML The HTML for the Field Validation HTML is the same as calling: @Html.ValidationMessageFor(m => m.SomeField, new { @class = %validationClasses% }) or <span asp-validation-for=\"SomeField\" class=\"%validationClasses%\"></span> The default Field Generator ignores all properties on the Field Configuration when generating the Field Validation HTML apart from the ValidationClasses property, which you can set using the AddValidationClass method."
  },
  "docs/file-upload.html": {
    "href": "docs/file-upload.html",
    "title": "File Upload Fields | ChameleonForms",
    "keywords": "File Upload Fields If you need to collect uploaded file data then you can use ASP.NET Core MVC's IFormFile type for your model property, e.g.: public IFormFile FileUpload { get; set; } In order for file uploads to work you will need to set the encoding type on the form to multipart/form-data ( as opposed to the default ), e.g.: Tag Helpers variant HTML Helpers variant <chameleon-form enctype=\"Multipart\"> @* ... *@ </chameleon-form> @using (var f = Html.BeginChameleonForm(encType: EncType.Multipart)) { @* ... *@ } To then use the file upload in your controller action you use the documented approaches to handle the uploaded file(s). If you want the field to be Required you can annotate with [Required] . ChameleonForms doesn't currently support generating the correct HTML to handle multiple file uploads, but feel free to submit an issue or pull request to discuss adding that feature. Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"file\" value=\"%value%\" /> If the field is marked as [Required] then required=\"required\" will be added."
  },
  "docs/flags-enum.html": {
    "href": "docs/flags-enum.html",
    "title": "Flags Enum Fields | ChameleonForms",
    "keywords": "Flags Enum Fields If you want the user to specify multiple values from an enum you can either use a non-flags enum against any property with a type convertible to IEnumerable<%enumType%> (separate page) or use a flags enum (this page), e.g.: [Flags] public enum MyFlagsEnum { ValueOne = 1 << 0, ValueTwo = 1 << 1, ValueThree = 1 << 2, ... } ... public MyFlagsEnum RequiredWithZeroAsUnselectedValue { get; set; } [Required] public MyFlagsEnum? RequiredWithNullAsUnselectedValue { get; set; } public MyFlagsEnum? NonRequiredAndNullAsUnselectedValue { get; set; } Flags enums have a few rough edges on them if you aren't careful so it's a good idea to read the guidance for how to use them. In particular, make sure that none of your values have a value of 0 and you explicitly assign integer values to all enum values in multiples of 2. The out-of-the-box ASP.NET Core MVC support for flags enums leaves a lot to be desired, but ChameleonForms provides first-class model binding and validation support for flags enums by default to patch the default MVC behaviour. If you want the user to specify a single value from a non-Flags enum then you can use the enum type directly . Required validation ASP.NET MVC's default validation doesn't pick up 0 for a flags enum as the field not being specified, thus you need to alter the validation for requires flags enums. ChameleonForms patches this problem by default . It will correctly flag an error for both a non-nullable flags enum field or a flags enum field with [Required] specified. Model binding The default MVC model binder does not correctly bind flags enum values. ChameleonForms provides the FlagsEnumModelBinder ( and the provider ) to assist with that. This is registered for you by default . Default HTML Required nullable or non-nullable enum (multi-select drop-down with no empty option) <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> Non-Required nullable enum (multi-select drop-down with empty option) <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">%noneDescription%</option> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> Explanation and example Please see the explanation an example on the Enum Field page to understand what %x.ToString() and %x.Humanize()% do and how to control the description values. Configurability Display as list of checkboxes You can force a list of enums field to display as a list of checkboxes rather than a multi-select drop-down using the AsCheckboxList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsCheckboxList method is mapped to as=\"CheckboxList\" . <field for=\"FlagsEnum\" as=\"CheckboxList\" /> @s.FieldFor(m => m.FlagsEnum).AsCheckboxList() This will change the default HTML for a both Required and non-Required list of enums (both nullable and non-nullable) fields as shown above to: <ul> %foreach enum value x with increment i % <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_%i%\" name=\"%propertyName%\" type=\"checkbox\" value=\"%x.ToString()%\" /> <label for=\"%propertyName%_%i%\">%x.Humanize()%</label></li> %endforeach% </ul> Change the text description of none When you display a non-Required list of enums field as a drop-down you can change the text that is used to display the none value to the user. By default the text used is None . To change the text simply use the WithNoneAs method, e.g.: Tag Helpers variant HTML Helpers variant The WithNoneAs method is mapped to none-label=\"{label}\" . <field for=\"NonRequiredNullableFlagsEnum\" none-label=\"No value\" /> @s.FieldFor(m => m.NonRequiredNullableFlagsEnum).WithNoneAs(\"No value\") This will change the default HTML for the non-Required drop-down list of enum field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No value</option> @* Enum values as <options>... *@ </select> Hide empty item If you have a non-Required list of enums field then it will show the empty item and this item will be selected by default if no values are selected. If for some reason you want a non-Required list of enums field, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant <field for=\"NullableEnumListField\" hide-empty-item=\"true\" /> @s.FieldFor(m => m.NullableEnumListField).HideEmptyItem() This will change the default HTML for the non-Required drop-down list of enum field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> @* Enum values as <options>... *@ </select>"
  },
  "docs/form-templates.html": {
    "href": "docs/form-templates.html",
    "title": "Using different form templates | ChameleonForms",
    "keywords": "Using different form templates Form Templates are the concept in Chameleon Forms that allows you to abstract the HTML that makes up the form itself as well as the components within it like messages, sections, fields and navigation. Default form template The DefaultFormTemplate outputs a sensible default that looks good without any / with minimal CSS and is a nice way to semantically describe a form. It makes use of definition lists to do this. See Configuring the Default Form Template / Default global config . To see examples of the HTML this template outputs check out: Form HTML Message HTML - including the documentation about how the ChameleonForms MessageType maps to the Twitter Bootstrap Emphasis Styles Section HTML - including top-level and nested sections Navigation HTML - including how to add submit and reset buttons Field HTML - including: The HTML it uses to layout the field sub-components The HTML it uses for hints The default required designator HTML ( which can be overriden ) The HTML for nested fields Twitter Bootstrap 3 form template See Twitter Bootstrap 3 template . Custom templates See Creating custom form templates . Custom extension method If you would like to change the template being used across one or more forms, or would like a method name that is more meaningful to your application than BeginChameleonForm , you can simply define you own extension method instead, e.g.: public static class FormHelpers { public static IForm<TModel> BeginMyApplicationNameForm<TModel>(this HtmlHelper<TModel> htmlhelper, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = null) { return new Form<TModel>(htmlhelper, new MyCustomFormTemplate(), action, method, htmlAttributes, enctype); } } If you'd like to use the globally configured default form template rather than newing up the template as shown above then you can use the same code in the BeginChameleonForm extension method to resolve the template: htmlHelper.GetDefaultFormTemplate() Which is an extension method on IHtmlHelper in the ChameleonForms namespace, which resolves IFormTemplate from the request services collection. For more information see Configuring the form template . Using multiple templates in a single application If you want to use different form templates across multiple forms in a single application then you can't make use of FormTemplate.Default and you will need to create multiple extension methods (as shown above) for each form template you want to use. Then you opt in to a particular type of template by using the corresponding extension method for a given form."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started with Chameleon Forms | ChameleonForms",
    "keywords": "Getting Started with Chameleon Forms Getting started Prerequisites This library works against netcoreapp3.1. If you are using a different version of .NET Core or are running ASP.NET Core against Full Framework then feel free to raise an issue to discuss opening up broader support. If you are using ASP.NET MVC 5 then check out v3.0.3 of the NuGet package and documentation . This library works against ASP.NET Core MVC - if you want to use it for Blazor or Razor Pages then feel free to raise an issue to discuss. Getting it running Install the NuGet package Install-Package ChameleonForms -pre (v4 is currently marked beta so you need to include pre-release versions) Register ChameleonForms in your Startup.cs file: public void ConfigureServices(IServiceCollection services) { ... services.AddMvc(...); ... services.AddChameleonForms(); } Note: you can alter the configuration from the default, see the docs . Add the following to your _ViewImports.cshtml : @using ChameleonForms; @using ChameleonForms.Enums; @using ChameleonForms.Component; @addTagHelper ChameleonForms.TagHelpers.*, ChameleonForms @* optional: *@ @addTagHelper ChameleonForms.Templates.TwitterBootstrap3.*, ChameleonForms Create your first form, e.g.: ~/Controllers/MyFormController.cs : using System; using System.ComponentModel.DataAnnotations; using Microsoft.AspNetCore.Mvc; namespace MyWebApp.Controllers { public class MyFormViewModel { [Required] public string Name { get; set; } public int FavouriteNumber { get; set; } [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] public DateTime DateOfBirth { get; set; } } public class MyFormController : Controller { public IActionResult Index() { return View(); } [HttpPost] public IActionResult Index(MyFormViewModel vm) { if (ModelState.IsValid) { // Do stuff return RedirectToAction(\"Index\"); } return View(vm); } } } ~/Views/MyForm/Index.cshtml : You have two options for your view - tag helper syntax or the more traditional HTML helper syntax . Tag Helpers variant HTML Helpers variant @model MyWebApp.Controllers.ViewModel @{ ViewData[\"Title\"] = \"My Form\"; } <chameleon-form> <form-section heading=\"About you!?\"> <field for=\"Name\" /> <field for=\"FavouriteNumber\" /> <field for=\"DateOfBirth\" /> </form-section> <form-navigation> <submit-button label=\"Submit\" /> </form-navigation> </chameleon-form> @section Scripts { <partial name=\"_ValidationScriptsPartial\" /> @* ... or relevant equivalent *@ } @model MyWebApp.Controllers.ViewModel @{ ViewData[\"Title\"] = \"My Form\"; } @using (var f = Html.BeginChameleonForm()) { using (var s = f.BeginSection(\"About you!?\")) { @s.FieldFor(m => m.Name) @s.FieldFor(m => m.FavouriteNumber) @s.FieldFor(m => m.DateOfBirth) } using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\") } } @section Scripts { <partial name=\"_ValidationScriptsPartial\" /> @* ... or relevant equivalent *@ } Run it! (Optional) If you want to add the additional client-side validation support in ChameleonForms (which supports both jquery validate unobtrusive validation and aspnet-validation ) then add the following to your _ValidationScriptsPartial.cshtml or equivalent file: <script src=\"~/lib/chameleonforms/unobtrusive-date-validation.chameleonforms.js\" asp-append-version=\"true\"></script> (Optional) If you are using Twitter Bootstrap 3 then add the following to your _ValidationScriptsPartial.cshtml (which only supports jquery validate unobtrusive validation for now): <script src=\"~/lib/chameleonforms/unobtrusive-twitterbootstrap3-validation.chameleonforms.js\" asp-append-version=\"true\"></script> And add the following to your _Layout.cshtml or equivalent file: <link href=\"~/lib/chameleonforms/chameleonforms-twitterbootstrap3.css\" rel=\"stylesheet\" type=\"text/css\" asp-append-version=\"true\" /> Show me a basic ChameleonForms example next to its ASP.NET Core MVC counterpart! Say you had the following view model: public class BasicViewModel { [Required] public string RequiredString { get; set; } public SomeEnum SomeEnum { get; set; } public bool SomeCheckbox { get; set; } } And assuming for a moment you used definition lists to wrap your HTML fields then you might end up with something like this in your Razor view: Tag Helpers variant HTML Helpers variant <form action=\"\" method=\"post\"> <fieldset> <legend>A form</legend> <dl> <dt><label asp-for=\"RequiredString\">Some string</label></dt> <dd><input asp-for=\"RequiredString\" /> <span asp-validation-for=\"RequiredString\"></span></dd> <dt><label asp-for=\"SomeEnum\"></label></dt> <dd><select asp-for=\"SomeEnum\" asp-items=\"Html.GetEnumSelectList<SomeEnum>()\"></select> <span asp-validation-for=\"SomeEnum\"></span></dd> <dt><label asp-for=\"SomeCheckbox\"></label></dt> <dd><label><input asp-for=\"SomeCheckbox\" /> Are you sure?</label> <span asp-validation-for=\"SomeCheckbox\"></span></dd> </dl> </fieldset> <div class=\"form_navigation\"> <input type=\"submit\" value=\"Submit\" /> </div> </form> @using (Html.BeginForm()) { <fieldset> <legend>A form</legend> <dl> <dt>@Html.LabelFor(m => m.RequiredString, \"Some string\")</dt> <dd>@Html.TextBoxFor(m => m.RequiredString) @Html.ValidationMessageFor(m => m.RequiredString)</dd> <dt>@Html.LabelFor(m => m.SomeEnum)</dt> <dd>@Html.DropDownListFor(m => m.SomeEnum, Enum.GetNames(typeof(SomeEnum)).Select(x => new SelectListItem {Text = ((SomeEnum)Enum.Parse(typeof(SomeEnum), x)).Humanize(), Value = x})) @Html.ValidationMessageFor(m => m.SomeEnum)</dd> <dt>@Html.LabelFor(m => m.SomeCheckbox)</dt> <dd>@Html.CheckBoxFor(m => m.SomeCheckbox) @Html.LabelFor(m => m.SomeCheckbox, \"Are you sure?\") @Html.ValidationMessageFor(m => m.SomeCheckbox)</dd> </dl> </fieldset> <div class=\"form_navigation\"> <input type=\"submit\" value=\"Submit\" /> </div> } The equivalent of this form with out-of-the-box ChameleonForms functionality is: Tag Helpers variant HTML Helpers variant <chameleon-form> <form-section heading=\"A form\"> <field for=\"RequiredString\" label=\"Some string\" /> <field for=\"SomeEnum\" /> <field for=\"SomeCheckbox\" inline-label=\"Are you sure?\" /> </form-section> <form-navigation> <submit-button label=\"Submit\" /> </form-navigation> </chameleon-form> @using (var f = Html.BeginChameleonForm()) { using (var s = f.BeginSection(\"A form\")) { @s.FieldFor(m => m.RequiredString).Label(\"Some string\") @s.FieldFor(m => m.SomeEnum) @s.FieldFor(m => m.SomeCheckbox).InlineLabel(\"Are you sure?\") } using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\") } } What does ChameleonForms do for me? Chameleon Forms provides an object hierarchy that allows you to declaratively specify the structure of your form. From there: It will output the boilerplate template of your form by way of a form template It will discern a number of defaults about each field based on inspecting the model metadata for each property It will allow you to tweak individual fields by chaining methods using the fluent api off of each field (and some other elements such as submit buttons) declaration If gives you the freedom to break out into HTML/Razor anywhere in the form when the template / built-in structures don't meet your needs It gives you the ability to apply global conventions across your forms It makes use of convention over configuration, using statements and an opinionated structure (that is easy enough to opt out of or create your own structure if you like) to make each form consistent and demonstrating a minimum of repetition. How are ChameleonForms forms structured? There is a general structure that ChameleonForms encourages with the out-of-the-box setup that can be described by the following diagrams. In reality you can use any structure you like and you can break out into plain old HTML any time you need to, but this explains the default structure that ChameleonForms empowers you to specify by default. Form At the top level is the Form - a Form can have any number of Form Components underneath it or, for ultimate flexibility, the separate components that make up a Field on an ad hoc basis(using the Field Element, the Field Label and the Field Validation HTML). The Form Components that come with ChameleonForms out of the box are: Message Section Navigation To create a Form simply use the <chameleon-form> tag helper or the BeginChameleonForms extension method off of the Html helper: Tag Helpers variant HTML Helpers variant <chameleon-form> @* The form ... *@ </chameleon-form> @using (var f = Html.BeginChameleonForm()) { @* The form ... *@ } See the Form documentation to understand how to configure the Form. Individual Field Elements, Field Labels and Field Validation HTML that don't fit in to a standard templated Section (see below) can be output from anywhere within your form like so: Tag Helpers variant HTML Helpers variant <p><field-label for=\"SomeCheckbox\" label=\"Hello!\" /> <field-element for=\"SomeCheckbox\" /> <field-validation for=\"SomeCheckbox\" /></p> <p>@f.LabelFor(m => m.SomeCheckbox).Label(\"Hello!\") @f.FieldFor(m => m.SomeCheckbox) @f.ValidationMessageFor(m => m.SomeCheckbox)</p> See the Field Element , Field Label and Field Validation documentation to understand how to configure these components. Section A Section component holds a set of Fields (see below for definition of Field) or nested sections (to no more than one level deep). A Section will start with a Heading. The default form template that comes with Chameleon Forms defines a top-level section as a fieldset . To create a Section simply use the <form-section> tag helper or the BeginSection extension method off of the Form object (or off of the Section object to create a nested one): Tag Helpers variant HTML Helpers variant <form-section heading=\"Basic information\"> <form-section heading=\"Nested section\"> @* Fields... *@ </form-section> @* Fields... *@ </form-section> @using (var s = f.BeginSection(\"Basic information\")) { using (var ss = s.BeginSection(\"Nested section\")) { @* Fields... *@ } @* Fields... *@ } See the Section documentation to understand how to configure the Section. Field A Field is a single data collection unit within a Section and comprises of an Element, a Label, Validation HTML and a Field Configuration. Fields can have other Fields nested within them (to one level deep). To create a Field simply use a self-closing <field /> tag helper or the FieldFor extension method off of the Section object. To create a parent Field that has nested fields within it then use the <field>...</field> tag helper or the BeginFieldFor extension method off of the Section object to start a Field with nested Fields: Tag Helpers variant HTML Helpers variant <field for=\"SomeField\" /> <field for=\"AnotherField\"> <field for=\"ChildField\" /> </field> @s.FieldFor(m => m.SomeField).FieldConfigurationMethodsCanBeChainedOffOfTheEnd() @using (var ff = s.BeginFieldFor(m => m.AnotherField, Field.Configure().FieldConfigurationMethodsCanBeChainedHere()) { @ff.FieldFor(m => m.ChildField) } See the Section documentation to understand how to configure the Field. Navigation A Navigation component will usually be placed at the end of the form (although there is nothing stopping you placing it elsewhere or even multiple times on the form - e.g. top and bottom). The Navigation component allows you to easily create Submit buttons, Reset buttons and normal Buttons. To create a Navigation simply use the <form-navigation> tag helper or the BeginNavigation extension method off of the Form object: Tag Helpers variant HTML Helpers variant <form-navigation> <submit-button label=\"Submit\" /> <reset-button label=\"Reset\" /> <form-button label=\"A button\" /> </form-navigation> @using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\").ChainHtmlAttributesOffOfTheEnd() @n.Reset(\"Reset\").ChainHtmlAttributesOffOfTheEnd() @n.Button(\"A button\").ChainHtmlAttributesOffOfTheEnd() } See the Navigation documentation to understand how to configure the Navigation. Message At any point in the form you can create a Message component - a Message always has a type as well as a Heading and inside of the message you can add any content you like, but ChameleonForms gives you the option of easily specifying Message Paragraph's - the HTML for which is defined in your form template. The message types available are: Action - User action required Success - Action successful Failure - Action failed Information - Informational message Warning - Warning message You can output different HTML in your form template depending on the type of message (e.g. different class or completely different HTML structure). To create a Message simply use the <form-message> tag helper or the BeginMessage extension method off of the Form object: Tag Helpers variant HTML Helpers variant <form-message type=\"Success\" heading=\"Submission successful\"> <message-paragraph>Some sort of success message</message-paragraph> @* Other Paragraph's or any HTML at all really ... *@ </form-message> @using (var m = f.BeginMessage(MessageType.Success, \"Submission successful\")) { @m.Paragraph(\"Some sort of success message\") @* Other Paragraph's or any HTML at all really ... *@ } See the Message documentation to understand how to configure the Message. What terminology is used in ChameleonForms? Some of the terminology around the structure of ChameleonForms forms are defined above, but following is a more comprehensive list of terms that the library uses: Form - The container of a single form Form Component - Some sort of container nested within a Form Heading - A title given to a Form Component (not all Form Components have one though) Message - A message to show the user Message Paragraph - A discrete part of a message to show the user Section - A grouping for a set of Fields Field - A single data collection unit Field Element - The HTML that makes up a control to accept data from the user Field Label - Text that describes a Field Element to a user (and is linked to a Field Element) Field Validation HTML - Markup that acts as a placeholder to display any validation messages for a particular Field Element Field Configuration - The configuration for a particular Field, Field Element and/or Field Label Navigation - A grouping for a set of Navigation elements Navigation Submit - A button that will submit the form Navigation Reset - A button that will reset the form to it's initial state Navigation Button - A button that has a user-defined behaviour Field Generator - A class that generates HTML for a single Field Field Generator Handler - A class that generates HTML for a particular type of Field Element Form Template - A class that defines the HTML boilerplate to render Forms, Form Components, Fields and Navigation elements HTML Attributes - A class that defines a set of HTML attributes to apply to a HTML element"
  },
  "docs/html-attributes.html": {
    "href": "docs/html-attributes.html",
    "title": "HTML Attributes | ChameleonForms",
    "keywords": "HTML Attributes HTML Attributes in ChameleonForms provides the ability to specify a set of HTML attributes in a fluent, expressive way. Specifying HTML Attributes is done by chaining calls to the methods on the HtmlAttributes class or by adding equivalent attributes to one of the supported tag helpers . The HtmlAttributes class looks like this and is in the ChameleonForms namespace: /// <summary> /// Represents a set of HTML attributes. /// </summary> public class HtmlAttributes : IHtmlContent { /// <summary> /// Dictionary of the attributes currently stored in the object. /// </summary> public IDictionary<string, string> Attributes { get { return _tagBuilder.Attributes; } } /// <summary> /// Constructs a <see cref=\"HtmlAttributes\"/> object using lambda methods to express the attributes. /// </summary> /// <example> /// var h = new HtmlAttributes(style => \"width: 100%;\", cellpadding => 0, @class => \"class1 class2\", src => \"http://url/\", data_somedata => \"\\\"rubbi&amp;h\\\"\"); /// </example> /// <param name=\"attributes\">A list of lambas where the lambda variable name is the name of the attribute and the value is the value</param> public HtmlAttributes(params Func<object, object>[] attributes); /// <summary> /// Constructs a <see cref=\"HtmlAttributes\"/> object using a dictionary to express the attributes. /// </summary> /// <example> /// var h = new HtmlAttributes(new Dictionary&lt;string, object&gt; {{\"style\", \"width: 100%;\"}, {\"cellpadding\", 0}, {\"class\", \"class1 class2\"}, {\"src\", \"http://url/\"}, {\"data-somedata\", \"\\\"rubbi&amp;h\\\"\"}}); /// </example> /// <param name=\"attributes\">A dictionary of attributes</param> public HtmlAttributes(IDictionary<string, object> attributes); /// <summary> /// Constructs a <see cref=\"HtmlAttributes\"/> object using a dictionary to express the attributes. /// </summary> /// <example> /// var h = new HtmlAttributes(new Dictionary&lt;string, string&gt; {{\"style\", \"width: 100%;\"}, {\"cellpadding\", \"0\"}, {\"class\", \"class1 class2\"}, {\"src\", \"http://url/\"}, {\"data-somedata\", \"\\\"rubbi&amp;h\\\"\"}}); /// </example> /// <param name=\"attributes\">A dictionary of attributes</param> public HtmlAttributes(IDictionary<string, string> attributes); /// <summary> /// Constructs a <see cref=\"HtmlAttributes\"/> object using an anonymous object to express the attributes. /// </summary> /// <example> /// var h = new HtmlAttributes(new { style = \"width: 100%;\", cellpadding = 0, @class = \"class1 class2\", src = \"http://url/\", data_somedata = \"\\\"rubbi&amp;h\\\"\" }); /// </example> /// <param name=\"attributes\">An anonymous object of attributes</param> public HtmlAttributes(object attributes); /// <summary> /// Adds a CSS class (or a number of CSS classes) to the attributes. /// </summary> /// <param name=\"class\">The CSS class(es) to add</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes AddClass(string @class); /// <summary> /// Set the id attribute. /// </summary> /// <param name=\"id\">The text to use for the id</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Id(string id); /// <summary> /// Sets the disabled attribute. /// </summary> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Disabled(bool disabled = true); /// <summary> /// Sets the readonly attribute. /// </summary> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Readonly(bool @readonly = true); /// <summary> /// Sets the required attribute. /// </summary> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Required(bool required = true); /// <summary> /// Returns whether or not a value is set for the given attribute. /// </summary> /// <param name=\"key\">The name of the HTML attribute to check</param> /// <returns>Whether or not there is a value set for the attribute</returns> public bool Has(string key); /// <summary> /// Adds or updates a HTML attribute with a given value. /// </summary> /// <param name=\"key\">The name of the HTML attribute to add/update</param> /// <param name=\"value\">The value of the HTML attribute to add/update</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attr(string key, object value); /// <summary> /// Adds or updates a HTML attribute with using a lambda method to express the attribute. /// </summary> /// <example> /// h.Attr(style => \"width: 100%;\") /// </example> /// <param name=\"attribute\">A lambda expression representing the attribute to set and its value</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attr(Func<object, object> attribute); /// <summary> /// Adds or updates a set of HTML attributes using lambda methods to express the attributes. /// </summary> /// <param name=\"attributes\">A list of lambas where the lambda variable name is the name of the attribute and the value is the value</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attrs(params Func<object, object>[] attributes); /// <summary> /// Adds or updates a set of HTML attributes using a dictionary to express the attributes. /// </summary> /// <param name=\"attributes\">A dictionary of attributes</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attrs(IDictionary<string, object> attributes); /// <summary> /// Adds or updates a set of HTML attributes using anonymous objects to express the attributes. /// </summary> /// <param name=\"attributes\">An anonymous object of attributes</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attrs(object attributes); /// <summary> /// Adds or updates a set of HTML attributes using a dictionary to express the attributes. /// </summary> /// <param name=\"attributes\">A dictionary of attributes</param> /// <returns>The <see cref=\"HtmlAttributes\"/> attribute to allow for method chaining</returns> public HtmlAttributes Attrs(IDictionary<string, string> attributes); /// <summary> /// Implicitly convert from a dictionary to a new <see cref=\"HtmlAttributes\"/> object. /// </summary> /// <param name=\"attributes\">The dictionary of HTML attributes</param> /// <returns>The new <see cref=\"HtmlAttributes\"/> object</returns> public static implicit operator HtmlAttributes(Dictionary<string, object> attributes); /// <summary> /// Implicitly convert from a dictionary to a new <see cref=\"HtmlAttributes\"/> object. /// </summary> /// <param name=\"attributes\">The dictionary of HTML attributes</param> /// <returns>The new <see cref=\"HtmlAttributes\"/> object</returns> public static implicit operator HtmlAttributes(Dictionary<string, string> attributes); /// <inheritdoc /> public virtual void WriteTo(TextWriter writer, HtmlEncoder encoder); /// <summary> /// Returns the HTML attributes as a dictionary. /// </summary> /// <returns>A dictionary of HTML attributes compatible with the standard ASP.NET MVC method signatures</returns> public IDictionary<string, object> ToDictionary(); } The xmldoc comments above should give a pretty good indication of how each of those methods are meant to be used. The Field Configuration wraps a HTML Attributes object and a lot of these methods also appear on that interface. The HTML Attributes can also be passed into the Form and the Section and can be chained from Navigation Buttons . Default Usage There are a number of choices when using HTML Attributes. Tag Helper attributes Most HTMLAttributes methods map to a tag helper attribute by convention - UpperCamelCase to upper-camel-case (i.e. kebab case). They are all available on the tag helpers that support HTML Attributes : chameleon-form form-section form-button submit-button reset-button HTML Attributes Method Equivalent Tag Helper attribute Id(string id) id=\"{id}\" AddClass(string @class) add-class=\"{class}\" Attr(string key, object value) attr-{key}=\"{value}\" Attr(Func<object, object> attribute) No equivalent Attrs(params Func<object, object>[] attributes) No equivalent Attrs(IDictionary<string, object> attributes) No equivalent Attrs(IDictionary<string, string> attributes) attrs=\"{attributes}\" Attrs(object attributes) No equivalent Disabled(bool disabled = true) disabled=\"{disabled}\" Readonly(bool @readonly = true) No equivalent Required(bool required = true) No equivalent Chaining If you are interacting with a method that returns a HTML Attributes object then you can simply chain method calls, e.g.: Tag Helpers variant HTML Helpers variant <form-navigation> <submit-button fluent-config='c => c.Attr(\"data-something\", \"value\").AddClass(\"a-class\").Id(\"buttonId\")'> </form-navigation> @using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\").Attr(\"data-something\", \"value\").AddClass(\"a-class\").Id(\"buttonId\") } Instantiation You can new up an instance and use one of the four constructors (empty constructor and method chaining, pass in an anonymous object, pass in a dictionary, or use lambda expressions. Instantiation with empty constructor and method chaining You can new up an instance and then chain methods off that instance, e.g.: new HtmlAttributes().AddClass(\"form\").Id(\"someForm\") Instantiation with lambda expressions new HtmlAttributes(@class => \"form\", id => \"someForm\") If you want to output a HTML Attribute that has a - in the name then use a _ in the variable name, e.g.: new HtmlAttributes(data_something => \"value\") Instantiation with anonymous object You can convert an anonymous object to a HTML Attributes object, e.g.: new { @class=\"form\", id=\"someForm\" }.ToHtmlAttributes() If you want to output a HTML Attribute that has a - in the name then use a _ in the property name, e.g.: new {data_something => \"value\"}.ToHtmlAttributes() Instantiation with dictionary You can convert a dictionary to a HTML Attributes object, e.g.: new Dictionary<string, object>{ {\"class\", \"form\"}, {\"id\", \"someForm\"} }.ToHtmlAttributes() new Dictionary<string, string>{ {\"class\", \"form\"}, {\"id\", \"someForm\"} }.ToHtmlAttributes() Outputting HTML Attributes There are a number of options when using a HTML Attributes object. Use the attributes in a tag builder You can use the HTML Attributes object with the TagBuilder class in MVC, e.g.: var h = new HtmlAttributes().Id(\"id\"); var t = new TagBuilder(\"p\"); t.MergeAttributes(h.Attributes); Output directly to the page You may notice that the HTMLAttributes definition above extends IHtmlContent . As you might expect, this means you can directly output it to the page, e.g. @{ var h = new HtmlAttributes().Id(\"id\"); } <p @h>Text</p> It will automatically handle encoding attribute values to prevent HTML injection. Use the attributes as a dictionary When you need ultimate flexibility then you can get the attributes out as a dictionary, e.g.: var h = new HtmlAttributes().Id(\"id\"); var d1 = h.Attributes; // Dictionary<string, string> var d2 = h.ToDictionary(); // Dictionary<string, object>, many MVC methods take this type Retrieve the attributes as an encoded string If you need to retrive the attribute values as a string (already encoded), then you can use the .ToHtmlString() extension method. var h = new HtmlAttributes().Id(\"id&1\"); string s = h.ToHtmlString(); // \"id=\\\"id&amp;1\\\"\" Extending HTML Attributes You can easily create your own methods on HTML Attributes by creating an extension method, e.g.: public static HtmlAttributesExtensions { public static HtmlAttributes Coordinate(this HtmlAttributes attrs, Coordinate c) { return attrs.Attr(data_coordinate => JsonConvert.Serialize(c)); } } Then you could do something like this: @using (var n = f.BeginNavigation()) { @n.Button(Model.Coordinate1.ToString()).Coordinate(Model.Coordinate1) @n.Button(Model.Coordinate2.ToString()).Coordinate(Model.Coordinate2) @n.Button(Model.Coordinate3.ToString()).Coordinate(Model.Coordinate2) } Extending Navigation Buttons specifically Navigation Buttons return a sub-class of HtmlAttributes called ButtonHtmlAttributes . This allows you to target extension methods specifically for buttons, which must then be invoked first before any of the methods targeting the more general HtmlAttributes . As an example consider the following extension method in the Twitter Bootstrap 3 template to add a size to the button: /// <summary> /// Changes the button to use the given size. /// </summary> /// <example> /// @n.Submit(\"Submit\").WithSize(ButtonSize.Large) /// </example> /// <param name=\"attrs\">The Html Attributes from a navigation button</param> /// <param name=\"size\">The size of button</param> /// <returns>The Html Attribute object so other methods can be chained off of it</returns> public static ButtonHtmlAttributes WithSize(this ButtonHtmlAttributes attrs, ButtonSize size) { if (size != ButtonSize.Default) attrs.AddClass(string.Format(\"btn-{0}\", size.Humanize())); return attrs; } If you want to consume these extension methods on a button based tag helper you have two options: Use the fluent-attrs attribute e.g. <submit-button label=\"Submit\" fluent-attrs='a => a.WithSize(ButtonSize.Large).WithStyle(EmphasisStyle.Info).WithIcon(\"calendar\")' /> Use a tag helper that adds the attributes before the main tag helper gets processed, such as the Bootstrap 3 ButtonTagHelper e.g. <submit-button label=\"Submit\" size=\"Large\" emphasis-style=\"Info\" icon=\"calendar\" /> Create methods that chain HTML Attributes Returning a HTML Attributes object from a method so that the user can chain attribute methods off it before outputting it in a view (like the Navigation Buttons ) can be tricky by default, so ChameleonForms provides a special way to handle this situation. If the HTML that you are outputting relies on the HTML Attributes to be defined, then you don't want to generate it until after the final chaining call is made. Luckily, you know when the final call is made because MVC will call the ToHtmlString method for you (since HtmlAttributes overrides the IHtmlContent interface). The only remaining problem is that you don't have control over the code in ToHtmlString since it's inside ChameleonForms, and in fact the ToHtmlString method returns the HTML for the attributes by default as shown above. The class you need to use in this case is LazyHtmlAttributes , which is in the ChameleonForms namespace. If you new up one of those and return it (but make the method return type HtmlAttributes then you have the ability to define what HTML is output when the Write method is called, but still allow HtmlAttributes method chaining until that happens. Simple example If you created the following extension method on the HTML Helper: public static class HtmlExtensions { public static HtmlAttributes Paragraph(this HtmlHelper h, string paragraphText) { return new LazyHtmlAttributes(a => { var t = new TagBuilder(\"p\"); t.SetInnerText(paragraphText); t.MergeAttributes(a.Attributes); return t; } ); } } In this example, the lambda expression passed into the constructor is called when the eventual call to Write on the HtmlAttributes object returned from Paragraph is called. You can see at that point in time we can safely use the Attributes property since we know all of the method chaining will be finished at that point in time. In this case, if you put the following in your razor view: @Html.Paragraph(\"Display some text\").Id(\"paragraphId\").AddClass(\"a-class\").Attr(data_some_data => \"{mydata:true}\") It would output the following HTML: <p class=\"a-class\" data-some-data=\"{mydata:true}\" id=\"paragraphId\">Display some text</p> Magic!"
  },
  "docs/html-helper-context.html": {
    "href": "docs/html-helper-context.html",
    "title": "Change the model type for HTML Helper for portions of your page | ChameleonForms",
    "keywords": "Change the model type for HTML Helper for portions of your page Note: This documentation only applies to HTML Helpers syntax and not Tag Helpers. Tag Helpers don't allow you to change a model within a page, instead you need to use <partial model=\"model\" name=\"_PartialName\" /> or <partial for=\"ChildProperty\" name=\"_PartialName\" /> to change the model type in a view. See Partials for more information. Sometimes it's useful to include multiple forms in a page or use other HTML Helper functionality against a different model type than the parent model of the page. This different model type might be a completely arbitrary model unrelated to the page model type or it may be a sub-property of the parent model. Consider this example: @model LoginViewModel <h1>Login</h1> @using (Html.BeginForm()) { <p>@Html.LabelFor(m => m.Username) @Html.TextBoxFor(m => m.Username) @Html.ValidationMessageFor(m => m.Username)</p> <p>@Html.LabelFor(m => m.Password) @Html.PasswordFor(m => m.Password) @Html.ValidationMessageFor(m => m.Password)</p> <p><button type=\"submit\">Login</button></p> } <h2>Don't have an account?</h2> <p>You can easily create a new account in seconds - just start by selecting a username below.</p> @using (Html.BeginForm(\"Step1\", \"Signup\") { <p><input type=\"text\" name=\"Username\" placeholder=\"Enter your preferred username\"></p> <p><button type=\"submit\">Begin signup - check if my username is available &raquo;</button></p> } In the above example the second form actually submits to a different controller and action using a completely different and unrelated view model to the page view model ( LoginViewModel ). In the above example the field name of the field ( Username ) was hardcoded - if that doesn't match up to the property name in the view model that is in SignupController.Step1() then it won't be bound and there will be a runtime error. It's impossible to use the view model type to get type safety without dirtying up the LoginViewModel to include it and worse still that would requie you to bind to the LoginViewModel in the SignupController (even though it has nothing to do with logging in) since the binding names wouldn't match otherwise. Another example - if you decide to make all form fields part of an \"input model\": @model SomeViewModel <h1>Creating new xyz against @Model.Title</h1> @using (Html.BeginForm()) { <p>@Html.LabelFor(m => m.InputModel.Property1) @Html.TextBoxFor(m => m.InputModel.Property1) @Html.ValidationMessageFor(m => m.InputModel.Property1)</p> <p>@Html.LabelFor(m => m.InputModel.Property2) @Html.TextBoxFor(m => m.InputModel.Property2) @Html.ValidationMessageFor(m => m.InputModel.Property2)</p> <p>@Html.LabelFor(m => m.InputModel.Property3) @Html.TextBoxFor(m => m.InputModel.Property3) @Html.ValidationMessageFor(m => m.InputModel.Property3)</p> <p>@Html.LabelFor(m => m.InputModel.Property4) @Html.TextBoxFor(m => m.InputModel.Property4) @Html.ValidationMessageFor(m => m.InputModel.Property4)</p> <p>@Html.LabelFor(m => m.InputModel.Property5) @Html.TextBoxFor(m => m.InputModel.Property5) @Html.ValidationMessageFor(m => m.InputModel.Property5)</p> <p><button type=\"submit\">Submit</button></p> } There are two problems here - firstly, the .InputModel. is very repetitive and adds a lot of noise and secondly, the post action forces you to bind to the SomeViewModel model type, which means technically, you need to remember to mark Title and other read-only values with the [ReadOnly(true)] attribute to prevent an over-posting / mass-assignment vulnerability . It would be much simpler if you could specify that the form is against the InputModel sub-property of the main form and bind just the InputModel on the round-trip back to the server. HtmlHelper .For extensions ChameleonForms gives you two extension methods on the HtmlHelper<TModel> class that allow you to solve the above problems in a clean way: /// <summary> /// Creates a HTML helper from a parent model to use a sub-property as it's model. /// </summary> /// <typeparam name=\"TParentModel\">The model of the parent type</typeparam> /// <typeparam name=\"TChildModel\">The model of the sub-property to use</typeparam> /// <param name=\"helper\">The parent HTML helper</param> /// <param name=\"propertyFor\">The sub-property to use</param> /// <param name=\"bindFieldsToParent\">Whether to set field names to bind to the parent model type (true) or the sub-property type (false)</param> /// <returns>A HTML helper against the sub-property</returns> public static DisposableHtmlHelper<TChildModel> For<TParentModel, TChildModel>(this HtmlHelper<TParentModel> helper, Expression<Func<TParentModel, TChildModel>> propertyFor, bool bindFieldsToParent) /// <summary> /// Creates a HTML helper based on another HTML helper against a different model type. /// </summary> /// <typeparam name=\"TModel\">The model type to create a helper for</typeparam> /// <param name=\"htmlHelper\">The original HTML helper</param> /// <param name=\"model\">An instance of the model type to use as the model</param> /// <param name=\"htmlFieldPrefix\">A prefix value to use for field names</param> /// <returns>The HTML helper against the other model type</returns> public static DisposableHtmlHelper<TModel> For<TModel>(this HtmlHelper htmlHelper, TModel model = default(TModel), string htmlFieldPrefix = null) The first one allows you express an expression to identify a sub-property of the parent model of the page to create a new HTML helper against. The second allows you to specify an arbitrary type to create a new HTML helperfor (with optional instance to use as the model). The former allows you to control whether you want any form fields to bind back to the parent view model or directly to the child and the second allows you to add a prefix that will be used for binding names for fields. You'll notice the return type is DisposableHtmlHelper<TModel> rather than HtmlHelper<TModel> - this class is a wrapper around HtmlHelper<TModel> that also implements IDisposable (the Dispose() method that is introduced does nothing) as a convenience so you can create a HTML helper around a section of your page for readability reasons. Examples The previous two examples on this page could be re-written using the extension methods to become: @model LoginViewModel <h1>Login</h1> @using (Html.BeginForm()) { <p>@Html.LabelFor(m => m.Username) @Html.TextBoxFor(m => m.Username) @Html.ValidationMessageFor(m => m.Username)</p> <p>@Html.LabelFor(m => m.Password) @Html.PasswordFor(m => m.Password) @Html.ValidationMessageFor(m => m.Password)</p> <p><button type=\"submit\">Login</button></p> } <h2>Don't have an account?</h2> <p>You can easily create a new account in seconds - just start by selecting a username below.</p> @using (var signupHtml = Html.For<SignupStep1ViewModel>()) { @using (signupHtml.BeginForm(\"Step1\", \"Signup\") { <p>@signupHtml.TextBoxFor(m => m.Username, new {placeholder = \"Enter your preferred username\"})</p> <p><button type=\"submit\">Begin signup - check if my username is available &raquo;</button></p> } } and: @model SomeViewModel <h1>Creating new xyz against @Model.Title</h1> @using (var html = Html.For(m => m.InputModel, bindToParent: false)) { @using (html.BeginForm()) { <p>@html.LabelFor(m => m.Property1) @html.TextBoxFor(m => m.Property1) @html.ValidationMessageFor(m => m.Property1)</p> <p>@html.LabelFor(m => m.Property2) @html.TextBoxFor(m => m.Property2) @html.ValidationMessageFor(m => m.Property2)</p> <p>@html.LabelFor(m => m.Property3) @html.TextBoxFor(m => m.Property3) @html.ValidationMessageFor(m => m.Property3)</p> <p>@html.LabelFor(m => m.Property4) @html.TextBoxFor(m => m.Property4) @html.ValidationMessageFor(m => m.Property4)</p> <p>@html.LabelFor(m => m.Property5) @html.TextBoxFor(m => m.Property5) @html.ValidationMessageFor(m => m.Property5)</p> <p><button type=\"submit\">Submit</button></p> } } In the second example you would change the controller action to take the type of SomeViewModel.InputModel rather than SomeViewModel . Html helper properties There are a few things to note about the HTML helper that is created: The request context, route collection and writer are all the same as the original HTML helper The HTML prefix will be the same as the original HTML helper (plus any given prefix, or the sub property if binding a sub-property to the parent) View data / view bag will be a copy of the original HTML helper at the time of calling the For extension method - any changes made to it will not propogate between the two helpers ChameleonForms forms ChameleonForms uses these extensions internally to allow you to create a form against an model type different from the page model ."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "ChameleonForms Documentation | ChameleonForms",
    "keywords": "ChameleonForms Documentation Overview ChameleonForms takes away the pain and repetition of building forms with ASP.NET Core MVC by following a philosophy of: Model-driven defaults - Spend less time with tedious reptition by letting your view models do the hard work for you. (e.g. enum is drop-down or radio list, collection/array of enums is a multi-select drop-down or checkbox list, [DataType(DataType.Password)] is password textbox, int is a number textbox with a step of 1 , etc.). Extend the best of ASP.NET Core MVC - makes use of HTML generation, client validation and model binding, but makes them work the way you'd expect in more scenarios so you spend more time pumping out business value and less time fighting and patching gaps in MVC. DRY up your forms - your forms will be quicker to write and easier to maintain and you won't get stuck writing the same form boilerplate markup form after form after form. Consistent - consistency of the (ChameleonForms) API and form structure within your forms and consistency across all forms in your site via templating. This will make your forms easier to maintain and have a better user experience. Declarative syntax - specify how the form is structured rather than worrying about the boilerplate HTML markup of the form. Beautiful, terse, fluent APIs - it's a pleasure to read and write the code. Extensible and flexible core - you can extend or completely change anything you want at any layer of ChameleonForms and you can drop out to plain HTML at any point in your form for those moments where pre-prepared field types and templates just don't cut it. It's ideally suited for situations where you want to quickly build forms that are highly consistent and maintainable. If you are trying to build highly specialised forms that are individually, painstakingly crafted then that's not what this library is for. That's where it makes sense to break out your JavaScript library of choice. Example in detail So, what does a ChameleonForms form look like? Check out the basic signup form example below. View model Razor view Controller Default result Bootstrap result Summary public class SignupViewModel { [Required] public string FirstName { get; set; } [Required] public string LastName { get; set; } [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] public DateTime DateOfBirth { get; set; } [Required] [EmailAddress] public string EmailAddress { get; set; } [Required] [DataType(DataType.Password)] public string Password { get; set; } public MembershipType MembershipType { get; set; } [Url] public Uri Homepage { get; set; } [DataType(DataType.MultilineText)] public string Bio { get; set; } [Required] public bool TermsAndConditions { get; set; } } public enum MembershipType { Standard, Bonze, Silver, Gold, Platinum } You have two options for your view - tag helper syntax or the more traditional HTML helper syntax . Tag helpers variant @model SignupViewModel <h1>Account signup</h1> <chameleon-form attr-id=\"signup-form\"> <form-message type=\"Information\" heading=\"Signup for an account\"> <message-paragraph>Please fill in your information below to signup for an account.</message-paragraph> </form-message> <form-section heading=\"Your details\"> <field for=\"FirstName\" /> <field for=\"LastName\" /> <field for=\"DateOfBirth\" hint=\"DD/MM/YYYY\" /> </form-section> <form-section heading=\"Account details\"> <field for=\"EmailAddress\" hint=\"An email will be sent to this address to confirm you own it\" /> <field for=\"Password\" /> <field for=\"MembershipType\" /> </form-section> <form-section heading=\"Additional details\"> <field for=\"Bio\" /> <field for=\"Homepage\" placeholder=\"https://\" /> </form-section> <form-message type=\"Action\" heading=\"Confirm the Terms & Conditions\"> <message-paragraph>Please <a href=\"#\">read the terms and conditions</a></message-paragraph> <field-element for=\"TermsAndConditions\" inline-label=\"I agree to the terms and conditions\" /> </form-message> <form-navigation> <submit-button label=\"Signup\" emphasis-style=\"Primary\" /> </form-navigation> </chameleon-form> HTML Helpers variant @model SignupViewModel <h1>Account signup</h1> @using (var f = Html.BeginChameleonForm(htmlAttributes: Html.Attrs().Id(\"signup-form\"))) { using (var m = f.BeginMessage(MessageType.Information, \"Signup for an account\")) { @m.Paragraph(\"Please fill in your information below to signup for an account.\") } using (var s = f.BeginSection(\"Your details\")) { @s.FieldFor(m => m.FirstName) @s.FieldFor(m => m.LastName) @s.FieldFor(m => m.DateOfBirth).WithHint(\"DD/MM/YYYY\") } using (var s = f.BeginSection(\"Account details\")) { @s.FieldFor(m => m.EmailAddress).WithHint(\"An email will be sent to this address to confirm you own it\") @s.FieldFor(m => m.Password) @s.FieldFor(m => m.MembershipType) } using (var s = f.BeginSection(\"Additional details\")) { @s.FieldFor(m => m.Bio).Rows(2).Cols(60) @s.FieldFor(m => m.Homepage).Placeholder(\"https://\") } using (var m = f.BeginMessage(MessageType.Action, \"Confirm the Terms & Conditions\")) { @m.Paragraph(@<text>Please <a href=\"/terms\">read the terms and conditions</a></text>) @f.FieldElementFor(mm => mm.TermsAndConditions).InlineLabel(\"I agree to the terms and conditions\") } using (var n = f.BeginNavigation()) { @n.Submit(\"Signup\") } } public class SignupController : Controller { public ActionResult Index() { return View(); } [HttpPost] public ActionResult Index(SignupViewModel vm) { if (!ModelState.IsValid) return View(vm) // Create account... return RedirectToAction(\"Index\", \"AccountHome\"); } } Here's what the rendered form looks like (using the default form template with some light CSS applied ): Here's what the HTML looks like (using the default form template, which you can change): <h1>Account signup</h1> <form action=\"\" id=\"signup-form\" method=\"post\" novalidate=\"novalidate\"> <div class=\"information_message\"> <h3>Signup for an account</h3> <div class=\"message\"> <p> Please fill in your information below to signup for an account. </p> </div> </div> <fieldset> <legend>Your details</legend> <dl> <dt><label for=\"FirstName\">First name</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The First name field is required.\" id=\"FirstName\" name=\"FirstName\" required=\"required\" type=\"text\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"FirstName\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"LastName\">Last name</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The Last name field is required.\" id=\"LastName\" name=\"LastName\" required=\"required\" type=\"text\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"LastName\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"DateOfBirth\">Date of birth</label> <em class=\"required\">*</em></dt> <dd> <input aria-describedby=\"DateOfBirth--Hint\" data-val=\"true\" data-val-date=\"The field Date of birth must be a date with format d/M/yyyy.\" data-val-format=\"d/M/yyyy\" data-val-required=\"The Date of birth field is required.\" id=\"DateOfBirth\" name=\"DateOfBirth\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> <span class=\"field-validation-valid\" data-valmsg-for=\"DateOfBirth\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <fieldset> <legend>Account details</legend> <dl> <dt><label for=\"EmailAddress\">Email address</label> <em class=\"required\">*</em></dt> <dd> <input aria-describedby=\"EmailAddress--Hint\" data-val=\"true\" data-val-required=\"The Email address field is required.\" id=\"EmailAddress\" name=\"EmailAddress\" required=\"required\" type=\"email\" value=\"\" /> <div class=\"hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> <span class=\"field-validation-valid\" data-valmsg-for=\"EmailAddress\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"Password\">Password</label> <em class=\"required\">*</em></dt> <dd> <input data-val=\"true\" data-val-required=\"The Password field is required.\" id=\"Password\" name=\"Password\" required=\"required\" type=\"password\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"Password\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"MembershipType\">Membership type</label> <em class=\"required\">*</em></dt> <dd> <select data-val=\"true\" data-val-required=\"The Membership type field is required.\" id=\"MembershipType\" name=\"MembershipType\" required=\"required\"> <option selected=\"selected\" value=\"Standard\">Standard</option> <option value=\"Bonze\">Bonze</option> <option value=\"Silver\">Silver</option> <option value=\"Gold\">Gold</option> <option value=\"Platinum\">Platinum</option> </select> <span class=\"field-validation-valid\" data-valmsg-for=\"MembershipType\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <fieldset> <legend>Additional details</legend> <dl> <dt><label for=\"Bio\">Bio</label></dt> <dd> <textarea cols=\"60\" id=\"Bio\" name=\"Bio\" rows=\"2\"> </textarea> <span class=\"field-validation-valid\" data-valmsg-for=\"Bio\" data-valmsg-replace=\"true\"></span> </dd> <dt><label for=\"Homepage\">Homepage</label></dt> <dd> <input id=\"Homepage\" name=\"Homepage\" placeholder=\"http://\" type=\"url\" value=\"\" /> <span class=\"field-validation-valid\" data-valmsg-for=\"Homepage\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> <div class=\"action_message\"> <h3>Confirm the Terms & Conditions</h3> <div class=\"message\"> <p> Please <a href=\"#\">read the terms and conditions</a> </p> <input data-val=\"true\" data-val-required=\"The Terms and conditions field is required.\" id=\"TermsAndConditions\" name=\"TermsAndConditions\" required=\"required\" type=\"checkbox\" value=\"true\" /> <label for=\"TermsAndConditions\">I agree to the terms and conditions</label> </div> </div> <div class=\"form_navigation\"> <button type=\"submit\">Signup</button> </div> </form> The exact same code (view model, view, controller)) can be transformed into a different visual result such as using Bootstrap by changing one line (the template) in your Startup.cs file: public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms<TwitterBootstrap3FormTemplate>(); } By changing the form to the Bootstrap template it will now look like this: And the HTML output will be: <h1>Account signup</h1> <form action=\"\" enctype=\"application/x-www-form-urlencoded\" id=\"signup-form\" method=\"post\" novalidate=\"novalidate\"> <div class=\"panel panel-info\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">Signup for an account</h4> </div> <div class=\"panel-body\"> <p> Please fill in your information below to signup for an account. </p> </div> </div> <fieldset> <legend>Your details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"FirstName\">First name</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The First name field is required.\" id=\"FirstName\" name=\"FirstName\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"FirstName\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"LastName\">Last name</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The Last name field is required.\" id=\"LastName\" name=\"LastName\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"LastName\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"DateOfBirth\">Date of birth</label> <div class=\"input-group\"> <input aria-describedby=\"DateOfBirth--Hint\" class=\"form-control\" data-val=\"true\" data-val-date=\"The field Date of birth must be a date with format d/M/yyyy.\" data-val-format=\"d/M/yyyy\" data-val-required=\"The Date of birth field is required.\" id=\"DateOfBirth\" name=\"DateOfBirth\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <div class=\"help-block form-hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"DateOfBirth\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <fieldset> <legend>Account details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"EmailAddress\">Email address</label> <div class=\"input-group\"> <input aria-describedby=\"EmailAddress--Hint\" class=\"form-control\" data-val=\"true\" data-val-email=\"The Email address field is not a valid e-mail address.\" data-val-required=\"The Email address field is required.\" id=\"EmailAddress\" name=\"EmailAddress\" required=\"required\" type=\"email\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <div class=\"help-block form-hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"EmailAddress\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"Password\">Password</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The Password field is required.\" id=\"Password\" name=\"Password\" required=\"required\" type=\"password\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Password\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"MembershipType\">Membership type</label> <div class=\"input-group\"> <select class=\"form-control\" data-val=\"true\" data-val-required=\"The Membership type field is required.\" id=\"MembershipType\" name=\"MembershipType\" required=\"required\"> <option selected=\"selected\" value=\"Standard\">Standard</option> <option value=\"Bonze\">Bonze</option> <option value=\"Silver\">Silver</option> <option value=\"Gold\">Gold</option> <option value=\"Platinum\">Platinum</option> </select> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"MembershipType\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <fieldset> <legend>Additional details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"Bio\">Bio</label> <textarea class=\"form-control\" cols=\"20\" id=\"Bio\" name=\"Bio\" rows=\"2\"></textarea> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Bio\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"Homepage\">Homepage</label> <input class=\"form-control\" id=\"Homepage\" name=\"Homepage\" placeholder=\"http://\" type=\"url\" value=\"\" /> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Homepage\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <div class=\"panel panel-primary\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">Confirm the Terms &amp; Conditions</h4> </div> <div class=\"panel-body\"> <p> Please <a href=\"#\">read the terms and conditions</a> </p> <input data-val=\"true\" data-val-required=\"The Terms and conditions field is required.\" id=\"TermsAndConditions\" name=\"TermsAndConditions\" required=\"required\" type=\"checkbox\" value=\"true\" /> <label for=\"TermsAndConditions\">I agree to the terms and conditions</label> </div> </div> <div class=\"btn-group\"> <button class=\"btn btn-primary\" type=\"submit\">Signup</button> </div> </form> Key things to note that ChameleonForms has automatically done (with default configuration): HTML5 validation turned off (instead unobtrusive validation provides a better exerience) The form performs a POST to the current URL (i.e. self-submitting form) Fields are grouped into sections with fieldsets All boilerplate HTML surrounding a field, its label (with correct for ), its hint (if any) and its validation message is added for you just by specifying the view model property - this means: You can switch a form template once globally and all forms will automatically change You can be confident all fields have labels, validation HTML etc. that are correctly hooked up and you haven't misspelt any IDs etc. Similarly, you can be sure that all fields will definitely bind to the view model when posted back to the server The form is much quicker to write and read since it's way terser The correct field types have automatically been inferred, including HTML5 field types where they are useful (e.g. not for dates since you have no control over date format): string -> <input type=\"text\"> [EmailAddress] -> <input type=\"email\"> [DataType(DataType.Password)] -> <input type=\"password\"> MembershipType (enum) -> <select> (Can easily be made a radio list with .AsRadioList() ) [Url] -> <input type=\"url\"> [DataType(DataType.MultilineText)] -> <textarea> bool -> <input type=\"checkbox\"> Required fields (either with [Required] or via a non-nullable value type) automatically have data-val-required , required=\"required\" and visual required designators added to them Labels are automatically human readable e.g. public string FirstName { get; set; } became First name without us having to specify that Client-side validation and server-side validation has been added for the DateTime that is Format-aware (based on [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] ) Hints are automatically attached to their field for screen readers via the aria-describedby attribute One-line change to switch to Bootstrap (or any other template you define) Documentation Philosophy Why is ChameleonForms needed - A rant about building forms and how ChameleonForms removes a lot of the pain We expect that you know how to use ASP.NET Core MVC's form generation, model-binding and validation support to be able to effectively use and understand this library. If you need a hand getting started with that knowledge then check out the following: Understanding HTML Helpers in ASP.NET MVC (out of date since it's targetting pre-.NET Core, but the concepts still apply in ASP.NET Core), tag helpers , model binding , validation / validation . Basic usage Getting started - How do I get up and running with ChameleonForms? What does ChameleonForms do for me? How are ChameleonForms forms structured? What terminology is used in ChameleonForms? Configuring ChameleonForms - How do I configure ChameleonForms? Comparison - See an example of a ChameleonForms form versus an out-of-the-box ASp.NET MVC form (HTML Helpers, Editor Templates and (coming soon) Tag Helpers) Changing to Twitter Bootstrap 3 template - Changing from the default template to the Twitter Bootstrap template (Bootstrap 4 support coming soon) Control labels - Control how label text appears in your forms Field Configuration - An overview of the common options available to configure a form field via the IFieldConfiguration interface HTML Attributes - An overview of how to define HTML attributes using the HtmlAttributes class Change the model type for portions of your page Create a form against a model type different from the page model Use partial views for repeated or abstracted form areas Form structure Examples for generating a form and each type of default component within the form. The following pages show both the ChameleonForms syntax, as well as the default generated HTML (which you can easily override to suit your own needs). Form - How to output and configure the containing form Message - How to output and configure a message Section - How to output and configure a form section Navigation - How to output and configure a form navigation area and add buttons to it Field - How to output and configure templated fields Field Element - How to output the HTML for a field Field Label - How to output and configure field labels Field Validation HTML - How to output validation messages for a field Field types Boolean fields - Display booleans as a single checkbox, a select-list or a list of radio checkboxes DateTime fields - Display DateTimes as a text box including model binding and client-side validation that respects [DisplayFormat] Client-side validation of DateTime fields - How to use jquery.validate.unobtrusive.chameleon.js Enum fields - Display enums as drop-downs or a list of radio buttons Flags enum fields - Display flags enums as multi-select drop-downs or a list of checkboxes Multiple-select enum fields - Display enums as multi-select drop-downs or a list of checkboxes List fields - Display drop-downs or lists of radio buttons to allow users to select an item from a list Multiple-select list fields - Display multi-select drop-downs or lists of checkboxes to allow users to select multiple items from a list Textarea fields - Display textarea fields File upload fields - Display file-upload fields Password fields - Display password fields Number fields - Display number fields Email fields - Display email fields Uri fields - Display URI fields Default ( <input type=\"text\" /> ) fields Advanced usage Using different form templates Creating custom form templates Extending the field configuration Extending the form components Creating and using a custom field generator Creating and using custom field generator handlers Contributing If you would like to contribute to this project then feel free to communicate with us via Twitter @robdmoore / @mdaviesnet or alternatively send a pull request / issue to the GitHub project . Support If you need to raise an issue or check for an existing issue, see https://github.com/MRCollective/ChameleonForms/issues . Roadmap Some ideas for the library in the future are: Ability to opt-in to switch on HTML5 validation and switch off client validation Bootstrap 4 and Material UI support Blazor, Razor Pages and Carter support Support IList<nullable<value type>> (doesn't bind well in ASP.NET Core MVC - needs to be patched) Support localisation Improve configurability"
  },
  "docs/labels.html": {
    "href": "docs/labels.html",
    "title": "Controlling labels | ChameleonForms",
    "keywords": "Controlling labels By default ASP.NET Core MVC will use the property name that you specify in your model as the label when using @Html.LabelFor(m => m.MyField) <label asp-for=\"MyField\"></label> This is great when you have property names like Email and Name , but doesn't work so great when you have multiple word property names like EmailAddress and FirstName . Of course, MVC provides the ability to override the label for each model using attributes, e.g.: [DisplayName(\"Email address\")] public string EmailAddress { get; set; } [Display(Name = \"First name\")] public string FirstName { get; set; } If you have a convention across all of your forms to use sentence case, like the above example, then it makes sense to automatically translate the camel casing of your property names to your desired label text by convention without having to specify redundant DisplayName attributes everywhere (adding noise and maintenance overhead). ChameleonForms provides this functionality to you by default . By default your label names will be \"Sentence cased\" (similar to the above example of EmailAddress and FirstName). You can configure different options for label name transformation using: services.AddChameleonForms(b => b.WithHumanizedLabelTransformer(Transform.UpperCase)); // or ... services.AddChameleonForms(b => b.WithHumanizedLabelTransformer(Transform.LowerCase)); // or ... services.AddChameleonForms(b => b.WithHumanizedLabelTransformer(Transform.TitleCase)); // or ... services.AddChameleonForms(b => b.WithHumanizedLabelTransformer(/* Custom class that inherits from Humanizer.IStringTransformer */)); You can also disable it using: services.AddChameleonForms(b => b.WithoutHumanizedLabels()); If you want more flexibility to change the label of properties where the text can't be done by convention (e.g. LicenseAgreementAcceptance becoming I accept the license agreement ) then you can still use the [DisplayName] or [Display] attribute on those properties and that will always be used in preference."
  },
  "docs/list.html": {
    "href": "docs/list.html",
    "title": "List Fields | ChameleonForms",
    "keywords": "List Fields If you want the user to specify an item from an arbitrary list of objects you can use the [ExistsIn] attribute against a model property. The property just needs to be the same type as the property of the list element type that represents the \"value\" of the object, e.g.: public class MyObject { public string Name { get; set; } public int Id { get; set; } // This is the \"value\" of the object } public class MyViewModel { public MyViewModel() { ListValues = new List<MyObject> { new MyObject { Id = 1, Name = \"First item\" }, new MyObject { Id = 2, Name = \"Second item\" }, }; } ... public List<MyObject> ListValues { get; set; } [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public int ListId { get; set; } // Same type as Id [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public int? NullableListId { get; set; } // You can specify the same type with the Nullable modifier to indicate it's optional } The ExistsIn attribute looks like this: /// <summary> /// Indicates that the attributed property value should exist within the list property referenced by the attribute. /// </summary> [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)] public class ExistsInAttribute : ValidationAttribute, IModelMetadataAware { /// <summary> /// Application-wide configuration for whether or not to enable ExistsIn validation. /// </summary> public static bool EnableValidation = true; /// <summary> /// Instantiates an <see cref=\"ExistsInAttribute\"/>. /// </summary> /// <param name=\"listProperty\">The name of the property containing the list this property should reference.</param> /// <param name=\"valueProperty\">The name of the property of the list items to use for the value</param> /// <param name=\"nameProperty\">The name of the property of the list items to use for the name/label</param> public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty); /// <summary> /// Instantiates an <see cref=\"ExistsInAttribute\"/>. /// </summary> /// <param name=\"listProperty\">The name of the property containing the list this property should reference.</param> /// <param name=\"valueProperty\">The name of the property of the list items to use for the value</param> /// <param name=\"nameProperty\">The name of the property of the list items to use for the name/label</param> /// <param name=\"enableValidation\">Optional override for ExistsIn server-side validation configuration (if not specified, static configuration setting ExistsInAttribute.EnableValidation is used)</param> public ExistsInAttribute(string listProperty, string valueProperty, string nameProperty, bool enableValidation); } Default HTML Non-nullable list id (drop-down with no empty option) When using the Default Field Generator then the default HTML of the Field Element for a non-nullable list id will be: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> %foreach item x in Model.{ListProperty}% <option value=\"%x.{ValueProperty}%\">%x.{NameProperty}%</option> %endforeach% </select> If the list id is non-nullable then the field will be Required regardless of whether you specified the [Required] attribute. So in the above example when outputting the Field Element HTML for the ListId property it would have (assuming you didn't specify any additional HTML attributes): <select data-val=\"true\" data-val-number=\"The field List id must be a number.\" data-val-required=\"The List id field is required.\" id=\"ListId\" name=\"ListId\" required=\"required\"> <option value=\"1\">First item</option> <option value=\"2\">Second item</option> </select> Nullable list id (drop-down with empty option) When using the Default Field Generator then the default HTML of the Field Element for a nullable list id will be: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">%noneDescription%</option> %foreach item x in Model.{ListProperty}% <option value=\"%x.{ValueProperty}%\">%x.{NameProperty}%</option> %endforeach% </select> So in the above example when outputting the Field Element HTML for the ListId property it would have (assuming you didn't specify any additional HTML attributes): <select data-val=\"true\" data-val-number=\"The field List id must be a number.\" id=\"ListId\" name=\"ListId\"> <option selected=\"selected\" value=\"\"></option> <option value=\"1\">First item</option> <option value=\"2\">Second item</option> </select> Server-side validation If you want to provide server-side validation protection of the value the user submitted then the [ExistsIn] attribute will automatically take care of this for you by default. If you don't want to perform server-side validation then you can either: Turn off Exists In validation globally by setting the appropriate setting in your Application_Start function (or a method it calls) within Global.asax.cs : ExistsInAttribute.EnableValidation = false; Turn off validation on a per-usage basis by setting false to the enableValidation value when adding the attribute, e.g.: [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name), enableValidation: false)] public int ListId { get; set; } If you turn off validation globally, but want to enable it for a specific usage then you can pass true to the enableValidation attribute - any value specified for it will override the global default. If you want to take advantage of the server-side validation then the list needs to be populated when the DefaultModelBinder binds the property with the [ExistsIn] attribute specified. If the list is null at that point and validation is enabled then an exception will be thrown. If you want to specify the list at the right time then you have two options: Define the list in the model constructor (like the above example) Create a custom model binder for your model type that creates the list first This allows you to populate the list using a database by dependency injecting your database access component into the model binder This also allows you to easily unit test the model binder For example: public class InvoiceSelectionViewModel { [ReadOnly(true)] public IList<Invoice> Invoices { get; set; } [ExistsIn(nameof(Invoices), nameof(Invoices.Id), nameof(Invoices.InvoiceNumber))] public int InvoiceId { get; set; } } public class Startup { ... public void ConfigureServices(IServiceCollection services) { ... services.AddMvc(options => { ... options.ModelBinderProviders.Insert(0, new InvoiceSelectionViewModelBinderProvider()); }); } } public class InvoiceSelectionViewModelBinderProvider : IModelBinderProvider { public IModelBinder GetBinder(ModelBinderProviderContext context) { if (context.Metadata.ModelType == typeof(InvoiceSelectionViewModel)) { return new BinderTypeModelBinder(typeof(InvoiceSelectionViewModelBinder)); } return null; } } public class InvoiceSelectionViewModelBinder : ComplexTypeModelBinder { private readonly IQueryExecutor _queryExecutor; public InvoiceSelectionViewModelBinder(IDictionary<ModelMetadata, IModelBinder> propertyBinders, ILoggerFactory loggerFactory, IQueryExecutor queryExecutor) : base(propertyBinders, loggerFactory) { _queryExecutor = queryExecutor; } protected override async Task BindProperty(ModelBindingContext bindingContext) { if (bindingContext.ModelType == nameof(InvoiceSelectionViewModel.Invoices)) { var invoices = await _queryExecutor.ExecuteAsync(new GetInvoicesQuery(bindingContext.HttpContext.User.Identity)); bindingContext.Result = ModelBindingResult.Success(invoices); } else { await base.BindProperty(bindingContext); } } } Configurability Display as list of radio buttons You can force a list field to display as a list of radio buttons rather than a drop-down using the AsRadioList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsRadioList method is mapped to as=\"RadioList\" . <field for=\"ListId\" as=\"RadioList\" /> <field for=\"NullableListId\" as=\"RadioList\" /> @s.FieldFor(m => m.ListId).AsRadioList() @s.FieldFor(m => m.NullableListId).AsRadioList() This will change the default HTML for the non-nullable list id field and the Required nullable list id field as shown above to: <ul> %foreach item x in Model.{ListProperty} with increment i% <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_%i%\" name=\"%propertyName%\" required=\"required\" type=\"radio\" value=\"%x.{ValueProperty}%\"> <label for=\"%propertyName%_%i%\">%x.{NameProperty}%</label></li> %endforeach% </ul> And it will change the default HTML for the non-Required nullable list id field as shown above to: <ul> <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_1\" name=\"%propertyName%\" type=\"radio\" value=\"\"> <label for=\"%propertyName%_1\">%noneDescription%</label></li> %foreach item x in Model.{ListProperty} with increment i% <li><input %htmlAttributes% id=\"%propertyName%_%i+1%\" name=\"%propertyName%\" type=\"radio\" value=\"%x.{ValueProperty}%\"> <label for=\"%propertyName%_%i+1%\">%x.{NameProperty}%</label></li> %endforeach% </ul> Change the text description of none When you display a nullable list id field as a drop-down or a non-Required nullable list id field as a list of radio buttons you can change the text that is used to display the none value to the user. By default the text used is an empty string for the drop-down and None for the radio button. To change the text simply use the WithNoneAs method, e.g.: Tag Helpers variant HTML Helpers variant The WithNoneAs method is mapped to none-label=\"{label}\" . <field for=\"NullableListId\" none-label=\"No value\" /> @s.FieldFor(m => m.NullableListId).WithNoneAs(\"No value\") This will change the default HTML for the nullable list id field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No value</option> @* List item values as <options>... *@ </select> Hide empty item If you have a nullable list id field as a drop-down or a non-Required nullable list id field as a list of radio buttons then it will show the empty item and this item will be selected by default if the field value is null. If for some reason you want one of these fields, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The HideEmptyItem method is mapped to hide-empty-item=\"true\" . <field for=\"NullableListId\" hide-empty-item=\"true\"> @s.FieldFor(m => m.NullableListId).HideEmptyItem() This will change the default HTML for the nullable list id field as shown above to: <select %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\"> @* List item values as <options>... *@ </select>"
  },
  "docs/multiple-enum.html": {
    "href": "docs/multiple-enum.html",
    "title": "Multiple-Select Enum Fields | ChameleonForms",
    "keywords": "Multiple-Select Enum Fields If you want the user to specify multiple values from an enum you can either use a flags enum (separate page) or use a non-flags enum against any property with a type convertible to IEnumerable<%enumType%> (this page), e.g.: public enum MyEnum { ... } ... public IEnumerable<MyEnum> EnumEnumerableField { get; set; } public List<MyEnum> EnumListField { get; set; } public MyEnum[] EnumArrayField { get; set; } // Or, alternatively: public IEnumerable<MyEnum?> NullableEnumEnumerableField { get; set; } public List<MyEnum?> NullableEnumListField { get; set; } public MyEnum?[] NullableEnumArrayField { get; set; } Note: as you will see below - there isn't much point in specifying a nullable enum for the enum type in the enumerable/list - we recommend you always use the enum type directly. If you want the user to specify a single value only from an enum then you can use the enum type directly without the collection modifier. Default HTML Required nullable or non-nullable enum (multi-select drop-down with no empty option) To indicate that a value is required, regardless of whether you use the enum type or nullable variant of the enum type, you need to mark the field with [Required] . <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> Non-Required nullable or non-nullable enum (multi-select drop-down with empty option) <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">%noneDescription%</option> %foreach enum value x% <option value=\"%x.ToString()%\">%x.Humanize()%</option> %endforeach% </select> Explanation and example Please see the explanation an example on the Enum Field page to understand what %x.ToString() and %x.Humanize()% do and how to control the description values. Configurability Display as list of checkboxes You can force a list of enums field to display as a list of checkboxes rather than a multi-select drop-down using the AsCheckboxList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsCheckboxList method is mapped to as=\"CheckboxList\" . <field for=\"EnumListField\" as=\"CheckboxList\" /> @s.FieldFor(m => m.EnumListField).AsCheckboxList() This will change the default HTML for a both Required and non-Required list of enums (both nullable and non-nullable) fields as shown above to: <ul> %foreach enum value x with increment i % <li><input %validationAttrs% %htmlAttributes% id=\"%propertyName%_%i%\" name=\"%propertyName%\" type=\"checkbox\" value=\"%x.ToString()%\" /> <label for=\"%propertyName%_%i%\">%x.Humanize()%</label></li> %endforeach% </ul> Change the text description of none When you display a non-Required list of enums field (nullable or non-nulable) as a drop-down you can change the text that is used to display the none value to the user. By default the text used is None . To change the text simply use the WithNoneAs method, e.g.: Tag Helpers variant HTML Helpers variant The WithNoneAs method is mapped to none-label=\"{label}\" . <field for=\"NullableEnumListField\" none-label=\"No value\" /> @s.FieldFor(m => m.NullableEnumListField).WithNoneAs(\"No value\") This will change the default HTML for the non-Required drop-down list of enum field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No value</option> @* Enum values as <options>... *@ </select> Hide empty item If you have a non-Required list of enums field then it will show the empty item and this item will be selected by default if no values are selected. If for some reason you want a non-Required list of enums field, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The HideEmptyItem method is mapped to hide-empty-item=\"true\" . <field for=\"NullableEnumListField\" hide-empty-item=\"true\" /> @s.FieldFor(m => m.NullableEnumListField).HideEmptyItem() This will change the default HTML for the non-Required drop-down list of enum field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> @* Enum values as <options>... *@ </select>"
  },
  "docs/multiple-list.html": {
    "href": "docs/multiple-list.html",
    "title": "Multiple-Select List Fields | ChameleonForms",
    "keywords": "Multiple-Select List Fields If you want the user to specify multiple values from items in an arbitrary list of objects you can use the [ExistsIn] attribute against a model property that enumerates the type of the value property, e.g.: public class MyObject { public string Name { get; set; } public int Id { get; set; } } public class MyViewModel { public MyViewModel() { ListValues = new List<MyObject> { new MyObject { Id = 1, Name = \"First item\" }, new MyObject { Id = 2, Name = \"Second item\" }, }; } ... public List<MyObject> ListValues { get; set; } [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public IEnumerable<int> EnumerableListId { get; set; } [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public List<int> ListListId { get; set; } // Or, alternatively - we recommend using nullable types for multi-select items that aren't enums [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public IEnumerable<int?> NullableEnumerableListId { get; set; } [ExistsIn(nameof(ListValues), nameof(MyObject.Id), nameof(MyObject.Name))] public List<int?> NullableListListId { get; set; } } Note: as you will see below - there isn't much difference in specifying a nullable vs non-nullable type as the type being collected, except if you specify a non-nullable type and the list of items is not Required then the default MVC model binder doesn't work very well (if you are using a drop-down) and will conflict with the [ExistsIn] validation. It's our intention to provide a model binder in the future that rectifies this issue. There is a definition for the [ExistsIn] attribute on the List page. Default HTML Required nullable or non-nullable list id (multi-select drop-down with no empty option) When using the Default Field Generator then the default HTML of the Field Element for a Required (i.e. tagged with [Required] ) nullable or non-nullable list id will be: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\"> %foreach item x in Model.{ListProperty}% <option value=\"%x.{ValueProperty}%\">%x.{NameProperty}%</option> %endforeach% </select> Non-Required nullable or non-nullable list id (multi-select drop-down with empty option) When using the Default Field Generator then the default HTML of the Field Element for a Non-Required nullable or non-nullable list id will be: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">%noneDescription%</option> %foreach item x in Model.{ListProperty}% <option value=\"%x.{ValueProperty}%\">%x.{NameProperty}%</option> %endforeach% </select> Server-side validation If you want to provide server-side validation protection of the value the user submitted then the [ExistsIn] attribute will automatically take care of this for you by default assuming that the list is populated at the correct point. The documentation for how to use and configure server-side validation can be found on the List page. Configurability Display as list of checkboxes You can force a list of list items field to display as a list of checkboxes (say that 10 times fast!) rather than a drop-down using the AsCheckboxList method on the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The AsCheckboxList method is mapped to as=\"CheckboxList\" . <field for=\"EnumerableListId\" as=\"CheckboxList\" /> <field for=\"ListListId\" as=\"CheckboxList\" /> <field for=\"NullableEnumerableListId\" as=\"CheckboxList\" /> <field for=\"NullableListListId\" as=\"CheckboxList\" /> @s.FieldFor(m => m.EnumerableListId).AsCheckboxList() @s.FieldFor(m => m.ListListId).AsCheckboxList() @s.FieldFor(m => m.NullableEnumerableListId).AsCheckboxList() @s.FieldFor(m => m.NullableListListId).AsCheckboxList() This will change the default HTML for both Required and non-Required fields with nullable and non-nullable list ids as shown above to: <ul> %foreach item x in Model.{ListProperty} with increment i% <li><input %htmlAttributes% id=\"%propertyName%_%i%\" name=\"%propertyName%\" type=\"checkbox\" value=\"%x.{ValueProperty}%\"> <label for=\"%propertyName%_%i%\">%x.{NameProperty}%</label></li> %endforeach% </ul> Change the text description of none When you display a non-Required list of list values field as a drop-down you can change the text that is used to display the none value to the user. By default the text used is None . To change the text simply use the WithNoneAs method, e.g.: Tag Helpers variant HTML Helpers variant The WithNoneAs method is mapped to none-label=\"{label}\" . <label for=\"EnumerableListId\" none-label=\"No value\" /> @s.FieldFor(m => m.EnumerableListId).WithNoneAs(\"No value\") This will change the default HTML for the enumerable list id field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> <option selected=\"selected\" value=\"\">No value</option> @* List item values as <options>... *@ </select> Hide empty item If you have a non-Required list of list values field as a drop-down then it will show the empty item and this item will be selected by default if there are no values selected. If for some reason you want one of these fields, but you would also like to hide the empty item you can do so with the HideEmptyItem method in the Field Configuration, e.g.: Tag Helpers variant HTML Helpers variant The HideEmptyItem method is mapped to hide-empty-item=\"true\" . <field for=\"EnumerableListId\" hide-empty-item=\"true\" /> @s.FieldFor(m => m.EnumerableListId).HideEmptyItem() This will change the default HTML for the enumerable list id field as shown above to: <select %validationAttrs% %htmlAttributes% multiple=\"multiple\" id=\"%propertyName%\" name=\"%propertyName%\"> @* List item values as <options>... *@ </select>"
  },
  "docs/number.html": {
    "href": "docs/number.html",
    "title": "Number Fields | ChameleonForms",
    "keywords": "Number Fields If you need to collect numeric data then that will automatically be handled for you with a HTML5 <input type=\"number\"> field. Any one of the following model types will trigger one of these fields: public byte ByteField { get; set; } public sbyte SbyteField { get; set; } public short ShortField { get; set; } public ushort UshortField { get; set; } public int IntField { get; set; } public uint UintField { get; set; } public long LongField { get; set; } public ulong UlongField { get; set; } public float FloatField { get; set; } public double DoubleField { get; set; } public decimal DecimalField { get; set; } Default HTML Integral types For integral types ( byte , sbyte , short , ushort , int , uint , long , or ulong ), when using the Default Field Generator then the default HTML of the Field Element will be: <input type=\"number\" step=\"1\" %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" value=\"%value%\" /> Floating-point types For floating-point types ( float , double , or decimal ), when using the Default Field Generator then the default HTML of the Field Element will be: <input type=\"number\" step=\"any\" %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" required=\"required\" value=\"%value%\" /> Default min / max The min and max attributes will automatically be set in the following instances: byte : min=\"0\" max=\"255\" sbyte : min=\"-128\" max=\"127\" short : min=\"-32768\" max=\"32767\" ushort : min=\"0\" max=\"65535\" uint : min=\"0\" ulong : min=\"0\" Configurability Specify currency step You can specify your property as a currency value, which will automatically set the step attribute for you to 0.01 : [DataType(DataType.Currency)] public decimal DecimalField { get; set; } Specify step You can easily specify the step HTML attribute by using the Step method on the Field Configuration , e.g.: Tag Helpers variant HTML Helpers variant <field for=\"IntField\" step=\"2\" /> @* or *@ <field for=\"IntField\" fluent-config='c => c.Step(2)' /> @s.FieldFor(m => m.IntField).Step(2) If you specify this, it will override any default step value. Specify min and max You can easily specify the min and max HTML attributes by using the Min and Max methods on the Field Configuration , e.g.: Tag Helpers variant HTML Helpers variant <field for=\"IntField\" min=\"2\" max=\"60\" /> <field for=\"DecimalField\" min=\"1.1\" max=\"1.9\" /> @* or *@ <field for=\"IntField\" fluent-config='c => c.Min(2).Max(60)' /> <field for=\"DecimalField\" fluent-config='c => c.Min(1.1m).Max(1.9m)' /> @s.FieldFor(m => m.IntField).Min(5).Max(60) @s.FieldFor(m => m.DecimalField).Min(1.1m).Max(1.9m) If you specify these, it will override any default min/max values."
  },
  "docs/partials.html": {
    "href": "docs/partials.html",
    "title": "Use partial views for repeated or abstracted form areas | ChameleonForms",
    "keywords": "Use partial views for repeated or abstracted form areas You can use partial views to abstract a complex part of your form, reuse common parts of your form or to change the model type when using tag helpers . Given ChameleonForms is type-safe against the view's model type, when including a partial and changing the model type some care needes to be taken to ensure the correct ChameleonForms classes are being used. There are a lot of smarts built into ChameleonForms to auto-detect this where possible. The different scenarios and how to invoke them are listed below. Tag Helpers don't allow you to change a model within a page so for any situation where you want to change the model type (temporarily or for the whole form) you need to use partials. See below for examples. The best way to see how this works is by looking at the output of the partials acceptance tests ( tag helpers , HTML helpers ) or by looking at the changing context example page for tag helpers . Partial with same model as the parent You can include the partial view using built-in ASP.NET MVC functionality: Tag Helpers variant HTML Helpers variant <chameleon-form ...> ... <partial name=\"_PartialWithSameModelAsParent\" /> ... </chameleon-form> @using (var f = Html.BeginChameleonForm(...)) { ... @await Html.PartialAsync(\"_PartialWithSameModelAsParent\") ... } Partial has child property as model, but binds against parent You need to ensure that the ChameleonForms types get explicitly converted to the child model within the partial, while still binding against the parent. Tag Helpers variant HTML Helpers variant When using tag helpers you can use the provided <form-partial /> tag helper: <chameleon-form ...> ... <form-partial for=\"ChildProperty\" name=\"_PartialWithChildModelBindingToParent\" /> ... </chameleon-form> When using HTML helpers you can use the PartialForAsync extension method on either the Form or Section (whichever is in context): @using (var f = Html.BeginChameleonForm(...)) { ... @* When not in a form section: *@ @(await f.PartialForAsync(m => m.ChildProperty, \"_PartialWithChildModelBindingToParent\")) ... using (var s = f.BeginSection(...)) { ... @* When in a form section: *@ @(await s.PartialForAsync(m => m.ChildProperty, \"_PartialWithChildModelBindingToParent\")) ... } ... } When using HTML helpers, you can also do this without using partials . Partial has child property as model and binds against it In this case you can simply invoke a partial using built-in ASP.NET MVC Core functionality passing in the child property as the model of the partial. Tag Helpers variant HTML Helpers variant <partial name=\"_PartialWithChildAsModel\" model=\"Model?.ChildProperty\" /> @await Html.PartialAsync(\"_PartialWithChildAsModel\", Model?.ChildProperty) When using HTML helpers, you can also do this without using partials . Partial has a different model entirely from the parent In this case you can simply invoke a partial using built-in ASP.NET MVC Core functionality passing in the other model as the model of the partial. Tag Helpers variant HTML Helpers variant <partial name=\"_PartialWithOtherModel\" model=\"new OtherModel()\" /> @await Html.PartialAsync(\"_PartialWithOtherModel\", new OtherModel()) When using HTML helpers, you can also do this without using partials . Accessing the current form / form section / form field in a partial When inside a partial view you can use the following methods off of this : Html.IsInChameleonForm() - returns whether you are currently inside of a ChameleonForms form. Html.GetChameleonForm() - returns the current ChameleonForms form, otherwise it throws an Exception. Html.IsInChameleonFormsSection() - returns whether you are currently inside of a ChameleonForms Section. Html.GetChameleonFormsSection() - returns the current ChameleonForms Section instance if there is one, otherwise it throws an Exception. Html.IsInChameleonFormsField() - returns whether you are currently inside of a ChameleonForms Field. Html.GetChameleonFormsField() - returns the current ChameleonForms Field instance if there is one, otherwise it throws an Exception. Html.IsInChameleonFormsMessage() - returns whether you are currently inside of a ChameleonForms Message. Html.GetChameleonFormsMessage() - returns the current ChameleonForms Message instance if there is one, otherwise it throws an Exception. Html.IsInChameleonFormsNavigation() - returns whether you are currently inside of a ChameleonForms Navigation. Html.GetChameleonFormsNavigation() - returns the current ChameleonForms Navigation instance if there is one, otherwise it throws an Exception. This also works in the parent view so this functionality actually also lets you switch between tag helper syntax and HTML helper syntax on the fly. You can also switch from HTML helper syntax to tag helper syntax by including the tag helpers - they will automatically pick up the ambient context for you."
  },
  "docs/password.html": {
    "href": "docs/password.html",
    "title": "Password Fields | ChameleonForms",
    "keywords": "Password Fields If you need to collect a password then you can use the [DataType] attribute in System.ComponentModel.DataAnnotations to annotate that a string model property is in fact a password, e.g.: [DataType(DataType.Password)] public string PasswordField { get; set; } Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"password\" value=\"%value%\" />"
  },
  "docs/textarea.html": {
    "href": "docs/textarea.html",
    "title": "Textarea Fields | ChameleonForms",
    "keywords": "Textarea Fields If you need to collect multi-line text data using a textarea then you can use the [DataType] attribute in System.ComponentModel.DataAnnotations to annotate that a string model property is in fact multi-line text, e.g.: [DataType(DataType.MultilineText)] public string TextareaField { get; set; } Default HTML When using the Default Field Generator then the default HTML of the Field Element will be: <textarea %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\">%value%</textarea> Configurability Specify rows and columns You can easily specify the required rows and cols HTML attributes by using the Rows and Cols methods on the Field Configuration , e.g.: Tag Helpers variant HTML Helpers variant <field for=\"TextareaField\" rows=\"5\" cols=\"60\" /> @* or *@ <field for=\"TextareaField\" fluent-config='c => c.Rows(5).Cols(60)' /> @s.FieldFor(m => m.TextareaField).Rows(5).Cols(60)"
  },
  "docs/the-form.html": {
    "href": "docs/the-form.html",
    "title": "Form | ChameleonForms",
    "keywords": "Form The Form is the root element of a ChameleonForms form; you create a Form by either using the <chameleon-form> tag helper, or instantiating an IForm<TModel> within a using block. The IForm<TModel> interface looks like this and is in the ChameleonForms namespace: /// <summary> /// Interface for a Chameleon Form. /// </summary> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> public interface IForm<TModel> : IForm, IDisposable { /// <summary> /// The HTML helper for the current view. /// </summary> IHtmlHelper<TModel> HtmlHelper { get; } /// <summary> /// The template renderer for the current view. /// </summary> IFormTemplate Template { get; } /// <summary> /// Writes a HTML String directly to the view's output. /// </summary> /// <param name=\"htmlContent\">The HTML to write to the view's output</param> void Write(IHtmlContent htmlContent); /// <summary> /// The field generator for the given field. /// </summary> /// <param name=\"property\">The property to return the field generator for</param> IFieldGenerator GetFieldGenerator<T>(Expression<Func<TModel, T>> property); /// <summary> /// Returns a wrapped <see cref=\"PartialViewForm{TModel}\"/> for the given partial view helper. /// </summary> /// <param name=\"partialViewHelper\">The HTML Helper from the partial view</param> /// <returns>The PartialViewForm wrapping the original form</returns> IForm<TModel> CreatePartialForm(IHtmlHelper<TModel> partialViewHelper); } ChameleonForms comes with a standard implementation of the IForm<TModel> interface that uses the BeginForm and EndForm methods in the currently configured form template and returns an instance of the DefaultFieldGenerator class when asked for a Field Generator . Default usage In order to create a self-submitting form using the default form template (see below if you want to adjust it on a per-form basis ): Tag Helpers variant HTML Helpers variant Use the <chameleon-form> tag helper: <chameleon-form> @* Form content goes here *@ </chameleon-form> Use the BeginChameleonForm extension method on the HtmlHelper that appears in MVC views, e.g.: @using (var f = Html.BeginChameleonForm()) { @* Form content goes here *@ } The BeginChameleonForm extension method looks like this: /// <summary> /// Constructs a <see cref=\"Form{TModel}\"/> object with the default ChameleonForms template renderer. /// </summary> /// <example> /// @using (var f = Html.BeginChameleonForm(...)) { /// ... /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"helper\">The HTML Helper for the current view</param> /// <param name=\"action\">The action the form should submit to</param> /// <param name=\"method\">The HTTP method the form submission should use</param> /// <param name=\"htmlAttributes\">Any HTML attributes the form should use</param> /// <param name=\"enctype\">The encoding type the form submission should use</param> /// <param name=\"outputAntiforgeryToken\">Whether or not to output an antiforgery token in the form; defaults to null which will output a token if the method isn't GET</param> /// <returns>A <see cref=\"Form{TModel}\"/> object with an instance of the default form template renderer.</returns> public static IForm<TModel> BeginChameleonForm<TModel>(this IHtmlHelper<TModel> helper, string action = \"\", FormMethod method = FormMethod.Post, HtmlAttributes htmlAttributes = null, EncType? enctype = null, bool? outputAntiforgeryToken = null) { return new Form<TModel>(helper, helper.GetDefaultFormTemplate(), action, method, htmlAttributes, enctype, outputAntiforgeryToken); } By default a self-submitting form, against the page model type, that performs a HTTP post with the browser's default enctype (usually application/x-www-form-urlencoded ) is outputted, but you can change the submit location, HTTP verb, enctype , presence of anti forgery token and add any HTML attributes you like using the appropriate parameters, e.g.: Tag Helpers variant HTML Helpers variant <chameleon-form action=\"@Url.Action(\"SomeAction\")\" method=\"Post\" enctype=\"Multipart\" id=\"my-form\" disabled=\"false\" add-class=\"a-class\" fluent-config='c => c.Attr(\"data-a\", \"b\")' attr-data-whatever=\"some value\" output-antiforgery-token=\"false\"> @* Form content goes here *@ </chameleon-form> @using (var f = Html.BeginChameleonForm(action: Url.Action(\"SomeAction\"), method: FormMethod.Post, enctype: EncType.Multipart, htmlAttributes: new HtmlAttributes().Id(\"my-form\").Disabled(false).AddClass(\"a-class\").Attr(\"data-a\", \"b\").Attr(\"data-whatever\", \"some value\"), outputAntiforgeryToken: false)) { @* Form content goes here *@ } You can also create a form against a model type different from the page model . Configuring the form template As you can see above, when using the BeginChameleonForm extension method (which is also what the <chameleon-form> tag helper uses under the hood) it uses helper.GetDefaultFormTemplate() to determine what form template to use. By default this is set to an instance of the DefaultFormTemplate class from the ChameleonForms.Templates.Default namespace. The way this works is the global configuration will register an implementation of IFormTemplate with the service collection within your ASP.NET Core web application. The helper.GetDefaultFormTemplate() extension will then resolve that default template implementation from the request services: /// <summary> /// Gets the registered default form template from RequestServices. /// </summary> /// <param name=\"htmlHelper\">The HTML Helper</param> /// <returns>An instance of the default <see cref=\"IFormTemplate\"/></returns> public static IFormTemplate GetDefaultFormTemplate(this IHtmlHelper htmlHelper) { return htmlHelper.ViewContext.HttpContext.RequestServices.GetRequiredService<IFormTemplate>(); } If you would like to change the form template that is used then simply specify a different type when registering ChameleonForms with the service collection : services.AddChameleonForms<MyFormTemplate>(); This will new up your form template using a parameterless constructor and then register it as a singleton against IFormTemplate . If you want more control on how your template is instantiated and/or registered then you can opt out of ChameleonForms registering your template and instead register it yourself, e.g.: services.AddChameleonForms(b => b.WithoutTemplateTypeRegistration()); services.AddSingleton<IFormTemplate>(new MyFormTemplate(/* constructor parameters */)); If you want to use multiple Form Templates across your application you can create your own extension methods or create your own tag helper based on the <chameleon-form> one to allow for different form templates to be specified on a per-form basis. HTML5 validation By default, ChameleonForms opts out of HTML5 validation for you via the novalidate=\"novalidate\" attribute on the <form> . It does this so that you can retain control of client-side validation (e.g. through unobtrusive validation), which is typically able to yield a better user experience than HTML5 validation. If you want to override this behaviour you can configure your own form template. Default HTML Begin HTML <form action=\"%action%\" method=\"%method%\" (enctype=\"%enctype%\") (%htmlAttributes%) novalidate=\"novalidate\"> (%antiforgery token%) End HTML </form> Twitter Bootstrap 3 HTML Same as default."
  },
  "docs/the-message.html": {
    "href": "docs/the-message.html",
    "title": "Message | ChameleonForms",
    "keywords": "Message The Message is a container to show a message to the user. You could do this using HTML without using the Message component, but the benefit of using the Message component is it delegates the HTML to the form template so you ensure conssitency across all forms. You can create a Message by using the <form-message> tag helper or instantiating a Message<TModel> within a using block. The Message<TModel> class looks like this and is in the ChameleonForms.Component namespace: /// <summary> /// Wraps the output of a message to display to a user. /// </summary> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> public class Message<TModel> : FormComponent<TModel> { /// <summary> /// Creates a message. /// </summary> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"messageType\">The type of message to display</param> /// <param name=\"heading\">The heading for the message</param> public Message(IForm<TModel> form, MessageType messageType, IHtmlContent heading); /// <summary> /// Creates a message. /// </summary> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"messageType\">The type of message to display</param> /// <param name=\"heading\">The heading for the message</param> public Message(IForm<TModel> form, MessageType messageType, string heading); /// <summary> /// Returns the HTML representation of the beginning of the form component. /// </summary> /// <returns>The beginning HTML for the form component</returns> public virtual IHtmlContent Begin(); /// <summary> /// Returns the HTML representation of the end of the form component. /// </summary> /// <returns>The ending HTML for the form component</returns> public virtual IHtmlContent End(); /// <summary> /// Creates the HTML for a paragraph in the message. /// </summary> /// <param name=\"paragraph\">The paragraph to output</param> /// <returns>The HTML for the paragraph</returns> public virtual IHtmlContent Paragraph(string paragraph); /// <summary> /// Creates the HTML for a paragraph in the message. /// </summary> /// <param name=\"paragraph\">The paragraph to output</param> /// <returns>The HTML for the paragraph</returns> public virtual IHtmlContent Paragraph(IHtmlContent paragraph); /// <summary> /// Creates the HTML for a paragraph in the message. /// </summary> /// <param name=\"paragraph\">The paragraph to output as a templated razor delegate</param> /// <returns>The HTML for the paragraph</returns> public virtual IHtmlContent Paragraph(Func<dynamic, IHtmlContent> paragraph); The start and end HTML of the Message are generated via the BeginMessage and EndMessage methods in the form template and the paragraph is generated via the MessageParagraph method in the template. Default usage Tag Helpers variant HTML Helpers variant <form-message type=\"Information\" heading=\"Message title\"> @* Message content *@ </form-message> In order to get an instance of a Message<TModel> you can use the BeginMessage extension method on the Form , e.g.: @using (var m = form.BeginMessage(MessageType.Information, \"Message title\")) { @* Message content *@ } The BeginMessage extension methods look like this: /// <summary> /// Creates a message. /// </summary> /// <example> /// @using (var m = f.BeginMessage(MessageType.Success, \"Your submission was successful\")) { /// @m.Paragraph(string.Format(\"Your item was successfully created with id {0}\", Model.Id)) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"messageType\">The type of message to display</param> /// <param name=\"heading\">The heading for the message</param> /// <returns>The message</returns> public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, string heading = null) { return new Message<TModel>(form, messageType, heading); } /// <summary> /// Creates a message. /// </summary> /// <example> /// @using (var m = f.BeginMessage(MessageType.Success, new HtmlString(\"&lt;strong&gt;The submission was successful&lt;/strong&gt;\"))) { /// @m.Paragraph(string.Format(\"Your item was successfully created with id {0}\", Model.Id)) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"messageType\">The type of message to display</param> /// <param name=\"heading\">The heading for the message</param> /// <returns>The message</returns> public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, IHtmlContent heading) { return new Message<TModel>(form, messageType, heading); } /// <summary> /// Creates a message. /// </summary> /// <example> /// @using (var m = f.BeginMessage(MessageType.Success, new HtmlString(@&lt;strong&gt;The submission was successful&lt;/strong&gt;))) { /// @m.Paragraph(string.Format(\"Your item was successfully created with id {0}\", Model.Id)) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"messageType\">The type of message to display</param> /// <param name=\"heading\">The heading for the message as a templated razor delegate</param> /// <returns>The message</returns> public static Message<TModel> BeginMessage<TModel>(this IForm<TModel> form, MessageType messageType, Func<dynamic, IHtmlContent> heading) { return new Message<TModel>(form, messageType, heading(null)); } The MessageType enum is defined like this and appears in the ChameleonForms.Enums namespace: /// <summary> /// Types of messages that can be displayed to the user /// </summary> public enum MessageType { /// <summary> /// User action required. /// </summary> Action, /// <summary> /// Action successful. /// </summary> Success, /// <summary> /// Action failed. /// </summary> Failure, /// <summary> /// Informational message. /// </summary> Information, /// <summary> /// Warning message. /// </summary> Warning } When setting the type attribute in the <form-message> tag helper you can reference any of these MessageType values. Message content Tag Helpers variant HTML Helpers variant If you want to add paragraphs using the template you can do that by using the <message-paragraph> tag helper and of course you can use normal HTML or any valid Razor code as well: <form-message type=\"Information\" heading=\"Message title\"> <message-paragraph>Here is the first part of the message</message-paragraph> <img src=\"/path/to/img\" alt=\"alt text\" /> <message-paragraph>Here is a <strong>styled</strong> message</message-paragraph> @SomeRazorFunctionDefinedOnThisPage() <partial name=\"_WooWeCanGetReallyCrazyAndAddPartialsToo_OMG\"></partial> </form-message> If you want to add paragraphs using the template you can do that by using one of the Paragraph methods as defined above and of course you can use normal HTML or any valid Razor code as well: @using (var m = f.BeginMessage(MessageType.Information, \"Message title\")) { @m.Paragraph(\"Here is the first part of the message\") <img src=\"/path/to/img\" alt=\"alt text\" /> @m.Paragraph(new HtmlString(\"Here is a <strong>styled</strong> message\")) @SomeRazorFunctionDefinedOnThisPage() <partial name=\"_WooWeCanGetReallyCrazyAndAddPartialsToo_OMG\"></partial> @m.Paragraph(@<strong>Message content</strong>) } Default HTML Begin HTML <div class=\"%messagetype%_message\"> %if heading%<h3>%heading%</h3>%endif% <div class=\"message\"> End HTML </div> </div> Paragraph HTML <p>%content%</p> Twitter Bootstrap 3 HTML Begin HTML <div class=\"panel panel-%messageType.ToTwitterEmphasisStyle()%\"> %if heading%<div class=\"panel-heading\"><h4 class=\"panel-title\">%heading%</h4></div>%endif% <div class=\"panel-body\"> The ToTwitterEmphasisStyle extension method performs the following conversions from the ChameleonForms message types to the Twitter Emphasis Styles : Action becomes Primary Success becomes Success Failure becomes Danger Information becomes Info Warning becomes Warning Anything else becomes Default End HTML </div> </div> Paragraph HTML Same as default."
  },
  "docs/the-navigation.html": {
    "href": "docs/the-navigation.html",
    "title": "Navigation | ChameleonForms",
    "keywords": "Navigation The Navigation is a grouping of a set of navigation elements; you create a Navigation by using a <form-navigation> tag helper or instantiating a Navigation<TModel> within a using block. The start and end of the using block will output the start and end HTML for the Navigation and the inside of the using block will contain the Navigation elements. The Navigation<TModel> class looks like this and is in the ChameleonForms.Component namespace: /// <summary> /// Wraps the output of the navigation area of a form. /// For example the area with submit buttons. /// </summary> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> public class Navigation<TModel> : FormComponent<TModel> { /// <summary> /// Creates a form navigation area. /// </summary> /// <param name=\"form\">The form the message is being created in</param> public Navigation(IForm<TModel> form); /// <summary> /// Returns the HTML representation of the beginning of the form component. /// </summary> /// <returns>The beginning HTML for the form component</returns> public virtual IHtmlContent Begin(); /// <summary> /// Returns the HTML representation of the end of the form component. /// </summary> /// <returns>The ending HTML for the form component</returns> public virtual IHtmlContent End(); /// <summary> /// Creates the HTML for a submit &lt;button&gt;. /// </summary> /// <param name=\"text\">The text to display in the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Submit(string text); /// <summary> /// Creates the HTML for a submit &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display in the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Submit(IHtmlContent content); /// <summary> /// Creates the HTML for a submit &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display in the button as a templated razor delegate</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Submit(Func<dynamic, IHtmlContent> content); /// <summary> /// Creates the HTML for a submit button that submits a value in the form post when clicked. /// </summary> /// <param name=\"name\">The name of the element</param> /// <param name=\"value\">The value to submit with the form</param> /// <param name=\"content\">The text the user sees (leave as the default null if you want the user to see the value instead)</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Submit(string name, string value, IHtmlContent content = null); /// <summary> /// Creates the HTML for a submit button that submits a value in the form post when clicked. /// </summary> /// <param name=\"name\">The name of the element</param> /// <param name=\"value\">The value to submit with the form</param> /// <param name=\"content\">The text the user sees as a templated razor delegate</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Submit(string name, string value, Func<dynamic, IHtmlContent> content); /// <summary> /// Creates the HTML for a &lt;button&gt;. /// </summary> /// <param name=\"text\">The text to display in the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Button(string text); /// <summary> /// Creates the HTML for a &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display in the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Button(IHtmlContent content); /// <summary> /// Creates the HTML for a &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display in the button as a templated razor delegate</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Button(Func<dynamic, IHtmlContent> content); /// <summary> /// Creates the HTML for a reset &lt;button&gt;. /// </summary> /// <param name=\"text\">The text to display for the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Reset(string text); /// <summary> /// Creates the HTML for a reset &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display for the button</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Reset(IHtmlContent content); /// <summary> /// Creates the HTML for a reset &lt;button&gt;. /// </summary> /// <param name=\"content\">The content to display for the button as a templated razor delegate</param> /// <returns>Html attributes class to chain modifications to the button's attributes; call .ToHtmlString() to generate the button HTML</returns> public ButtonHtmlAttributes Reset(Func<dynamic, IHtmlContent> content); } The start and end HTML of the Navigation are generated via the BeginNavigation and EndNavigation methods in the form template . The HTML for the various types of buttons are all generated via the Button method in the template. Default usage Tag Helpers variant HTML Helpers variant In order to get a navigation you can use the <form-navigation> tag helper, e.g.: <form-navigation> @* Navigation elements go here *@ </form-navigation> In order to get an instance of a Navigation<TModel> you can use the BeginNavigation method on the Form, e.g.: @using (var n = f.BeginNavigation()) { @* Navigation elements go here *@ } The BeginNavigation extension method looks like this: /// <summary> /// Creates a navigation section. /// </summary> /// <example> /// @using (var n = f.BeginNavigation()) { /// @n.Submit(\"Previous\", \"previous\") /// @n.Submit(\"Save\", \"save\") /// @n.Submit(\"Next\", \"next\") /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the navigation is being created in</param> /// <returns>The form navigation</returns> public static Navigation<TModel> BeginNavigation<TModel>(this IForm<TModel> form) { return new Navigation<TModel>(form); } Buttons From within a section you can create Navigation Submit, Reset and normal Buttons. Tag Helpers variant HTML Helpers variant You can create buttons by using the <form-button> , <reset-button> and <submit-button> tag helpers within a <form-navigation> tag helper. <form-navigation> <form-button add-class=\"button\" id=\"button1\" label=\"text button\" /> <form-button add-class=\"button\" id=\"button2\"><strong>html button</strong></form-button> <reset-button add-class=\"button\" id=\"button3\" label=\"text reset\" /> <reset-button add-class=\"button\" id=\"button4\"><strong>html reset</strong></reset-button> <submit-button add-class=\"button\" id=\"button5\" label=\"text reset\" /> <submit-button add-class=\"button\" id=\"button6\"><strong>html reset</strong></reset-button> <submit-button name=\"name\" value=\"value\" add-class=\"button\" id=\"button7\"><strong>html submit with value</strong></submit-button> </form-navigation> You can create buttons by using the methods on the Navigation<T> object. You can chain HTML Attributes specifiers off the end of the buttons you create, e.g.: @using (var n = f.BeginNavigation()) { @n.Button(\"text button\").AddClass(\"button\").Id(\"button1\") @n.Button(new HtmlString(\"<strong>html button</strong>\")).AddClass(\"button\").Id(\"button2\") @n.Button(@<strong>html button</strong>) @n.Reset(\"text reset\").AddClass(\"button\").Id(\"button3\") @n.Reset(new HtmlString(\"<strong>html reset</strong>\")).AddClass(\"button\").Id(\"button4\") @n.Reset(@<strong>html reset</strong>) @n.Submit(new HtmlString(\"<strong>html submit</strong>\")).AddClass(\"button\").Id(\"button5\") @n.Submit(\"text submit\").AddClass(\"button\").Id(\"button6\") @n.Submit(\"name\", \"value\", new HtmlString(\"<strong>html submit with value</strong>\")).AddClass(\"button\").Id(\"button7\") @n.Submit(\"name\", \"value\").AddClass(\"button\").Id(\"button8\") @n.Submit(@<strong>html submit</strong>) } Extending Navigation Buttons See the HTML Attributes documentation for more information. Default HTML Begin HTML <div class=\"form_navigation\"> End HTML </div> Button HTML <button (%htmlAttributes%)>%content%</button> Reset HTML <button type=\"reset\" (%htmlAttributes%)>%content%</button> Submit HTML <button type=\"submit\" (%htmlAttributes%)>%content%</button> If you specify a name and value to submit when the form is submitted via the button and you don't provide content then the HTML will be ( see why ): <input type=\"submit\" name=\"%name%\" id=\"%name%\" value=\"%value%\" /> If you specify a name, value and content the HTML will be (if you call this method you are opting out of IE7 support for capturing the submitted value on the server-side): <button type=\"submit\" name=\"%name%\" id=\"%name%\" value=\"%value%\" (%htmlAttributes%)>%content%</button> Twitter Bootstrap 3 HTML Begin HTML <div class=\"btn-group\"> End HTML </div> Button/Reset/Submit HTML The HTML is the same as the default except a class of btn will always be added and if no emphasis classes are added (see below) then a class of btn-default will be added. Add emphasis style There is an extension method in the ChameleonForms.Templates.TwitterBootstrap3 namespace that allows you to add an emphasis style to the buttons: /// <summary> /// Adds the given emphasis to the button. /// </summary> /// <example> /// @n.Submit(\"Submit\").WithStyle(EmphasisStyle.Warning) /// </example> /// <param name=\"attrs\">The Html Attributes from a navigation button</param> /// <param name=\"style\">The style of button</param> /// <returns>The Html Attribute object so other methods can be chained off of it</returns> public static ButtonHtmlAttributes WithStyle(this ButtonHtmlAttributes attrs, EmphasisStyle style) { attrs.AddClass(string.Format(\"btn-{0}\", style.ToString().ToLower())); return attrs; } The EmphasisStyle enum is as follows: /// <summary> /// Twitter Bootstrap alert/emphasis colors: http://getbootstrap.com/css/#type-emphasis /// </summary> public enum EmphasisStyle { /// <summary> /// Default styling. /// </summary> Default, /// <summary> /// Primary action styling. /// </summary> Primary, /// <summary> /// Success styling. /// </summary> Success, /// <summary> /// Information styling. /// </summary> Info, /// <summary> /// Warning styling. /// </summary> Warning, /// <summary> /// Danger styling. /// </summary> Danger } Tag Helpers variant HTML Helpers variant There is a tag helper in the ChameleonForms.Templates.TwitterBootstrap3 namespace that adds an emphasis-style property to the <form-button> , <reset-button> and <submit-button> tag helpers. Or, you can make use of the fluent-attrs property on those tag helpers. To use the custom tag helper you need to import the tag helper within your _ViewImports.cshtml or equivalent file: @addTagHelper ChameleonForms.Templates.TwitterBootstrap3.*, ChameleonForms Here is an example of its use: <form-navigation> <submit-button label=\"Submit\" emphasis-style=\"Primary\" /> @* or *@ <submit-button label=\"Submit\" fluent-attrs='c => c.WithStyle(EmphasisStyle.Primary)' /> </form-navigation> You can use the extension method like this: @using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\").WithStyle(EmphasisStyle.Primary) } In order to be able to swap out the extension method usage across your application easily if you change your form template we recommend that rather than adding a using statement to ChameleonForms.Templates.TwitterBootstrap3 for each view that has a form using the extension method you instead add the namespace to your _ViewImports.cshtml or equivalent file. Which would result in: <div class=\"btn-group\"> <button type=\"submit\" class=\"btn btn-primary\">Submit</button> </div> Change button size There is an extension method in the ChameleonForms.Templates.TwitterBootstrap3 namespace that allows you to change the size of your buttons: /// <summary> /// Changes the button to use the given size. /// </summary> /// <example> /// @n.Submit(\"Submit\").WithSize(ButtonSize.Large) /// </example> /// <param name=\"attrs\">The Html Attributes from a navigation button</param> /// <param name=\"size\">The size of button</param> /// <returns>The Html Attribute object so other methods can be chained off of it</returns> public static ButtonHtmlAttributes WithSize(this ButtonHtmlAttributes attrs, ButtonSize size) { if (size != ButtonSize.Default) attrs.AddClass(string.Format(\"btn-{0}\", size.Humanize())); return attrs; } The ButtonSize enum is as follows: /// <summary> /// Twitter Bootstrap button sizes: http://getbootstrap.com/css/#buttons-sizes /// </summary> public enum ButtonSize { /// <summary> /// Extra small button size. /// </summary> [Description(\"xs\")] ExtraSmall, /// <summary> /// Small button size. /// </summary> [Description(\"sm\")] Small, /// <summary> /// Default button size. /// </summary> Default, /// <summary> /// Large button size. /// </summary> [Description(\"lg\")] Large } Tag Helpers variant HTML Helpers variant There is a tag helper in the ChameleonForms.Templates.TwitterBootstrap3 namespace that adds an size property to the <form-button> , <reset-button> and <submit-button> tag helpers. Or, you can make use of the fluent-attrs property on those tag helpers. To use the custom tag helper you need to import the tag helper within your _ViewImports.cshtml or equivalent file: @addTagHelper ChameleonForms.Templates.TwitterBootstrap3.*, ChameleonForms Here is an example of its use: <form-navigation> <submit-button label=\"Submit\" size=\"Large\" /> @* or *@ <submit-button label=\"Submit\" fluent-attrs='c => c.WithSize(ButtonSize.Large)' /> </form-navigation> You can use the extension method like this: @using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\").WithSize(ButtonSize.Large) } In order to be able to swap out the extension method usage across your application easily if you change your form template we recommend that rather than adding a using statement to ChameleonForms.Templates.TwitterBootstrap3 for each view that has a form using the extension method you instead add the namespace to your _ViewImports.cshtml or equivalent file. Which would result in: <div class=\"btn-group\"> <button type=\"submit\" class=\"btn btn-default btn-lg\">Submit</button> </div> Add icon to button There is an extension method in the ChameleonForms.Templates.TwitterBootstrap3 namespace that allows you to add icons to your buttons: /// <summary> /// Adds the given icon to the start of a navigation button. /// </summary> /// <example> /// @n.Submit(\"Submit\").WithIcon(\"arrow-right\") /// // Output: /// &lt;button type=\"submit\">&lt;span class=\"glyphicon glyphicon-arrow-right\">&lt;/span> Submit&lt;/button> /// </example> /// <param name=\"attrs\">The Html Attributes from a navigation button</param> /// <param name=\"icon\">The icon to use; see https://getbootstrap.com/docs/3.3/components/#glyphicons</param> /// <returns>The Html Attribute object so other methods can be chained off of it</returns> public static ButtonHtmlAttributes WithIcon(this ButtonHtmlAttributes attrs, string icon) { attrs.Attr(TwitterBootstrap3FormTemplate.IconAttrKey, icon); return attrs; } You can see the list of possible icon names to choose from on the Twitter Bootstrap documentation site (drop the glyphicon- from the icon names on this page e.g. use adjust instead of glyphicon-adjust ). Tag Helpers variant HTML Helpers variant There is a tag helper in the ChameleonForms.Templates.TwitterBootstrap3 namespace that adds an icon property to the <form-button> , <reset-button> and <submit-button> tag helpers. Or, you can make use of the fluent-attrs property on those tag helpers. To use the custom tag helper you need to import the tag helper within your _ViewImports.cshtml or equivalent file: @addTagHelper ChameleonForms.Templates.TwitterBootstrap3.*, ChameleonForms Here is an example of its use: <form-navigation> <submit-button label=\"Submit\" icon=\"adjust\" /> @* or *@ <submit-button label=\"Submit\" fluent-attrs='c => c.WithIcon(\"adjust\")' /> </form-navigation> You can use the extension method like this: @using (var n = f.BeginNavigation()) { @n.Submit(\"Submit\").WithIcon(\"adjust\") } In order to be able to swap out the extension method usage across your application easily if you change your form template we recommend that rather than adding a using statement to ChameleonForms.Templates.TwitterBootstrap3 for each view that has a form using the extension method you instead add the namespace to your _ViewImports.cshtml or equivalent file. Which would result in: <div class=\"btn-group\"> <button type=\"submit\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-adjust\"></span> Submit</button> </div> Example Here is an example from the example project of what the buttons can look like: Here is the code that generated the above screenshot: Tag Helpers variant HTML Helpers variant <form-navigation> <form-button label=\"text button\" emphasis-style=\"Primary\" size=\"Default\" /> <form-button add-class=\"random-class\"><strong>html button</strong></form-button> <reset-button label=\"text reset\" icon=\"refresh\" /> <reset-button><strong>html reset</strong></reset-button> <submit-button><strong>html submit</strong></submit-button> <submit-button label=\"text submit\" emphasis-style=\"Danger\" /> <submit-button name=\"name\" value=\"value\"><strong>html submit with value</strong></submit-button> <submit-button name=\"name\" value=\"value\" label=\"value\" icon=\"star\" emphasis-style=\"Success\" /> </form-navigation> <form-navigation> <form-button label=\"Small button 1\" size=\"Small\" /> <form-button label=\"Small button 2\" fluent-attrs='c => c.WithSize(ButtonSize.Small)' /> </form-navigation> <form-navigation> <form-button label=\"Extra small button 1\" size=\"ExtraSmall\" /> <form-button label=\"Extra small button 2\" fluent-attrs='c => c.WithSize(ButtonSize.ExtraSmall)' /> </form-navigation> <form-navigation> <form-button label=\"Large button 1\" size=\"Large\" /> <form-button label=\"Large button 2\" fluent-attrs='c => c.WithSize(ButtonSize.Large)' /> </form-navigation> @using (var n = f.BeginNavigation()) { @n.Button(\"text button\").WithStyle(EmphasisStyle.Primary).WithSize(ButtonSize.Default) @n.Button(new HtmlString(\"<strong>html button</strong>\")).AddClass(\"random-class\") @n.Reset(\"text reset\").WithIcon(\"refresh\") @n.Reset(new HtmlString(\"<strong>html reset</strong>\")) @n.Submit(new HtmlString(\"<strong>html submit</strong>\")) @n.Submit(\"text submit\").WithStyle(EmphasisStyle.Danger) @n.Submit(\"name\", \"value\", new HtmlString(\"<strong>html submit with value</strong>\")) @n.Submit(\"name\", \"value\").WithIcon(\"star\").WithStyle(EmphasisStyle.Success) } @using (var n = f.BeginNavigation()) { @n.Button(\"Small button 1\").WithSize(ButtonSize.Small) @n.Button(\"Small button 2\").WithSize(ButtonSize.Small) } @using (var n = f.BeginNavigation()) { @n.Button(\"Extra small button 1\").WithSize(ButtonSize.ExtraSmall) @n.Button(\"Extra small button 2\").WithSize(ButtonSize.ExtraSmall) } @using (var n = f.BeginNavigation()) { @n.Button(\"Large button 1\").WithSize(ButtonSize.Large) @n.Button(\"Large button 2\").WithSize(ButtonSize.Large) }"
  },
  "docs/the-section.html": {
    "href": "docs/the-section.html",
    "title": "Section | ChameleonForms",
    "keywords": "Section The Section is a grouping of a set of fields; you create a Section by using the <form-section> tag helper or instantiating a Section<TModel> within a using block. The start and end of the using block will output the start and end HTML for the Section and the inside of the using block will contain the Section fields. The Section<TModel> class looks like this and is in the ChameleonForms.Component namespace: /// <summary> /// Wraps the output of a form section. /// </summary> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> public class Section<TModel> : FormComponent<TModel>, ISection, ISection<TModel> { /// <summary> /// Creates a form section /// </summary> /// <param name=\"form\">The form the message is being created in</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"nested\">Whether the section is nested within another section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> public Section(IForm<TModel> form, IHtmlContent heading, bool nested, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null); /// <summary> /// Outputs a field with passed in HTML. /// </summary> /// <param name=\"labelHtml\">The HTML for the label part of the field</param> /// <param name=\"elementHtml\">The HTML for the field element part of the field</param> /// <param name=\"validationHtml\">The HTML for the validation markup part of the field</param> /// <param name=\"metadata\">Any field metadata</param> /// <param name=\"isValid\">Whether or not the field is valid</param> /// <returns>A field configuration that can be used to output the field as well as configure it fluently</returns> public IFieldConfiguration Field(IHtmlContent labelHtml, IHtmlContent elementHtml, IHtmlContent validationHtml = null, ModelMetadata metadata = null, bool isValid = true); /// <summary> /// Returns the HTML representation of the beginning of the form component. /// </summary> /// <returns>The beginning HTML for the form component</returns> public virtual IHtmlContent Begin(); /// <summary> /// Returns the HTML representation of the end of the form component. /// </summary> /// <returns>The ending HTML for the form component</returns> public virtual IHtmlContent End(); /// <summary> /// Returns a section with the same characteristics as the current section, but using the given partial form. /// </summary> /// <typeparam name=\"TPartialModel\">The model type of the partial view</typeparam> /// <returns>A section with the same characteristics as the current section, but using the given partial form</returns> public ISection<TPartialModel> CreatePartialSection<TPartialModel>(IForm<TPartialModel> partialModelForm); The start and end HTML of the Section are generated via the BeginSection and EndSection methods in the form template (or BeginNestedSection and EndNestedSection if the Section is a child of another Section). The field HTML is generated via the Field method in the template. Default usage Tag Helpers variant HTML Helpers variant In order to output a default instance of a Section you can use the <form-section> tag helper within a <chameleon-form> , e.g.: <form-section heading=\"Heading\"> @* Section fields go here *@ </form-section> In order to get an instance of a Section<TModel> you can use the BeginSection method on the Form, e.g. @using (var s = f.BeginSection(\"Heading\")) { @* Section fields go here *@ } The BeginSection extension methods look like this: /// <summary> /// Creates a top-level form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\")) { /// @s.FieldFor(m => m.FirstName) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the section is being created in</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The form section</returns> public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, string heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(form, heading.ToHtml(), false, leadingHtml, htmlAttributes); } /// <summary> /// Creates a top-level form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\", leadingHtml: @&lt;p&gt;Leading html...&lt;/p&gt;)) { /// @s.FieldFor(m => m.FirstName) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the section is being created in</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section as a templated razor delegate</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The form section</returns> public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, string heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(form, heading.ToHtml(), false, leadingHtml(null), htmlAttributes); } /// <summary> /// Creates a top-level form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(new HtmlString(\"&lt;strong&gt;Section heading&lt;/strong&gt;\"))) { /// @s.FieldFor(m => m.FirstName) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the section is being created in</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The form section</returns> public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, IHtmlContent heading, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(form, heading ?? new HtmlString(\"\"), false, leadingHtml, htmlAttributes); } /// <summary> /// Creates a top-level form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(@&lt;strong&gt;Section heading&lt;/strong&gt;, leadingHtml: @&lt;p&gt;Leading html...&lt;/p&gt;)) { /// @s.FieldFor(m => m.FirstName) /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"form\">The form the section is being created in</param> /// <param name=\"heading\">The heading for the section as a templated razor delegate</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section as a templated razor delegate</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The form section</returns> public static Section<TModel> BeginSection<TModel>(this IForm<TModel> form, Func<dynamic, IHtmlContent> heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(form, heading(null), false, leadingHtml(null), htmlAttributes); } You can extend the Section by adding HTML attributes to it. From within a Section you can create Fields and you can also create nested sections: Tag Helpers variant HTML Helpers variant Using a nested <form-section> tag helper: <form-section heading=\"Heading\"> @* Fields... *@ <form-section heading=\"Inner Heading\"> </form-section> @* Fields... *@ </form-section> Using the BeginSection extension method off the Section: @using (var s = f.BeginSection(\"Heading\")) { @* Fields... *@ using (var ss = s.BeginSection(\"Inner Heading\")) { @* Fields... *@ } @* Fields... *@ } The BeginSection extension methods on Section look like this: /// <summary> /// Creates a nested form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\")) { /// using (var ss = s.BeginSection(\"Nested section heading\")) { /// @ss.FieldFor(m => m.FirstName) /// } /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"section\">The section the section is being created under</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The nested form section</returns> public static Section<TModel> BeginSection<TModel>(this Section<TModel> section, string heading = null, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(section.Form, heading.ToHtml(), true, leadingHtml, htmlAttributes); } /// <summary> /// Creates a nested form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\")) { /// using (var ss = s.BeginSection(\"Nested section heading\", leadingHtml: @&lt;p&gt;Leading html...&lt;/p&gt;)) { /// @ss.FieldFor(m => m.FirstName) /// } /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"section\">The section the section is being created under</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section as a templated razor delegate</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The nested form section</returns> public static Section<TModel> BeginSection<TModel>(this Section<TModel> section, string heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(section.Form, heading.ToHtml(), true, leadingHtml(null), htmlAttributes); } /// <summary> /// Creates a nested form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\")) { /// using (var ss = s.BeginSection(new HtmlString(\"&lt;strong&gt;Nested section heading&lt;/strong&gt;\"))) { /// @ss.FieldFor(m => m.FirstName) /// } /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"section\">The section the section is being created under</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The nested form section</returns> public static Section<TModel> BeginSection<TModel>(this Section<TModel> section, IHtmlContent heading, IHtmlContent leadingHtml = null, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(section.Form, heading, true, leadingHtml, htmlAttributes); } /// <summary> /// Creates a nested form section. /// </summary> /// <example> /// @using (var s = f.BeginSection(\"Section heading\")) { /// using (var ss = s.BeginSection(@&lt;strong&gt;Nested section heading&lt;/strong&gt;, leadingHtml: &lt;p&gt;Leading html...&lt;/p&gt;)) { /// @ss.FieldFor(m => m.FirstName) /// } /// } /// </example> /// <typeparam name=\"TModel\">The view model type for the current view</typeparam> /// <param name=\"section\">The section the section is being created under</param> /// <param name=\"heading\">The heading for the section</param> /// <param name=\"leadingHtml\">Any HTML to output at the start of the section</param> /// <param name=\"htmlAttributes\">Any HTML attributes to apply to the section container</param> /// <returns>The nested form section</returns> public static Section<TModel> BeginSection<TModel>(this Section<TModel> section, Func<dynamic, IHtmlContent> heading, Func<dynamic, IHtmlContent> leadingHtml, HtmlAttributes htmlAttributes = null) { return new Section<TModel>(section.Form, heading(null), true, leadingHtml(null), htmlAttributes); } Default HTML Begin HTML <fieldset %htmlAttributes%> %if heading%<legend>%heading%</legend>%endif% %leadingHtml% <dl> End HTML </dl> </fieldset> Begin HTML (nested) %if heading%<dt>%heading%</dt>%endif% <dd> %leadingHtml% <dl %htmlAttributes%> End HTML (nested) </dl> </dd> Twitter Bootstrap 3 HTML Begin HTML <fieldset %htmlAttributes%> %if heading%<legend>%heading%</legend>%endif% %leadingHtml% End HTML </fieldset> Begin HTML (nested) <div class=\"panel panel-default\" %htmlAttributes%> %if heading%<div class=\"panel-heading\">%heading%</div>%endif% <div class=\"panel-body\"> %leadingHtml% End HTML (nested) </div> </div>"
  },
  "docs/uri.html": {
    "href": "docs/uri.html",
    "title": "URI Fields | ChameleonForms",
    "keywords": "URI Fields If you need to collect URI/URL data then that will automatically be handled for you with a HTML5 <input type=\"url\"> field. Any one of the following model types will trigger one of these fields: public Uri Uri { get; set; } [DataType(DataType.Url)] public string Url { get; set; } [Url] public string Url { get; set; } With the default global configuration , using a Uri will also result in server-side validation - the value will get parsed by the Uri class to check validity. The [Url] against a string will also result in (rudimentary) validation (starts with http:// , https:// or ftp:// ). Default HTML <input %validationAttrs% %htmlAttributes% id=\"%propertyName%\" name=\"%propertyName%\" type=\"url\" value=\"%value%\" /> Configurability Specify URL You can specify your property as a URL value, which will automatically validate server-side for a valid HTTP or HTTPS URL on the server-side (if using Uri with a [DataType(DataType.Url)] attribute) or starting with ftp://, http:// or https:// (if using string with [Url] ): [DataType(DataType.Url)] public Uri Url { get; set; } [Url] public string Url { get; set; } Note: if you specify the [Url] attribute with a Uri type it will always fail server-side validation because the built-in [Url] attribute expects a string."
  },
  "docs/why.html": {
    "href": "docs/why.html",
    "title": "Why is ChameleonForms needed? | ChameleonForms",
    "keywords": "Why is ChameleonForms needed? tl;dr The core problems with HTML form development Building HTML forms is a pain. All developers know it. There are so many places where inconsistencies and repetition come into play and make it harder to read, write and maintain the code (bare with us - we know ASP.NET Core MVC solves a lot of this): There is repetition in referencing each field in the form in numerous locations - setting default values, specifying server-side validation rules, specifying client-side validation rules and printing out the HTML for each field Writing out the HTML for the form is tedious because 95% of the time each field has practically the same boilerplate template HTML (e.g. <li> with label followed by field, <dl> with label in the <dt> and element in the <dd> , etc.) except for the field id (and the label - usually based on the field id) repeated a few times, and occasionally a different type of form control (e.g. select or textarea ) It's the other 5% of cases that are interesting and you want to spend most of your time on - not the boring 95%! Similarly, the repetition between server-side and client-side validation is tedious You need to be careful when printing out the HTML to ensure there is no possibility of HTML injection (i.e. you need to use WebUtility.HtmlEncode (ASP.NET Core), HTMLEditFormat (ColdFusion), htmlentities (PHP), etc.) when printing out all variables You need to be careful to include labels for all fields for accessibility reasons and ensure their ids match up; it’s easy to miss a few if you are copying and pasting the same HTML for each field and changing a few attributes Without continuing further with other reasons, the above list serves to demonstrate that, at its core, the process of creating a form is a tedious and repetitive process and certainly does not conform to the DRY principle . This means that (without \"help\") form creation is often an error-prone process, resulting in inconsistencies, hard-to-maintain code and potential security, usability and accessibility holes. Enter ASP.NET MVC Of course a lot of the problems that we described above are not an issue when using ASP.NET Core MVC: The compiler fixes a lot of the repetition issues when referencing the field in multiple places, since intellisense and the compiler make sure you consistently reference a property in your model class You can easily output the HTML for the label or the field using the HTML helpers The validation annotations and the validation model allows you to easily and tersely specify server-side validation rules The unobtrusive client-side validation model allows you to leverage your server-side validation rules in the client-side The Razor templating language (assuming it's being used correctly) pretty much removes all risk of unescaped HTML appearing on the page (in combination with the HTML form helpers providing adequate protection internally) It's more likely that the label for will match the field id given both are generated by a lambda expression referencing a class property - you just need to make sure the selected property matches up Using EditorTemplates it is possible (albeit a lot of work) to specify the template that you want to use for your boilerplate across the whole application So what's the problem then; let's go home ASP.NET MVC covers most of the pain points with building HTML forms that were described above. There are however a few areas that we feel aren't covered adequately: If you are using Html.EditorForModel You have little flexibility to account for the 5% of cases (let alone any little tweaks you want to make to fields that can't be accommodated with the attributes that Editor Templates know about - e.g. hints, html attributes, multiple fields appearing together, etc.) You will have inconsistencies across the site if you sometimes use Html.EditorForModel and sometimes don't - this makes the site harder to understand and maintain for new developers and makes it harder to consistently apply changes to your templates You need to create a confusing editor template with reflection in it to change the default form template (but at least you can specify it in one place making it easier to modify consistently across your application when your template changes) If you are not using Html.EditorForModel (i.e. you specify each field individually using built-in HTML Helpers or Tag Helpers) It's possible to incorrectly link the wrong property for the label for a field (e.g. a copy-paste error) - usually it should be picked up though since the label text will also not match You need to repeat the template boilerplate both within and across your forms (if using Html.EditorFor or Html.TextBoxFor etc.), or you are required to create a new control for every type of property you are using (if using the master template technique ) You need to specify the type of control to output (e.g. <select> , <input> , etc. rather than having it inferred from your model) You don't have support for things like enums showing as a select list It's difficult to switch output behaviour on a per-field basis e.g. what if you want a particular enum field to display as a list of radio buttons rather than a select list The support for all of the scenarios around handling when a field is required or not required and when to show an empty/default option are not adequately covered for (even though it's something that comes up a lot) Where does ChameleonForms fit in? ChameleonForms was created to leverage the advantages of ASP.NET Core MVC while bridging the gap of the deficiencies described above. It's also designed to provide a lot of nice functionality to help make form development better . ChameleonForms: Provides a first-class templating model that allows you to quickly and easily define new form templates and swap them out Encourages you to specify the structure of your form in a way that provides a lot of consistency within and across your forms Encourages a minimum of repetition - most of the time you only need to specify the property of the field you are outputting and it will work out everything else (label, validation HTML, field type based on model metadata, etc.) Gives you the flexibility to make tweaks to each field quickly, easily and consistently using a discoverable, fluent API Has a lot of nice support in handling some of the things that are a pain in out-of-the-box ASP.NET Core MVC : binding and validating dates in different formats showing enums as drop-down lists or lists of radio buttons correctly handling multiple-select controls correctly handling default options in drop-down lists and radio/checkbox lists Has an extensibility model that allows you to redefine and extend it at almost every level Has a very comprehensive set of unit tests and UI-automation tests to give confidence that it has been produced to a high standard of quality and is unlikely to have regressions Deliberately doesn't provide a equivalent of the \"magic\" Html.EditorForModel since we believe that you should be able to break out into HTML at any point in the form as well as have the per-field flexibility described above Flexibility We've mentioned it a few times in this post, but the 5% of cases where you need to break the mould and do something a bit different is a really important consideration. All too often people use forms solutions that are over-generalised and over-architected; this will always lead to situations where it doesn't quite fit and you have to abandon the whole library for a particular form. At that point you have two problems: You have inconsistencies in the codebase (making understandability and maintainability harder) You have whole forms that duplicate the boilerplate template When this happens this is a good indicator that whatever solution you are using goes too far. Ideally, forms libraries should accept that you can't cover all cases and make it easy to opt out of using the library in the middle of a form. As explained above, addressing this is a core design element of ChameleonForms. Display Templates One aspect that hasn't been covered, which is somewhat unique to ASP.NET Core MVC is Display Templates. This is one area that ChameleonForms doesn't cover in any way. This is actually a deliberate decision because we generally find that Display Templates aren't very useful - particularly with the terseness of Razor. Generally you will want more flexibility than Display Templates provide. If you find Display Templates useful and use them extensively then ChameleonForms might not be the right library for you (but we'd love to hear about your usecase so please submit an issue !)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Model-driven forms | ChameleonForms",
    "keywords": "Model-driven forms Spend less time with tedious reptition by letting your view models do the hard work for you. View Model View HTML output Notes Further reading public class SignupViewModel { [Required] public MembershipClass? MembershipType { get; set; } } public enum MembershipClass { Standard, Bonze, Silver, Gold, Platinum } Tag helpers variant <form-section heading=\"Form section\"> <field for=\"MembershipType\" /> </form-section> HTML helpers variant @using (var s = f.BeginSection(\"Form section\")) { @s.FieldFor(m => m.MembershipType) } <fieldset> <legend>Form section</legend> <dl> <dt><label for=\"MembershipType\">Membership type</label> <em class=\"required\">*</em></dt> <dd> <select data-val=\"true\" data-val-required=\"The Membership type field is required.\" id=\"MembershipType\" name=\"MembershipType\" required=\"required\"> <option selected=\"selected\" value=\"Standard\">Standard</option> <option value=\"Bonze\">Bonze</option> <option value=\"Silver\">Silver</option> <option value=\"Gold\">Gold</option> <option value=\"Platinum\">Platinum</option> </select> <span class=\"field-validation-valid\" data-valmsg-for=\"MembershipType\" data-valmsg-replace=\"true\"></span> </dd> </dl> </fieldset> Here are the things that ChameleonForms has done for us based on the model: The field label is based on the field name, but humanised (e.g. MembershipType -> Membership type ) The [Required] attribute results in a required designator ( <em class=\"required\">*</em> ), required attribute on the field ( required=\"required\" ) required unobtrusive client-side validation attributes ( data-val and data-val-required ) The enum type automatically results in a <select> with the different enum values translated to <option> 's Other model-driven form features you can explore: Getting started Inference from model type to output Boolean fields , DateTime fields , Enum fields , List fields , File upload fields and Number fields Multiple-select: Flags enum fields , Multiple-select enum fields and Multiple-select list fields Inference from model property attributes to output Textarea fields , Password fields , Email fields and Uri fields as well as supporting controlling the client-side and server-side validation of DateTime fields Client-side and server-side validation is given to us from the model metadata based on the built-in ASP.NET Core MVC features . The HTML that is rendered will always bind correctly to the view model on the ASP.NET Core MVC controller using the built-in model binding . Rapid, consistent, correct forms Use terse, declarative, type-safe, intellisense-friendly syntax to quickly define your forms and let conventions and templates take care of the detail so you don't have to. Your forms will be quicker to write and easier to maintain and you won't get stuck writing the same form boilerplate markup form after form after form. Plus, you can build in accessibility and consistency as cross-cutting concerns. ChameleonForms really shines when you need to build a lot of forms quickly and consistently. View (TH) View (HH) Visual result HTML output Startup / VM Notes Tag helpers variant @model SignupViewModel <h1>Account signup</h1> <chameleon-form attr-id=\"signup-form\"> <form-message type=\"Information\" heading=\"Signup for an account\"> <message-paragraph>Please fill in your information below to signup for an account.</message-paragraph> </form-message> <form-section heading=\"Your details\"> <field for=\"FirstName\" /> <field for=\"LastName\" /> <field for=\"DateOfBirth\" hint=\"DD/MM/YYYY\" /> </form-section> <form-section heading=\"Account details\"> <field for=\"EmailAddress\" hint=\"An email will be sent to this address to confirm you own it\" /> <field for=\"Password\" /> <field for=\"MembershipType\" /> </form-section> <form-section heading=\"Additional details\"> <field for=\"Bio\" /> <field for=\"Homepage\" placeholder=\"https://\" /> </form-section> <form-message type=\"Action\" heading=\"Confirm the Terms & Conditions\"> <message-paragraph>Please <a href=\"#\">read the terms and conditions</a></message-paragraph> <field-element for=\"TermsAndConditions\" inline-label=\"I agree to the terms and conditions\" /> </form-message> <form-navigation> <submit-button label=\"Signup\" emphasis-style=\"Primary\" /> </form-navigation> </chameleon-form> HTML helpers variant @model SignupViewModel <h1>Account signup</h1> @using (var f = Html.BeginChameleonForm(htmlAttributes: Html.Attrs().Id(\"signup-form\"))) { using (var m = f.BeginMessage(MessageType.Information, \"Signup for an account\")) { @m.Paragraph(\"Please fill in your information below to signup for an account.\") } using (var s = f.BeginSection(\"Your details\")) { @s.FieldFor(m => m.FirstName) @s.FieldFor(m => m.LastName) @s.FieldFor(m => m.DateOfBirth).WithHint(\"DD/MM/YYYY\") } using (var s = f.BeginSection(\"Account details\")) { @s.FieldFor(m => m.EmailAddress).WithHint(\"An email will be sent to this address to confirm you own it\") @s.FieldFor(m => m.Password) @s.FieldFor(m => m.MembershipType) } using (var s = f.BeginSection(\"Additional details\")) { @s.FieldFor(m => m.Bio).Rows(2).Cols(60) @s.FieldFor(m => m.Homepage).Placeholder(\"https://\") } using (var m = f.BeginMessage(MessageType.Action, \"Confirm the Terms & Conditions\")) { @m.Paragraph(@<text>Please <a href=\"/terms\">read the terms and conditions</a></text>) @f.FieldElementFor(mm => mm.TermsAndConditions).InlineLabel(\"I agree to the terms and conditions\") } using (var n = f.BeginNavigation()) { @n.Submit(\"Signup\").WithStyle(EmphasisStyle.Primary) } } <h1>Account signup</h1> <form action=\"\" enctype=\"application/x-www-form-urlencoded\" id=\"signup-form\" method=\"post\" novalidate=\"novalidate\"> <div class=\"panel panel-info\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">Signup for an account</h4> </div> <div class=\"panel-body\"> <p> Please fill in your information below to signup for an account. </p> </div> </div> <fieldset> <legend>Your details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"FirstName\">First name</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The First name field is required.\" id=\"FirstName\" name=\"FirstName\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"FirstName\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"LastName\">Last name</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The Last name field is required.\" id=\"LastName\" name=\"LastName\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"LastName\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"DateOfBirth\">Date of birth</label> <div class=\"input-group\"> <input aria-describedby=\"DateOfBirth--Hint\" class=\"form-control\" data-val=\"true\" data-val-date=\"The field Date of birth must be a date with format d/M/yyyy.\" data-val-format=\"d/M/yyyy\" data-val-required=\"The Date of birth field is required.\" id=\"DateOfBirth\" name=\"DateOfBirth\" required=\"required\" type=\"text\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <div class=\"help-block form-hint\" id=\"DateOfBirth--Hint\">DD/MM/YYYY</div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"DateOfBirth\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <fieldset> <legend>Account details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"EmailAddress\">Email address</label> <div class=\"input-group\"> <input aria-describedby=\"EmailAddress--Hint\" class=\"form-control\" data-val=\"true\" data-val-email=\"The Email address field is not a valid e-mail address.\" data-val-required=\"The Email address field is required.\" id=\"EmailAddress\" name=\"EmailAddress\" required=\"required\" type=\"email\" value=\"\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <div class=\"help-block form-hint\" id=\"EmailAddress--Hint\">An email will be sent to this address to confirm you own it</div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"EmailAddress\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"Password\">Password</label> <div class=\"input-group\"> <input class=\"form-control\" data-val=\"true\" data-val-required=\"The Password field is required.\" id=\"Password\" name=\"Password\" required=\"required\" type=\"password\" /> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Password\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"MembershipType\">Membership type</label> <div class=\"input-group\"> <select class=\"form-control\" data-val=\"true\" data-val-required=\"The Membership type field is required.\" id=\"MembershipType\" name=\"MembershipType\" required=\"required\"> <option selected=\"selected\" value=\"Standard\">Standard</option> <option value=\"Bonze\">Bonze</option> <option value=\"Silver\">Silver</option> <option value=\"Gold\">Gold</option> <option value=\"Platinum\">Platinum</option> </select> <div class=\"input-group-addon required\"> <em class=\"required\" title=\"Required\">&lowast;</em> </div> </div> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"MembershipType\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <fieldset> <legend>Additional details</legend> <div class=\"form-group\"> <label class=\"control-label\" for=\"Bio\">Bio</label> <textarea class=\"form-control\" cols=\"20\" id=\"Bio\" name=\"Bio\" rows=\"2\"></textarea> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Bio\" data-valmsg-replace=\"true\"></span> </div> <div class=\"form-group\"> <label class=\"control-label\" for=\"Homepage\">Homepage</label> <input class=\"form-control\" id=\"Homepage\" name=\"Homepage\" placeholder=\"http://\" type=\"url\" value=\"\" /> <span class=\"field-validation-valid help-block\" data-valmsg-for=\"Homepage\" data-valmsg-replace=\"true\"></span> </div> </fieldset> <div class=\"panel panel-primary\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">Confirm the Terms &amp; Conditions</h4> </div> <div class=\"panel-body\"> <p> Please <a href=\"#\">read the terms and conditions</a> </p> <input data-val=\"true\" data-val-required=\"The Terms and conditions field is required.\" id=\"TermsAndConditions\" name=\"TermsAndConditions\" required=\"required\" type=\"checkbox\" value=\"true\" /> <label for=\"TermsAndConditions\">I agree to the terms and conditions</label> </div> </div> <div class=\"btn-group\"> <button class=\"btn btn-primary\" type=\"submit\">Signup</button> </div> </form> Startup public void ConfigureServices(IServiceCollection services) { ... services.AddChameleonForms<TwitterBootstrap3FormTemplate>(); } View model public class SignupViewModel { [Required] public string FirstName { get; set; } [Required] public string LastName { get; set; } [DisplayFormat(DataFormatString = \"{0:d/M/yyyy}\", ApplyFormatInEditMode = true)] public DateTime DateOfBirth { get; set; } [Required] [EmailAddress] public string EmailAddress { get; set; } [Required] [DataType(DataType.Password)] public string Password { get; set; } public MembershipType MembershipType { get; set; } [Url] public Uri Homepage { get; set; } [DataType(DataType.MultilineText)] public string Bio { get; set; } [Required] public bool TermsAndConditions { get; set; } } public enum MembershipType { Standard, Bonze, Silver, Gold, Platinum } Here are the things that ChameleonForms has done for us: We've been able to declaratively declare the structure of the form rather than the presentation of the form - this is akin to the separation we get from declarative HTML separated from CSS and JS. The resulting markup for the form itself, the user messages, form sections, fields and navigation have all been sorted out, consistently, for us using a form template we've been able to select in Startup.cs (in this case using Bootstrap). The amount of HTML that is required to render that form (see HTML output tab) is a lot - it's easy to parts of that wrong if you need to specify the boilerplate manually, plus it then couples all of your forms to that specific template. With ChameleonForms we can swap out the template with a single line of code, for instance when you want to switch from Bootstrap to a more customised setup if you make it big and want to add some bespoke design love. All of the syntax is type-safe and thus benefits from a combination of intellisense to speed up writing and protection from runtime mistakes (e.g. id mismatches etc.). We also know that the form will definitely correctly bind to the view model on the server-side MVC controller without needing to perform slow UI or manual tests. All fields automatically have a combination of server-side validation and client-side validation logic and messages added in for us built on top of the ASP.NET Core MVC features. All fields are easily and tersely configurable to include hints and other tweaks to the rendered markup using typesafe / intellisense code. Documentation worth exploring to dive into more detail includes: Deep-dive on the example Configuring ChameleonForms Bootstrap template Field Configuration Form structure : Form , Message , Section , Navigation , Field , Field Element , Field Label and Field Validation HTML Using different form templates and creating custom form templates Tell me more?! I want to get started!"
  }
}